pub mod sb_core
pub mod sb_core::adapter
pub mod sb_core::adapter::bridge
pub fn sb_core::adapter::bridge::build_bridge(cfg: &sb_config::ir::ConfigIR, _engine: ()) -> sb_core::Bridge
pub struct sb_core::adapter::Bridge
pub sb_core::adapter::Bridge::inbounds: alloc::vec::Vec<alloc::sync::Arc<dyn sb_core::InboundService>>
pub sb_core::adapter::Bridge::outbounds: alloc::vec::Vec<(alloc::string::String, alloc::string::String, alloc::sync::Arc<dyn sb_core::OutboundConnector>)>
impl sb_core::Bridge
pub fn sb_core::Bridge::add_inbound(&mut self, ib: alloc::sync::Arc<dyn sb_core::InboundService>)
pub fn sb_core::Bridge::add_outbound(&mut self, name: alloc::string::String, kind: alloc::string::String, ob: alloc::sync::Arc<dyn sb_core::OutboundConnector>)
pub fn sb_core::Bridge::find_direct_fallback(&self) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
pub fn sb_core::Bridge::find_outbound(&self, name: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
pub fn sb_core::Bridge::get_member(&self, name: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
pub fn sb_core::Bridge::new() -> Self
pub fn sb_core::Bridge::new_from_config(_ir: &sb_config::ir::ConfigIR) -> anyhow::Result<Self>
pub fn sb_core::Bridge::outbounds_snapshot(&self) -> alloc::vec::Vec<(alloc::string::String, alloc::string::String)>
impl sb_core::Bridge
pub fn sb_core::Bridge::from_ir(ir: &sb_config::ir::ConfigIR) -> anyhow::Result<sb_core::Bridge>
impl core::clone::Clone for sb_core::Bridge
pub fn sb_core::Bridge::clone(&self) -> sb_core::Bridge
impl core::default::Default for sb_core::Bridge
pub fn sb_core::Bridge::default() -> Self
impl core::fmt::Debug for sb_core::Bridge
pub fn sb_core::Bridge::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::Bridge
impl core::marker::Send for sb_core::Bridge
impl core::marker::Sync for sb_core::Bridge
impl core::marker::Unpin for sb_core::Bridge
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::Bridge
impl !core::panic::unwind_safe::UnwindSafe for sb_core::Bridge
impl<T, U> core::convert::Into<U> for sb_core::Bridge where U: core::convert::From<T>
pub fn sb_core::Bridge::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::Bridge where U: core::convert::Into<T>
pub type sb_core::Bridge::Error = core::convert::Infallible
pub fn sb_core::Bridge::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::Bridge where U: core::convert::TryFrom<T>
pub type sb_core::Bridge::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::Bridge::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::Bridge where T: core::clone::Clone
pub type sb_core::Bridge::Owned = T
pub fn sb_core::Bridge::clone_into(&self, target: &mut T)
pub fn sb_core::Bridge::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::Bridge where T: 'static + ?core::marker::Sized
pub fn sb_core::Bridge::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::Bridge where T: ?core::marker::Sized
pub fn sb_core::Bridge::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::Bridge where T: ?core::marker::Sized
pub fn sb_core::Bridge::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::Bridge where T: core::clone::Clone
pub unsafe fn sb_core::Bridge::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::Bridge
pub fn sb_core::Bridge::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::Bridge
impl<T> tracing::instrument::WithSubscriber for sb_core::Bridge
impl<T> typenum::type_operators::Same for sb_core::Bridge
pub type sb_core::Bridge::Output = T
pub struct sb_core::adapter::InboundParam
pub sb_core::adapter::InboundParam::basic_auth: core::option::Option<sb_config::ir::Credentials>
pub sb_core::adapter::InboundParam::kind: alloc::string::String
pub sb_core::adapter::InboundParam::listen: alloc::string::String
pub sb_core::adapter::InboundParam::port: u16
impl core::clone::Clone for sb_core::InboundParam
pub fn sb_core::InboundParam::clone(&self) -> sb_core::InboundParam
impl core::fmt::Debug for sb_core::InboundParam
pub fn sb_core::InboundParam::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::InboundParam
impl core::marker::Send for sb_core::InboundParam
impl core::marker::Sync for sb_core::InboundParam
impl core::marker::Unpin for sb_core::InboundParam
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::InboundParam
impl core::panic::unwind_safe::UnwindSafe for sb_core::InboundParam
impl<T, U> core::convert::Into<U> for sb_core::InboundParam where U: core::convert::From<T>
pub fn sb_core::InboundParam::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::InboundParam where U: core::convert::Into<T>
pub type sb_core::InboundParam::Error = core::convert::Infallible
pub fn sb_core::InboundParam::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::InboundParam where U: core::convert::TryFrom<T>
pub type sb_core::InboundParam::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::InboundParam::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::InboundParam where T: core::clone::Clone
pub type sb_core::InboundParam::Owned = T
pub fn sb_core::InboundParam::clone_into(&self, target: &mut T)
pub fn sb_core::InboundParam::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::InboundParam where T: 'static + ?core::marker::Sized
pub fn sb_core::InboundParam::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::InboundParam where T: ?core::marker::Sized
pub fn sb_core::InboundParam::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::InboundParam where T: ?core::marker::Sized
pub fn sb_core::InboundParam::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::InboundParam where T: core::clone::Clone
pub unsafe fn sb_core::InboundParam::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::InboundParam
pub fn sb_core::InboundParam::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::InboundParam
impl<T> tracing::instrument::WithSubscriber for sb_core::InboundParam
impl<T> typenum::type_operators::Same for sb_core::InboundParam
pub type sb_core::InboundParam::Output = T
pub struct sb_core::adapter::OutboundParam
pub sb_core::adapter::OutboundParam::credentials: core::option::Option<sb_config::ir::Credentials>
pub sb_core::adapter::OutboundParam::kind: alloc::string::String
pub sb_core::adapter::OutboundParam::name: core::option::Option<alloc::string::String>
pub sb_core::adapter::OutboundParam::port: core::option::Option<u16>
pub sb_core::adapter::OutboundParam::server: core::option::Option<alloc::string::String>
impl core::clone::Clone for sb_core::OutboundParam
pub fn sb_core::OutboundParam::clone(&self) -> sb_core::OutboundParam
impl core::fmt::Debug for sb_core::OutboundParam
pub fn sb_core::OutboundParam::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::OutboundParam
impl core::marker::Send for sb_core::OutboundParam
impl core::marker::Sync for sb_core::OutboundParam
impl core::marker::Unpin for sb_core::OutboundParam
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::OutboundParam
impl core::panic::unwind_safe::UnwindSafe for sb_core::OutboundParam
impl<T, U> core::convert::Into<U> for sb_core::OutboundParam where U: core::convert::From<T>
pub fn sb_core::OutboundParam::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::OutboundParam where U: core::convert::Into<T>
pub type sb_core::OutboundParam::Error = core::convert::Infallible
pub fn sb_core::OutboundParam::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::OutboundParam where U: core::convert::TryFrom<T>
pub type sb_core::OutboundParam::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::OutboundParam::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::OutboundParam where T: core::clone::Clone
pub type sb_core::OutboundParam::Owned = T
pub fn sb_core::OutboundParam::clone_into(&self, target: &mut T)
pub fn sb_core::OutboundParam::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::OutboundParam where T: 'static + ?core::marker::Sized
pub fn sb_core::OutboundParam::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::OutboundParam where T: ?core::marker::Sized
pub fn sb_core::OutboundParam::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::OutboundParam where T: ?core::marker::Sized
pub fn sb_core::OutboundParam::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::OutboundParam where T: core::clone::Clone
pub unsafe fn sb_core::OutboundParam::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::OutboundParam
pub fn sb_core::OutboundParam::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::OutboundParam
impl<T> tracing::instrument::WithSubscriber for sb_core::OutboundParam
impl<T> typenum::type_operators::Same for sb_core::OutboundParam
pub type sb_core::OutboundParam::Output = T
pub struct sb_core::adapter::SelectorMember
pub sb_core::adapter::SelectorMember::conn: alloc::sync::Arc<dyn sb_core::OutboundConnector>
pub sb_core::adapter::SelectorMember::name: alloc::string::String
impl core::clone::Clone for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::clone(&self) -> sb_core::outbound::selector::Member
impl core::fmt::Debug for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::selector::Member
impl core::marker::Send for sb_core::outbound::selector::Member
impl core::marker::Sync for sb_core::outbound::selector::Member
impl core::marker::Unpin for sb_core::outbound::selector::Member
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::selector::Member
impl !core::panic::unwind_safe::UnwindSafe for sb_core::outbound::selector::Member
impl<T, U> core::convert::Into<U> for sb_core::outbound::selector::Member where U: core::convert::From<T>
pub fn sb_core::outbound::selector::Member::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::selector::Member where U: core::convert::Into<T>
pub type sb_core::outbound::selector::Member::Error = core::convert::Infallible
pub fn sb_core::outbound::selector::Member::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::selector::Member where U: core::convert::TryFrom<T>
pub type sb_core::outbound::selector::Member::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::selector::Member::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::selector::Member where T: core::clone::Clone
pub type sb_core::outbound::selector::Member::Owned = T
pub fn sb_core::outbound::selector::Member::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::selector::Member::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::selector::Member where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::selector::Member where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::selector::Member where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::selector::Member where T: core::clone::Clone
pub unsafe fn sb_core::outbound::selector::Member::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::selector::Member
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::selector::Member
impl<T> typenum::type_operators::Same for sb_core::outbound::selector::Member
pub type sb_core::outbound::selector::Member::Output = T
pub trait sb_core::adapter::InboundFactory: core::marker::Send + core::marker::Sync
pub fn sb_core::adapter::InboundFactory::create(&self, p: &sb_core::InboundParam) -> core::option::Option<alloc::sync::Arc<dyn sb_core::InboundService>>
pub trait sb_core::adapter::InboundService: core::marker::Send + core::marker::Sync + core::fmt::Debug + 'static
pub fn sb_core::adapter::InboundService::serve(&self) -> std::io::error::Result<()>
pub trait sb_core::adapter::OutboundConnector: core::marker::Send + core::marker::Sync + core::fmt::Debug + 'static
pub fn sb_core::adapter::OutboundConnector::connect(&self, host: &str, port: u16) -> std::io::error::Result<std::net::tcp::TcpStream>
impl sb_core::OutboundConnector for sb_core::outbound::selector::Selector
pub fn sb_core::outbound::selector::Selector::connect(&self, host: &str, port: u16) -> std::io::error::Result<std::net::tcp::TcpStream>
pub trait sb_core::adapter::OutboundFactory: core::marker::Send + core::marker::Sync
pub fn sb_core::adapter::OutboundFactory::create(&self, p: &sb_core::OutboundParam) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
pub mod sb_core::admin
pub mod sb_core::admin::http
pub fn sb_core::admin::http::spawn_admin(listen: &str, _engine: (), bridge: alloc::sync::Arc<sb_core::Bridge>, admin_token: core::option::Option<alloc::string::String>, supervisor: core::option::Option<alloc::sync::Arc<sb_core::runtime::supervisor::Supervisor>>, rt_handle: core::option::Option<tokio::runtime::handle::Handle>) -> std::io::error::Result<std::thread::JoinHandle<()>>
pub mod sb_core::bridge
pub fn sb_core::bridge::build_bridge(cfg: &sb_config::ir::ConfigIR, _engine: ()) -> sb_core::Bridge
pub mod sb_core::dns
pub mod sb_core::dns::cache
pub enum sb_core::dns::cache::HitKind
pub sb_core::dns::cache::HitKind::Expired
pub sb_core::dns::cache::HitKind::Hit
pub sb_core::dns::cache::HitKind::Miss
impl core::clone::Clone for sb_core::dns::cache::HitKind
pub fn sb_core::dns::cache::HitKind::clone(&self) -> sb_core::dns::cache::HitKind
impl core::fmt::Debug for sb_core::dns::cache::HitKind
pub fn sb_core::dns::cache::HitKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::cache::HitKind
impl core::marker::Send for sb_core::dns::cache::HitKind
impl core::marker::Sync for sb_core::dns::cache::HitKind
impl core::marker::Unpin for sb_core::dns::cache::HitKind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::HitKind
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::HitKind
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::HitKind where U: core::convert::From<T>
pub fn sb_core::dns::cache::HitKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::HitKind where U: core::convert::Into<T>
pub type sb_core::dns::cache::HitKind::Error = core::convert::Infallible
pub fn sb_core::dns::cache::HitKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::HitKind where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::HitKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::HitKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache::HitKind where T: core::clone::Clone
pub type sb_core::dns::cache::HitKind::Owned = T
pub fn sb_core::dns::cache::HitKind::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache::HitKind::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache::HitKind where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::HitKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::HitKind where T: ?core::marker::Sized
pub fn sb_core::dns::cache::HitKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::HitKind where T: ?core::marker::Sized
pub fn sb_core::dns::cache::HitKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache::HitKind where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache::HitKind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache::HitKind
pub fn sb_core::dns::cache::HitKind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::HitKind
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::HitKind
impl<T> typenum::type_operators::Same for sb_core::dns::cache::HitKind
pub type sb_core::dns::cache::HitKind::Output = T
pub enum sb_core::dns::cache::QType
pub sb_core::dns::cache::QType::A
pub sb_core::dns::cache::QType::AAAA
pub sb_core::dns::cache::QType::CNAME
pub sb_core::dns::cache::QType::Other(u16)
impl sb_core::dns::cache::QType
pub fn sb_core::dns::cache::QType::from_u16(value: u16) -> Self
pub fn sb_core::dns::cache::QType::to_u16(&self) -> u16
impl core::clone::Clone for sb_core::dns::cache::QType
pub fn sb_core::dns::cache::QType::clone(&self) -> sb_core::dns::cache::QType
impl core::cmp::Eq for sb_core::dns::cache::QType
impl core::cmp::PartialEq for sb_core::dns::cache::QType
pub fn sb_core::dns::cache::QType::eq(&self, other: &sb_core::dns::cache::QType) -> bool
impl core::fmt::Debug for sb_core::dns::cache::QType
pub fn sb_core::dns::cache::QType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::dns::cache::QType
pub fn sb_core::dns::cache::QType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::dns::cache::QType
impl core::marker::Freeze for sb_core::dns::cache::QType
impl core::marker::Send for sb_core::dns::cache::QType
impl core::marker::Sync for sb_core::dns::cache::QType
impl core::marker::Unpin for sb_core::dns::cache::QType
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::QType
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::QType
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::cache::QType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::QType::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::QType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::QType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::QType::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::cache::QType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::QType where U: core::convert::From<T>
pub fn sb_core::dns::cache::QType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::QType where U: core::convert::Into<T>
pub type sb_core::dns::cache::QType::Error = core::convert::Infallible
pub fn sb_core::dns::cache::QType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::QType where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::QType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::QType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache::QType where T: core::clone::Clone
pub type sb_core::dns::cache::QType::Owned = T
pub fn sb_core::dns::cache::QType::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache::QType::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache::QType where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::QType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::QType where T: ?core::marker::Sized
pub fn sb_core::dns::cache::QType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::QType where T: ?core::marker::Sized
pub fn sb_core::dns::cache::QType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache::QType where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache::QType::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache::QType
pub fn sb_core::dns::cache::QType::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::QType
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::QType
impl<T> typenum::type_operators::Same for sb_core::dns::cache::QType
pub type sb_core::dns::cache::QType::Output = T
pub enum sb_core::dns::cache::Rcode
pub sb_core::dns::cache::Rcode::FormErr
pub sb_core::dns::cache::Rcode::NoError
pub sb_core::dns::cache::Rcode::NotImp
pub sb_core::dns::cache::Rcode::NxDomain
pub sb_core::dns::cache::Rcode::Other(u8)
pub sb_core::dns::cache::Rcode::Refused
pub sb_core::dns::cache::Rcode::ServFail
impl sb_core::dns::cache::Rcode
pub fn sb_core::dns::cache::Rcode::as_str(&self) -> &'static str
impl core::clone::Clone for sb_core::dns::cache::Rcode
pub fn sb_core::dns::cache::Rcode::clone(&self) -> sb_core::dns::cache::Rcode
impl core::cmp::Eq for sb_core::dns::cache::Rcode
impl core::cmp::PartialEq for sb_core::dns::cache::Rcode
pub fn sb_core::dns::cache::Rcode::eq(&self, other: &sb_core::dns::cache::Rcode) -> bool
impl core::fmt::Debug for sb_core::dns::cache::Rcode
pub fn sb_core::dns::cache::Rcode::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::dns::cache::Rcode
impl core::marker::Freeze for sb_core::dns::cache::Rcode
impl core::marker::Send for sb_core::dns::cache::Rcode
impl core::marker::Sync for sb_core::dns::cache::Rcode
impl core::marker::Unpin for sb_core::dns::cache::Rcode
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::Rcode
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::Rcode
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::cache::Rcode where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::Rcode::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::Rcode where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::Rcode where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::Rcode::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::cache::Rcode::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::Rcode where U: core::convert::From<T>
pub fn sb_core::dns::cache::Rcode::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::Rcode where U: core::convert::Into<T>
pub type sb_core::dns::cache::Rcode::Error = core::convert::Infallible
pub fn sb_core::dns::cache::Rcode::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::Rcode where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::Rcode::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::Rcode::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache::Rcode where T: core::clone::Clone
pub type sb_core::dns::cache::Rcode::Owned = T
pub fn sb_core::dns::cache::Rcode::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache::Rcode::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache::Rcode where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::Rcode::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::Rcode where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Rcode::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::Rcode where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Rcode::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache::Rcode where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache::Rcode::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache::Rcode
pub fn sb_core::dns::cache::Rcode::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::Rcode
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::Rcode
impl<T> typenum::type_operators::Same for sb_core::dns::cache::Rcode
pub type sb_core::dns::cache::Rcode::Output = T
pub enum sb_core::dns::cache::Source
pub sb_core::dns::cache::Source::Static
pub sb_core::dns::cache::Source::System
pub sb_core::dns::cache::Source::Upstream
impl core::clone::Clone for sb_core::dns::cache::Source
pub fn sb_core::dns::cache::Source::clone(&self) -> sb_core::dns::cache::Source
impl core::cmp::Eq for sb_core::dns::cache::Source
impl core::cmp::PartialEq for sb_core::dns::cache::Source
pub fn sb_core::dns::cache::Source::eq(&self, other: &sb_core::dns::cache::Source) -> bool
impl core::fmt::Debug for sb_core::dns::cache::Source
pub fn sb_core::dns::cache::Source::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::dns::cache::Source
impl core::marker::Freeze for sb_core::dns::cache::Source
impl core::marker::Send for sb_core::dns::cache::Source
impl core::marker::Sync for sb_core::dns::cache::Source
impl core::marker::Unpin for sb_core::dns::cache::Source
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::Source
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::Source
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::cache::Source where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::Source::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::Source where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::Source where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::Source::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::cache::Source::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::Source where U: core::convert::From<T>
pub fn sb_core::dns::cache::Source::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::Source where U: core::convert::Into<T>
pub type sb_core::dns::cache::Source::Error = core::convert::Infallible
pub fn sb_core::dns::cache::Source::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::Source where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::Source::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::Source::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache::Source where T: core::clone::Clone
pub type sb_core::dns::cache::Source::Owned = T
pub fn sb_core::dns::cache::Source::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache::Source::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache::Source where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::Source::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::Source where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Source::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::Source where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Source::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache::Source where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache::Source::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache::Source
pub fn sb_core::dns::cache::Source::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::Source
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::Source
impl<T> typenum::type_operators::Same for sb_core::dns::cache::Source
pub type sb_core::dns::cache::Source::Output = T
pub struct sb_core::dns::cache::CacheManager
impl sb_core::dns::cache::CacheManager
pub fn sb_core::dns::cache::CacheManager::new(cache: alloc::sync::Arc<sb_core::dns::cache::DnsCache>) -> Self
pub fn sb_core::dns::cache::CacheManager::start_cleanup_task(&self) -> tokio::runtime::task::join::JoinHandle<()>
impl core::marker::Freeze for sb_core::dns::cache::CacheManager
impl core::marker::Send for sb_core::dns::cache::CacheManager
impl core::marker::Sync for sb_core::dns::cache::CacheManager
impl core::marker::Unpin for sb_core::dns::cache::CacheManager
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::CacheManager
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::CacheManager
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::CacheManager where U: core::convert::From<T>
pub fn sb_core::dns::cache::CacheManager::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::CacheManager where U: core::convert::Into<T>
pub type sb_core::dns::cache::CacheManager::Error = core::convert::Infallible
pub fn sb_core::dns::cache::CacheManager::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::CacheManager where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::CacheManager::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::CacheManager::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::cache::CacheManager where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::CacheManager::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::CacheManager where T: ?core::marker::Sized
pub fn sb_core::dns::cache::CacheManager::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::CacheManager where T: ?core::marker::Sized
pub fn sb_core::dns::cache::CacheManager::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::cache::CacheManager
pub fn sb_core::dns::cache::CacheManager::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::CacheManager
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::CacheManager
impl<T> typenum::type_operators::Same for sb_core::dns::cache::CacheManager
pub type sb_core::dns::cache::CacheManager::Output = T
pub struct sb_core::dns::cache::CacheStats
pub sb_core::dns::cache::CacheStats::expired_entries: usize
pub sb_core::dns::cache::CacheStats::max_entries: usize
pub sb_core::dns::cache::CacheStats::negative_entries: usize
pub sb_core::dns::cache::CacheStats::total_entries: usize
impl core::clone::Clone for sb_core::dns::cache::CacheStats
pub fn sb_core::dns::cache::CacheStats::clone(&self) -> sb_core::dns::cache::CacheStats
impl core::fmt::Debug for sb_core::dns::cache::CacheStats
pub fn sb_core::dns::cache::CacheStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::cache::CacheStats
impl core::marker::Send for sb_core::dns::cache::CacheStats
impl core::marker::Sync for sb_core::dns::cache::CacheStats
impl core::marker::Unpin for sb_core::dns::cache::CacheStats
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::CacheStats
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::CacheStats
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::CacheStats where U: core::convert::From<T>
pub fn sb_core::dns::cache::CacheStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::CacheStats where U: core::convert::Into<T>
pub type sb_core::dns::cache::CacheStats::Error = core::convert::Infallible
pub fn sb_core::dns::cache::CacheStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::CacheStats where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::CacheStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::CacheStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache::CacheStats where T: core::clone::Clone
pub type sb_core::dns::cache::CacheStats::Owned = T
pub fn sb_core::dns::cache::CacheStats::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache::CacheStats::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache::CacheStats where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::CacheStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::CacheStats where T: ?core::marker::Sized
pub fn sb_core::dns::cache::CacheStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::CacheStats where T: ?core::marker::Sized
pub fn sb_core::dns::cache::CacheStats::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache::CacheStats where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache::CacheStats::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache::CacheStats
pub fn sb_core::dns::cache::CacheStats::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::CacheStats
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::CacheStats
impl<T> typenum::type_operators::Same for sb_core::dns::cache::CacheStats
pub type sb_core::dns::cache::CacheStats::Output = T
pub struct sb_core::dns::cache::DnsCache
impl sb_core::dns::cache::DnsCache
pub fn sb_core::dns::cache::DnsCache::cleanup_expired(&self)
pub fn sb_core::dns::cache::DnsCache::clear(&self)
pub fn sb_core::dns::cache::DnsCache::get(&self, domain: &str) -> core::option::Option<sb_core::dns::DnsAnswer>
pub fn sb_core::dns::cache::DnsCache::new(max_entries: usize) -> Self
pub fn sb_core::dns::cache::DnsCache::peek_remaining(&self, domain: &str) -> core::option::Option<core::time::Duration>
pub fn sb_core::dns::cache::DnsCache::put(&self, domain: &str, answer: sb_core::dns::DnsAnswer)
pub fn sb_core::dns::cache::DnsCache::put_negative(&self, domain: &str)
pub fn sb_core::dns::cache::DnsCache::stats(&self) -> sb_core::dns::cache::CacheStats
impl core::marker::Freeze for sb_core::dns::cache::DnsCache
impl core::marker::Send for sb_core::dns::cache::DnsCache
impl core::marker::Sync for sb_core::dns::cache::DnsCache
impl core::marker::Unpin for sb_core::dns::cache::DnsCache
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::DnsCache
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::DnsCache
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::DnsCache where U: core::convert::From<T>
pub fn sb_core::dns::cache::DnsCache::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::DnsCache where U: core::convert::Into<T>
pub type sb_core::dns::cache::DnsCache::Error = core::convert::Infallible
pub fn sb_core::dns::cache::DnsCache::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::DnsCache where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::DnsCache::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::DnsCache::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::cache::DnsCache where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::DnsCache::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::DnsCache where T: ?core::marker::Sized
pub fn sb_core::dns::cache::DnsCache::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::DnsCache where T: ?core::marker::Sized
pub fn sb_core::dns::cache::DnsCache::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::cache::DnsCache
pub fn sb_core::dns::cache::DnsCache::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::DnsCache
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::DnsCache
impl<T> typenum::type_operators::Same for sb_core::dns::cache::DnsCache
pub type sb_core::dns::cache::DnsCache::Output = T
pub struct sb_core::dns::cache::Entry
pub sb_core::dns::cache::Entry::answer: sb_core::dns::DnsAnswer
pub sb_core::dns::cache::Entry::created_at: std::time::Instant
pub sb_core::dns::cache::Entry::hit_kind: sb_core::dns::cache::HitKind
impl core::clone::Clone for sb_core::dns::cache::Entry
pub fn sb_core::dns::cache::Entry::clone(&self) -> sb_core::dns::cache::Entry
impl core::fmt::Debug for sb_core::dns::cache::Entry
pub fn sb_core::dns::cache::Entry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::cache::Entry
impl core::marker::Send for sb_core::dns::cache::Entry
impl core::marker::Sync for sb_core::dns::cache::Entry
impl core::marker::Unpin for sb_core::dns::cache::Entry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::Entry
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::Entry
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::Entry where U: core::convert::From<T>
pub fn sb_core::dns::cache::Entry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::Entry where U: core::convert::Into<T>
pub type sb_core::dns::cache::Entry::Error = core::convert::Infallible
pub fn sb_core::dns::cache::Entry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::Entry where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::Entry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::Entry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache::Entry where T: core::clone::Clone
pub type sb_core::dns::cache::Entry::Owned = T
pub fn sb_core::dns::cache::Entry::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache::Entry::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache::Entry where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::Entry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::Entry where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Entry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::Entry where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Entry::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache::Entry where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache::Entry::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache::Entry
pub fn sb_core::dns::cache::Entry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::Entry
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::Entry
impl<T> typenum::type_operators::Same for sb_core::dns::cache::Entry
pub type sb_core::dns::cache::Entry::Output = T
pub struct sb_core::dns::cache::Key
pub sb_core::dns::cache::Key::name: alloc::string::String
pub sb_core::dns::cache::Key::qtype: sb_core::dns::cache::QType
impl core::clone::Clone for sb_core::dns::cache::Key
pub fn sb_core::dns::cache::Key::clone(&self) -> sb_core::dns::cache::Key
impl core::cmp::Eq for sb_core::dns::cache::Key
impl core::cmp::PartialEq for sb_core::dns::cache::Key
pub fn sb_core::dns::cache::Key::eq(&self, other: &sb_core::dns::cache::Key) -> bool
impl core::fmt::Debug for sb_core::dns::cache::Key
pub fn sb_core::dns::cache::Key::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::dns::cache::Key
pub fn sb_core::dns::cache::Key::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::dns::cache::Key
impl core::marker::Freeze for sb_core::dns::cache::Key
impl core::marker::Send for sb_core::dns::cache::Key
impl core::marker::Sync for sb_core::dns::cache::Key
impl core::marker::Unpin for sb_core::dns::cache::Key
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache::Key
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache::Key
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::cache::Key where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::Key::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::Key where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache::Key where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache::Key::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::cache::Key::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::cache::Key where U: core::convert::From<T>
pub fn sb_core::dns::cache::Key::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache::Key where U: core::convert::Into<T>
pub type sb_core::dns::cache::Key::Error = core::convert::Infallible
pub fn sb_core::dns::cache::Key::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache::Key where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache::Key::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache::Key::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache::Key where T: core::clone::Clone
pub type sb_core::dns::cache::Key::Owned = T
pub fn sb_core::dns::cache::Key::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache::Key::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache::Key where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache::Key::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache::Key where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Key::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache::Key where T: ?core::marker::Sized
pub fn sb_core::dns::cache::Key::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache::Key where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache::Key::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache::Key
pub fn sb_core::dns::cache::Key::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache::Key
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache::Key
impl<T> typenum::type_operators::Same for sb_core::dns::cache::Key
pub type sb_core::dns::cache::Key::Output = T
pub mod sb_core::dns::cache_v2
pub enum sb_core::dns::cache_v2::CacheCell
pub sb_core::dns::cache_v2::CacheCell::Neg(sb_core::dns::cache_v2::NegEntry)
pub sb_core::dns::cache_v2::CacheCell::Pos(sb_core::dns::cache_v2::PosEntry)
impl core::marker::Freeze for sb_core::dns::cache_v2::CacheCell
impl core::marker::Send for sb_core::dns::cache_v2::CacheCell
impl core::marker::Sync for sb_core::dns::cache_v2::CacheCell
impl core::marker::Unpin for sb_core::dns::cache_v2::CacheCell
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache_v2::CacheCell
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache_v2::CacheCell
impl<T, U> core::convert::Into<U> for sb_core::dns::cache_v2::CacheCell where U: core::convert::From<T>
pub fn sb_core::dns::cache_v2::CacheCell::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache_v2::CacheCell where U: core::convert::Into<T>
pub type sb_core::dns::cache_v2::CacheCell::Error = core::convert::Infallible
pub fn sb_core::dns::cache_v2::CacheCell::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache_v2::CacheCell where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache_v2::CacheCell::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache_v2::CacheCell::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::cache_v2::CacheCell where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache_v2::CacheCell::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache_v2::CacheCell where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::CacheCell::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache_v2::CacheCell where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::CacheCell::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::cache_v2::CacheCell
pub fn sb_core::dns::cache_v2::CacheCell::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache_v2::CacheCell
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache_v2::CacheCell
impl<T> typenum::type_operators::Same for sb_core::dns::cache_v2::CacheCell
pub type sb_core::dns::cache_v2::CacheCell::Output = T
pub enum sb_core::dns::cache_v2::QType
pub sb_core::dns::cache_v2::QType::A
pub sb_core::dns::cache_v2::QType::AAAA
impl core::clone::Clone for sb_core::dns::cache_v2::QType
pub fn sb_core::dns::cache_v2::QType::clone(&self) -> sb_core::dns::cache_v2::QType
impl core::cmp::Eq for sb_core::dns::cache_v2::QType
impl core::cmp::PartialEq for sb_core::dns::cache_v2::QType
pub fn sb_core::dns::cache_v2::QType::eq(&self, other: &sb_core::dns::cache_v2::QType) -> bool
impl core::fmt::Debug for sb_core::dns::cache_v2::QType
pub fn sb_core::dns::cache_v2::QType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::dns::cache_v2::QType
pub fn sb_core::dns::cache_v2::QType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for sb_core::dns::cache_v2::QType
impl core::marker::StructuralPartialEq for sb_core::dns::cache_v2::QType
impl core::marker::Freeze for sb_core::dns::cache_v2::QType
impl core::marker::Send for sb_core::dns::cache_v2::QType
impl core::marker::Sync for sb_core::dns::cache_v2::QType
impl core::marker::Unpin for sb_core::dns::cache_v2::QType
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache_v2::QType
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache_v2::QType
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::cache_v2::QType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache_v2::QType::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache_v2::QType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::cache_v2::QType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::cache_v2::QType::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::cache_v2::QType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::cache_v2::QType where U: core::convert::From<T>
pub fn sb_core::dns::cache_v2::QType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache_v2::QType where U: core::convert::Into<T>
pub type sb_core::dns::cache_v2::QType::Error = core::convert::Infallible
pub fn sb_core::dns::cache_v2::QType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache_v2::QType where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache_v2::QType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache_v2::QType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache_v2::QType where T: core::clone::Clone
pub type sb_core::dns::cache_v2::QType::Owned = T
pub fn sb_core::dns::cache_v2::QType::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache_v2::QType::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache_v2::QType where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache_v2::QType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache_v2::QType where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::QType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache_v2::QType where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::QType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache_v2::QType where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache_v2::QType::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache_v2::QType
pub fn sb_core::dns::cache_v2::QType::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache_v2::QType
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache_v2::QType
impl<T> typenum::type_operators::Same for sb_core::dns::cache_v2::QType
pub type sb_core::dns::cache_v2::QType::Output = T
pub struct sb_core::dns::cache_v2::DnsCache
impl sb_core::dns::cache_v2::DnsCache
pub async fn sb_core::dns::cache_v2::DnsCache::get(&self, name: &str, q: sb_core::dns::cache_v2::QType, now: std::time::Instant) -> core::option::Option<sb_core::dns::cache_v2::CacheCell>
pub fn sb_core::dns::cache_v2::DnsCache::new(min_ttl: core::time::Duration, max_ttl: core::time::Duration) -> Self
pub async fn sb_core::dns::cache_v2::DnsCache::put_neg(&self, name: &str, q: sb_core::dns::cache_v2::QType, ttl: core::time::Duration, now: std::time::Instant)
pub async fn sb_core::dns::cache_v2::DnsCache::put_pos(&self, name: &str, q: sb_core::dns::cache_v2::QType, addrs: smallvec::SmallVec<[core::net::ip_addr::IpAddr; 4]>, ttl: core::time::Duration, now: std::time::Instant)
impl !core::marker::Freeze for sb_core::dns::cache_v2::DnsCache
impl core::marker::Send for sb_core::dns::cache_v2::DnsCache
impl core::marker::Sync for sb_core::dns::cache_v2::DnsCache
impl core::marker::Unpin for sb_core::dns::cache_v2::DnsCache
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache_v2::DnsCache
impl !core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache_v2::DnsCache
impl<T, U> core::convert::Into<U> for sb_core::dns::cache_v2::DnsCache where U: core::convert::From<T>
pub fn sb_core::dns::cache_v2::DnsCache::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache_v2::DnsCache where U: core::convert::Into<T>
pub type sb_core::dns::cache_v2::DnsCache::Error = core::convert::Infallible
pub fn sb_core::dns::cache_v2::DnsCache::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache_v2::DnsCache where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache_v2::DnsCache::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache_v2::DnsCache::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::cache_v2::DnsCache where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache_v2::DnsCache::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache_v2::DnsCache where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::DnsCache::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache_v2::DnsCache where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::DnsCache::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::cache_v2::DnsCache
pub fn sb_core::dns::cache_v2::DnsCache::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache_v2::DnsCache
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache_v2::DnsCache
impl<T> typenum::type_operators::Same for sb_core::dns::cache_v2::DnsCache
pub type sb_core::dns::cache_v2::DnsCache::Output = T
pub struct sb_core::dns::cache_v2::NegEntry
pub sb_core::dns::cache_v2::NegEntry::expires_at: std::time::Instant
impl core::clone::Clone for sb_core::dns::cache_v2::NegEntry
pub fn sb_core::dns::cache_v2::NegEntry::clone(&self) -> sb_core::dns::cache_v2::NegEntry
impl core::fmt::Debug for sb_core::dns::cache_v2::NegEntry
pub fn sb_core::dns::cache_v2::NegEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::cache_v2::NegEntry
impl core::marker::Send for sb_core::dns::cache_v2::NegEntry
impl core::marker::Sync for sb_core::dns::cache_v2::NegEntry
impl core::marker::Unpin for sb_core::dns::cache_v2::NegEntry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache_v2::NegEntry
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache_v2::NegEntry
impl<T, U> core::convert::Into<U> for sb_core::dns::cache_v2::NegEntry where U: core::convert::From<T>
pub fn sb_core::dns::cache_v2::NegEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache_v2::NegEntry where U: core::convert::Into<T>
pub type sb_core::dns::cache_v2::NegEntry::Error = core::convert::Infallible
pub fn sb_core::dns::cache_v2::NegEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache_v2::NegEntry where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache_v2::NegEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache_v2::NegEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache_v2::NegEntry where T: core::clone::Clone
pub type sb_core::dns::cache_v2::NegEntry::Owned = T
pub fn sb_core::dns::cache_v2::NegEntry::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache_v2::NegEntry::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache_v2::NegEntry where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache_v2::NegEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache_v2::NegEntry where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::NegEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache_v2::NegEntry where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::NegEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache_v2::NegEntry where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache_v2::NegEntry::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache_v2::NegEntry
pub fn sb_core::dns::cache_v2::NegEntry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache_v2::NegEntry
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache_v2::NegEntry
impl<T> typenum::type_operators::Same for sb_core::dns::cache_v2::NegEntry
pub type sb_core::dns::cache_v2::NegEntry::Output = T
pub struct sb_core::dns::cache_v2::PosEntry
pub sb_core::dns::cache_v2::PosEntry::addrs: smallvec::SmallVec<[core::net::ip_addr::IpAddr; 4]>
pub sb_core::dns::cache_v2::PosEntry::expires_at: std::time::Instant
impl core::clone::Clone for sb_core::dns::cache_v2::PosEntry
pub fn sb_core::dns::cache_v2::PosEntry::clone(&self) -> sb_core::dns::cache_v2::PosEntry
impl core::fmt::Debug for sb_core::dns::cache_v2::PosEntry
pub fn sb_core::dns::cache_v2::PosEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::cache_v2::PosEntry
impl core::marker::Send for sb_core::dns::cache_v2::PosEntry
impl core::marker::Sync for sb_core::dns::cache_v2::PosEntry
impl core::marker::Unpin for sb_core::dns::cache_v2::PosEntry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::cache_v2::PosEntry
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::cache_v2::PosEntry
impl<T, U> core::convert::Into<U> for sb_core::dns::cache_v2::PosEntry where U: core::convert::From<T>
pub fn sb_core::dns::cache_v2::PosEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::cache_v2::PosEntry where U: core::convert::Into<T>
pub type sb_core::dns::cache_v2::PosEntry::Error = core::convert::Infallible
pub fn sb_core::dns::cache_v2::PosEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::cache_v2::PosEntry where U: core::convert::TryFrom<T>
pub type sb_core::dns::cache_v2::PosEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::cache_v2::PosEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::cache_v2::PosEntry where T: core::clone::Clone
pub type sb_core::dns::cache_v2::PosEntry::Owned = T
pub fn sb_core::dns::cache_v2::PosEntry::clone_into(&self, target: &mut T)
pub fn sb_core::dns::cache_v2::PosEntry::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::cache_v2::PosEntry where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::cache_v2::PosEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::cache_v2::PosEntry where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::PosEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::cache_v2::PosEntry where T: ?core::marker::Sized
pub fn sb_core::dns::cache_v2::PosEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::cache_v2::PosEntry where T: core::clone::Clone
pub unsafe fn sb_core::dns::cache_v2::PosEntry::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::cache_v2::PosEntry
pub fn sb_core::dns::cache_v2::PosEntry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::cache_v2::PosEntry
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::cache_v2::PosEntry
impl<T> typenum::type_operators::Same for sb_core::dns::cache_v2::PosEntry
pub type sb_core::dns::cache_v2::PosEntry::Output = T
pub mod sb_core::dns::client
pub struct sb_core::dns::client::DnsClient
impl sb_core::dns::client::DnsClient
pub fn sb_core::dns::client::DnsClient::new(ttl: core::time::Duration) -> Self
pub async fn sb_core::dns::client::DnsClient::resolve(&self, host: &str, default_port: u16) -> anyhow::Result<alloc::vec::Vec<core::net::socket_addr::SocketAddr>>
impl core::clone::Clone for sb_core::dns::client::DnsClient
pub fn sb_core::dns::client::DnsClient::clone(&self) -> sb_core::dns::client::DnsClient
impl core::marker::Freeze for sb_core::dns::client::DnsClient
impl core::marker::Send for sb_core::dns::client::DnsClient
impl core::marker::Sync for sb_core::dns::client::DnsClient
impl core::marker::Unpin for sb_core::dns::client::DnsClient
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::client::DnsClient
impl !core::panic::unwind_safe::UnwindSafe for sb_core::dns::client::DnsClient
impl<T, U> core::convert::Into<U> for sb_core::dns::client::DnsClient where U: core::convert::From<T>
pub fn sb_core::dns::client::DnsClient::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::client::DnsClient where U: core::convert::Into<T>
pub type sb_core::dns::client::DnsClient::Error = core::convert::Infallible
pub fn sb_core::dns::client::DnsClient::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::client::DnsClient where U: core::convert::TryFrom<T>
pub type sb_core::dns::client::DnsClient::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::client::DnsClient::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::client::DnsClient where T: core::clone::Clone
pub type sb_core::dns::client::DnsClient::Owned = T
pub fn sb_core::dns::client::DnsClient::clone_into(&self, target: &mut T)
pub fn sb_core::dns::client::DnsClient::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::client::DnsClient where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::client::DnsClient::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::client::DnsClient where T: ?core::marker::Sized
pub fn sb_core::dns::client::DnsClient::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::client::DnsClient where T: ?core::marker::Sized
pub fn sb_core::dns::client::DnsClient::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::client::DnsClient where T: core::clone::Clone
pub unsafe fn sb_core::dns::client::DnsClient::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::client::DnsClient
pub fn sb_core::dns::client::DnsClient::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::client::DnsClient
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::client::DnsClient
impl<T> typenum::type_operators::Same for sb_core::dns::client::DnsClient
pub type sb_core::dns::client::DnsClient::Output = T
pub mod sb_core::dns::enhanced_client
pub struct sb_core::dns::enhanced_client::EnhancedDnsClient
impl sb_core::dns::enhanced_client::EnhancedDnsClient
pub async fn sb_core::dns::enhanced_client::EnhancedDnsClient::cache_stats(&self) -> (usize, usize)
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::is_enabled(&self) -> bool
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::new() -> Self
pub async fn sb_core::dns::enhanced_client::EnhancedDnsClient::resolve(&self, hostname: &str) -> anyhow::Result<alloc::vec::Vec<core::net::ip_addr::IpAddr>>
impl core::default::Default for sb_core::dns::enhanced_client::EnhancedDnsClient
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::default() -> Self
impl core::marker::Freeze for sb_core::dns::enhanced_client::EnhancedDnsClient
impl core::marker::Send for sb_core::dns::enhanced_client::EnhancedDnsClient
impl core::marker::Sync for sb_core::dns::enhanced_client::EnhancedDnsClient
impl core::marker::Unpin for sb_core::dns::enhanced_client::EnhancedDnsClient
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::enhanced_client::EnhancedDnsClient
impl !core::panic::unwind_safe::UnwindSafe for sb_core::dns::enhanced_client::EnhancedDnsClient
impl<T, U> core::convert::Into<U> for sb_core::dns::enhanced_client::EnhancedDnsClient where U: core::convert::From<T>
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::enhanced_client::EnhancedDnsClient where U: core::convert::Into<T>
pub type sb_core::dns::enhanced_client::EnhancedDnsClient::Error = core::convert::Infallible
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::enhanced_client::EnhancedDnsClient where U: core::convert::TryFrom<T>
pub type sb_core::dns::enhanced_client::EnhancedDnsClient::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::enhanced_client::EnhancedDnsClient where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::enhanced_client::EnhancedDnsClient where T: ?core::marker::Sized
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::enhanced_client::EnhancedDnsClient where T: ?core::marker::Sized
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::enhanced_client::EnhancedDnsClient
pub fn sb_core::dns::enhanced_client::EnhancedDnsClient::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::enhanced_client::EnhancedDnsClient
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::enhanced_client::EnhancedDnsClient
impl<T> typenum::type_operators::Same for sb_core::dns::enhanced_client::EnhancedDnsClient
pub type sb_core::dns::enhanced_client::EnhancedDnsClient::Output = T
pub mod sb_core::dns::message
pub struct sb_core::dns::message::QuestionKey
pub sb_core::dns::message::QuestionKey::name: alloc::string::String
pub sb_core::dns::message::QuestionKey::qtype: u16
impl core::clone::Clone for sb_core::dns::message::QuestionKey
pub fn sb_core::dns::message::QuestionKey::clone(&self) -> sb_core::dns::message::QuestionKey
impl core::cmp::Eq for sb_core::dns::message::QuestionKey
impl core::cmp::PartialEq for sb_core::dns::message::QuestionKey
pub fn sb_core::dns::message::QuestionKey::eq(&self, other: &sb_core::dns::message::QuestionKey) -> bool
impl core::fmt::Debug for sb_core::dns::message::QuestionKey
pub fn sb_core::dns::message::QuestionKey::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::dns::message::QuestionKey
pub fn sb_core::dns::message::QuestionKey::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::dns::message::QuestionKey
impl core::marker::Freeze for sb_core::dns::message::QuestionKey
impl core::marker::Send for sb_core::dns::message::QuestionKey
impl core::marker::Sync for sb_core::dns::message::QuestionKey
impl core::marker::Unpin for sb_core::dns::message::QuestionKey
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::message::QuestionKey
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::message::QuestionKey
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::message::QuestionKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::message::QuestionKey::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::message::QuestionKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::message::QuestionKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::message::QuestionKey::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::message::QuestionKey::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::message::QuestionKey where U: core::convert::From<T>
pub fn sb_core::dns::message::QuestionKey::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::message::QuestionKey where U: core::convert::Into<T>
pub type sb_core::dns::message::QuestionKey::Error = core::convert::Infallible
pub fn sb_core::dns::message::QuestionKey::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::message::QuestionKey where U: core::convert::TryFrom<T>
pub type sb_core::dns::message::QuestionKey::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::message::QuestionKey::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::message::QuestionKey where T: core::clone::Clone
pub type sb_core::dns::message::QuestionKey::Owned = T
pub fn sb_core::dns::message::QuestionKey::clone_into(&self, target: &mut T)
pub fn sb_core::dns::message::QuestionKey::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::message::QuestionKey where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::message::QuestionKey::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::message::QuestionKey where T: ?core::marker::Sized
pub fn sb_core::dns::message::QuestionKey::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::message::QuestionKey where T: ?core::marker::Sized
pub fn sb_core::dns::message::QuestionKey::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::message::QuestionKey where T: core::clone::Clone
pub unsafe fn sb_core::dns::message::QuestionKey::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::message::QuestionKey
pub fn sb_core::dns::message::QuestionKey::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::message::QuestionKey
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::message::QuestionKey
impl<T> typenum::type_operators::Same for sb_core::dns::message::QuestionKey
pub type sb_core::dns::message::QuestionKey::Output = T
pub struct sb_core::dns::message::Record
pub sb_core::dns::message::Record::class: u16
pub sb_core::dns::message::Record::data: alloc::vec::Vec<u8>
pub sb_core::dns::message::Record::name: alloc::string::String
pub sb_core::dns::message::Record::rtype: u16
pub sb_core::dns::message::Record::ttl: u32
impl sb_core::dns::message::Record
pub fn sb_core::dns::message::Record::as_ip(&self) -> core::option::Option<core::net::ip_addr::IpAddr>
pub fn sb_core::dns::message::Record::as_ipv4(&self) -> core::option::Option<core::net::ip_addr::Ipv4Addr>
pub fn sb_core::dns::message::Record::as_ipv6(&self) -> core::option::Option<core::net::ip_addr::Ipv6Addr>
pub fn sb_core::dns::message::Record::new(name: alloc::string::String, rtype: u16, class: u16, ttl: u32, data: alloc::vec::Vec<u8>) -> Self
impl core::clone::Clone for sb_core::dns::message::Record
pub fn sb_core::dns::message::Record::clone(&self) -> sb_core::dns::message::Record
impl core::cmp::Eq for sb_core::dns::message::Record
impl core::cmp::PartialEq for sb_core::dns::message::Record
pub fn sb_core::dns::message::Record::eq(&self, other: &sb_core::dns::message::Record) -> bool
impl core::fmt::Debug for sb_core::dns::message::Record
pub fn sb_core::dns::message::Record::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::dns::message::Record
impl core::marker::Freeze for sb_core::dns::message::Record
impl core::marker::Send for sb_core::dns::message::Record
impl core::marker::Sync for sb_core::dns::message::Record
impl core::marker::Unpin for sb_core::dns::message::Record
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::message::Record
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::message::Record
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::message::Record where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::message::Record::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::message::Record where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::message::Record where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::message::Record::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::message::Record::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::message::Record where U: core::convert::From<T>
pub fn sb_core::dns::message::Record::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::message::Record where U: core::convert::Into<T>
pub type sb_core::dns::message::Record::Error = core::convert::Infallible
pub fn sb_core::dns::message::Record::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::message::Record where U: core::convert::TryFrom<T>
pub type sb_core::dns::message::Record::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::message::Record::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::message::Record where T: core::clone::Clone
pub type sb_core::dns::message::Record::Owned = T
pub fn sb_core::dns::message::Record::clone_into(&self, target: &mut T)
pub fn sb_core::dns::message::Record::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::message::Record where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::message::Record::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::message::Record where T: ?core::marker::Sized
pub fn sb_core::dns::message::Record::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::message::Record where T: ?core::marker::Sized
pub fn sb_core::dns::message::Record::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::message::Record where T: core::clone::Clone
pub unsafe fn sb_core::dns::message::Record::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::message::Record
pub fn sb_core::dns::message::Record::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::message::Record
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::message::Record
impl<T> typenum::type_operators::Same for sb_core::dns::message::Record
pub type sb_core::dns::message::Record::Output = T
pub fn sb_core::dns::message::parse_min_ttl(pkt: &[u8]) -> core::option::Option<u64>
pub fn sb_core::dns::message::parse_question_key(pkt: &[u8]) -> core::option::Option<sb_core::dns::message::QuestionKey>
pub mod sb_core::dns::metrics
pub fn sb_core::dns::metrics::inc_blackhole()
pub fn sb_core::dns::metrics::inc_resolve_err(code: &'static str)
pub fn sb_core::dns::metrics::inc_timeout(kind: &'static str)
pub fn sb_core::dns::metrics::obs_inflight(scope: &'static str, v: i64)
pub mod sb_core::dns::resolve
pub enum sb_core::dns::resolve::DnsBackend
pub sb_core::dns::resolve::DnsBackend::Auto
pub sb_core::dns::resolve::DnsBackend::Doh
pub sb_core::dns::resolve::DnsBackend::Dot
pub sb_core::dns::resolve::DnsBackend::System
pub sb_core::dns::resolve::DnsBackend::Udp
impl core::clone::Clone for sb_core::dns::resolve::DnsBackend
pub fn sb_core::dns::resolve::DnsBackend::clone(&self) -> sb_core::dns::resolve::DnsBackend
impl core::fmt::Debug for sb_core::dns::resolve::DnsBackend
pub fn sb_core::dns::resolve::DnsBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::dns::resolve::DnsBackend
impl core::marker::Freeze for sb_core::dns::resolve::DnsBackend
impl core::marker::Send for sb_core::dns::resolve::DnsBackend
impl core::marker::Sync for sb_core::dns::resolve::DnsBackend
impl core::marker::Unpin for sb_core::dns::resolve::DnsBackend
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::resolve::DnsBackend
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::resolve::DnsBackend
impl<T, U> core::convert::Into<U> for sb_core::dns::resolve::DnsBackend where U: core::convert::From<T>
pub fn sb_core::dns::resolve::DnsBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::resolve::DnsBackend where U: core::convert::Into<T>
pub type sb_core::dns::resolve::DnsBackend::Error = core::convert::Infallible
pub fn sb_core::dns::resolve::DnsBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::resolve::DnsBackend where U: core::convert::TryFrom<T>
pub type sb_core::dns::resolve::DnsBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::resolve::DnsBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::resolve::DnsBackend where T: core::clone::Clone
pub type sb_core::dns::resolve::DnsBackend::Owned = T
pub fn sb_core::dns::resolve::DnsBackend::clone_into(&self, target: &mut T)
pub fn sb_core::dns::resolve::DnsBackend::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::resolve::DnsBackend where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::resolve::DnsBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::resolve::DnsBackend where T: ?core::marker::Sized
pub fn sb_core::dns::resolve::DnsBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::resolve::DnsBackend where T: ?core::marker::Sized
pub fn sb_core::dns::resolve::DnsBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::resolve::DnsBackend where T: core::clone::Clone
pub unsafe fn sb_core::dns::resolve::DnsBackend::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::resolve::DnsBackend
pub fn sb_core::dns::resolve::DnsBackend::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::resolve::DnsBackend
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::resolve::DnsBackend
impl<T> typenum::type_operators::Same for sb_core::dns::resolve::DnsBackend
pub type sb_core::dns::resolve::DnsBackend::Output = T
pub async fn sb_core::dns::resolve::resolve_all(host: &str, port: u16) -> anyhow::Result<alloc::vec::Vec<core::net::socket_addr::SocketAddr>>
pub async fn sb_core::dns::resolve::resolve_all_compat(host: &str, port: u16) -> std::io::error::Result<alloc::vec::Vec<core::net::socket_addr::SocketAddr>>
pub async fn sb_core::dns::resolve::resolve_socketaddr(host: &str, port: u16) -> std::io::error::Result<core::net::socket_addr::SocketAddr>
pub mod sb_core::dns::resolver
pub struct sb_core::dns::resolver::DnsResolver
impl sb_core::dns::resolver::DnsResolver
pub fn sb_core::dns::resolver::DnsResolver::new(upstreams: alloc::vec::Vec<alloc::sync::Arc<dyn sb_core::dns::DnsUpstream>>) -> Self
pub fn sb_core::dns::resolver::DnsResolver::with_name(self, name: alloc::string::String) -> Self
impl core::clone::Clone for sb_core::dns::resolver::DnsResolver
pub fn sb_core::dns::resolver::DnsResolver::clone(&self) -> sb_core::dns::resolver::DnsResolver
impl sb_core::dns::Resolver for sb_core::dns::resolver::DnsResolver
pub fn sb_core::dns::resolver::DnsResolver::name(&self) -> &str
pub fn sb_core::dns::resolver::DnsResolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::resolver::DnsResolver
impl core::marker::Send for sb_core::dns::resolver::DnsResolver
impl core::marker::Sync for sb_core::dns::resolver::DnsResolver
impl core::marker::Unpin for sb_core::dns::resolver::DnsResolver
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::resolver::DnsResolver
impl !core::panic::unwind_safe::UnwindSafe for sb_core::dns::resolver::DnsResolver
impl<T, U> core::convert::Into<U> for sb_core::dns::resolver::DnsResolver where U: core::convert::From<T>
pub fn sb_core::dns::resolver::DnsResolver::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::resolver::DnsResolver where U: core::convert::Into<T>
pub type sb_core::dns::resolver::DnsResolver::Error = core::convert::Infallible
pub fn sb_core::dns::resolver::DnsResolver::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::resolver::DnsResolver where U: core::convert::TryFrom<T>
pub type sb_core::dns::resolver::DnsResolver::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::resolver::DnsResolver::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::resolver::DnsResolver where T: core::clone::Clone
pub type sb_core::dns::resolver::DnsResolver::Owned = T
pub fn sb_core::dns::resolver::DnsResolver::clone_into(&self, target: &mut T)
pub fn sb_core::dns::resolver::DnsResolver::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::resolver::DnsResolver where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::resolver::DnsResolver::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::resolver::DnsResolver where T: ?core::marker::Sized
pub fn sb_core::dns::resolver::DnsResolver::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::resolver::DnsResolver where T: ?core::marker::Sized
pub fn sb_core::dns::resolver::DnsResolver::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::resolver::DnsResolver where T: core::clone::Clone
pub unsafe fn sb_core::dns::resolver::DnsResolver::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::resolver::DnsResolver
pub fn sb_core::dns::resolver::DnsResolver::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::resolver::DnsResolver
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::resolver::DnsResolver
impl<T> typenum::type_operators::Same for sb_core::dns::resolver::DnsResolver
pub type sb_core::dns::resolver::DnsResolver::Output = T
pub mod sb_core::dns::strategy
pub enum sb_core::dns::strategy::QueryStrategy
pub sb_core::dns::strategy::QueryStrategy::Failover
pub sb_core::dns::strategy::QueryStrategy::Race
pub sb_core::dns::strategy::QueryStrategy::Random
pub sb_core::dns::strategy::QueryStrategy::RoundRobin
impl core::clone::Clone for sb_core::dns::strategy::QueryStrategy
pub fn sb_core::dns::strategy::QueryStrategy::clone(&self) -> sb_core::dns::strategy::QueryStrategy
impl core::fmt::Debug for sb_core::dns::strategy::QueryStrategy
pub fn sb_core::dns::strategy::QueryStrategy::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::strategy::QueryStrategy
impl core::marker::Send for sb_core::dns::strategy::QueryStrategy
impl core::marker::Sync for sb_core::dns::strategy::QueryStrategy
impl core::marker::Unpin for sb_core::dns::strategy::QueryStrategy
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::strategy::QueryStrategy
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::strategy::QueryStrategy
impl<T, U> core::convert::Into<U> for sb_core::dns::strategy::QueryStrategy where U: core::convert::From<T>
pub fn sb_core::dns::strategy::QueryStrategy::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::strategy::QueryStrategy where U: core::convert::Into<T>
pub type sb_core::dns::strategy::QueryStrategy::Error = core::convert::Infallible
pub fn sb_core::dns::strategy::QueryStrategy::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::strategy::QueryStrategy where U: core::convert::TryFrom<T>
pub type sb_core::dns::strategy::QueryStrategy::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::strategy::QueryStrategy::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::strategy::QueryStrategy where T: core::clone::Clone
pub type sb_core::dns::strategy::QueryStrategy::Owned = T
pub fn sb_core::dns::strategy::QueryStrategy::clone_into(&self, target: &mut T)
pub fn sb_core::dns::strategy::QueryStrategy::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::strategy::QueryStrategy where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::strategy::QueryStrategy::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::strategy::QueryStrategy where T: ?core::marker::Sized
pub fn sb_core::dns::strategy::QueryStrategy::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::strategy::QueryStrategy where T: ?core::marker::Sized
pub fn sb_core::dns::strategy::QueryStrategy::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::strategy::QueryStrategy where T: core::clone::Clone
pub unsafe fn sb_core::dns::strategy::QueryStrategy::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::strategy::QueryStrategy
pub fn sb_core::dns::strategy::QueryStrategy::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::strategy::QueryStrategy
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::strategy::QueryStrategy
impl<T> typenum::type_operators::Same for sb_core::dns::strategy::QueryStrategy
pub type sb_core::dns::strategy::QueryStrategy::Output = T
pub struct sb_core::dns::strategy::QueryExecutor
impl sb_core::dns::strategy::QueryExecutor
pub fn sb_core::dns::strategy::QueryExecutor::new(upstreams: alloc::vec::Vec<alloc::sync::Arc<dyn sb_core::dns::DnsUpstream>>) -> Self
pub async fn sb_core::dns::strategy::QueryExecutor::query(&self, domain: &str, record_type: sb_core::dns::RecordType) -> anyhow::Result<sb_core::dns::DnsAnswer>
pub fn sb_core::dns::strategy::QueryExecutor::with_retry_config(self, retry_config: sb_core::dns::strategy::RetryConfig) -> Self
pub fn sb_core::dns::strategy::QueryExecutor::with_strategy(self, strategy: sb_core::dns::strategy::QueryStrategy) -> Self
pub fn sb_core::dns::strategy::QueryExecutor::with_timeout(self, timeout: core::time::Duration) -> Self
impl !core::marker::Freeze for sb_core::dns::strategy::QueryExecutor
impl core::marker::Send for sb_core::dns::strategy::QueryExecutor
impl core::marker::Sync for sb_core::dns::strategy::QueryExecutor
impl core::marker::Unpin for sb_core::dns::strategy::QueryExecutor
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::strategy::QueryExecutor
impl !core::panic::unwind_safe::UnwindSafe for sb_core::dns::strategy::QueryExecutor
impl<T, U> core::convert::Into<U> for sb_core::dns::strategy::QueryExecutor where U: core::convert::From<T>
pub fn sb_core::dns::strategy::QueryExecutor::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::strategy::QueryExecutor where U: core::convert::Into<T>
pub type sb_core::dns::strategy::QueryExecutor::Error = core::convert::Infallible
pub fn sb_core::dns::strategy::QueryExecutor::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::strategy::QueryExecutor where U: core::convert::TryFrom<T>
pub type sb_core::dns::strategy::QueryExecutor::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::strategy::QueryExecutor::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::strategy::QueryExecutor where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::strategy::QueryExecutor::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::strategy::QueryExecutor where T: ?core::marker::Sized
pub fn sb_core::dns::strategy::QueryExecutor::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::strategy::QueryExecutor where T: ?core::marker::Sized
pub fn sb_core::dns::strategy::QueryExecutor::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::strategy::QueryExecutor
pub fn sb_core::dns::strategy::QueryExecutor::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::strategy::QueryExecutor
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::strategy::QueryExecutor
impl<T> typenum::type_operators::Same for sb_core::dns::strategy::QueryExecutor
pub type sb_core::dns::strategy::QueryExecutor::Output = T
pub struct sb_core::dns::strategy::RetryConfig
pub sb_core::dns::strategy::RetryConfig::backoff_multiplier: f64
pub sb_core::dns::strategy::RetryConfig::max_retries: usize
pub sb_core::dns::strategy::RetryConfig::max_retry_delay: core::time::Duration
pub sb_core::dns::strategy::RetryConfig::retry_delay: core::time::Duration
impl core::clone::Clone for sb_core::dns::strategy::RetryConfig
pub fn sb_core::dns::strategy::RetryConfig::clone(&self) -> sb_core::dns::strategy::RetryConfig
impl core::default::Default for sb_core::dns::strategy::RetryConfig
pub fn sb_core::dns::strategy::RetryConfig::default() -> Self
impl core::fmt::Debug for sb_core::dns::strategy::RetryConfig
pub fn sb_core::dns::strategy::RetryConfig::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::strategy::RetryConfig
impl core::marker::Send for sb_core::dns::strategy::RetryConfig
impl core::marker::Sync for sb_core::dns::strategy::RetryConfig
impl core::marker::Unpin for sb_core::dns::strategy::RetryConfig
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::strategy::RetryConfig
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::strategy::RetryConfig
impl<T, U> core::convert::Into<U> for sb_core::dns::strategy::RetryConfig where U: core::convert::From<T>
pub fn sb_core::dns::strategy::RetryConfig::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::strategy::RetryConfig where U: core::convert::Into<T>
pub type sb_core::dns::strategy::RetryConfig::Error = core::convert::Infallible
pub fn sb_core::dns::strategy::RetryConfig::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::strategy::RetryConfig where U: core::convert::TryFrom<T>
pub type sb_core::dns::strategy::RetryConfig::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::strategy::RetryConfig::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::strategy::RetryConfig where T: core::clone::Clone
pub type sb_core::dns::strategy::RetryConfig::Owned = T
pub fn sb_core::dns::strategy::RetryConfig::clone_into(&self, target: &mut T)
pub fn sb_core::dns::strategy::RetryConfig::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::strategy::RetryConfig where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::strategy::RetryConfig::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::strategy::RetryConfig where T: ?core::marker::Sized
pub fn sb_core::dns::strategy::RetryConfig::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::strategy::RetryConfig where T: ?core::marker::Sized
pub fn sb_core::dns::strategy::RetryConfig::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::strategy::RetryConfig where T: core::clone::Clone
pub unsafe fn sb_core::dns::strategy::RetryConfig::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::strategy::RetryConfig
pub fn sb_core::dns::strategy::RetryConfig::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::strategy::RetryConfig
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::strategy::RetryConfig
impl<T> typenum::type_operators::Same for sb_core::dns::strategy::RetryConfig
pub type sb_core::dns::strategy::RetryConfig::Output = T
pub mod sb_core::dns::stub
pub struct sb_core::dns::stub::DnsCache
impl sb_core::dns::stub::DnsCache
pub fn sb_core::dns::stub::DnsCache::new(ttl_secs: u64) -> Self
pub fn sb_core::dns::stub::DnsCache::purge_expired(&self)
pub fn sb_core::dns::stub::DnsCache::resolve(&self, host: &str, port: u16) -> core::option::Option<alloc::vec::Vec<core::net::socket_addr::SocketAddr>>
pub fn sb_core::dns::stub::DnsCache::size(&self) -> usize
impl core::fmt::Debug for sb_core::dns::stub::DnsCache
pub fn sb_core::dns::stub::DnsCache::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl !core::marker::Freeze for sb_core::dns::stub::DnsCache
impl core::marker::Send for sb_core::dns::stub::DnsCache
impl core::marker::Sync for sb_core::dns::stub::DnsCache
impl core::marker::Unpin for sb_core::dns::stub::DnsCache
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::stub::DnsCache
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::stub::DnsCache
impl<T, U> core::convert::Into<U> for sb_core::dns::stub::DnsCache where U: core::convert::From<T>
pub fn sb_core::dns::stub::DnsCache::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::stub::DnsCache where U: core::convert::Into<T>
pub type sb_core::dns::stub::DnsCache::Error = core::convert::Infallible
pub fn sb_core::dns::stub::DnsCache::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::stub::DnsCache where U: core::convert::TryFrom<T>
pub type sb_core::dns::stub::DnsCache::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::stub::DnsCache::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::stub::DnsCache where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::stub::DnsCache::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::stub::DnsCache where T: ?core::marker::Sized
pub fn sb_core::dns::stub::DnsCache::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::stub::DnsCache where T: ?core::marker::Sized
pub fn sb_core::dns::stub::DnsCache::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::stub::DnsCache
pub fn sb_core::dns::stub::DnsCache::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::stub::DnsCache
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::stub::DnsCache
impl<T> typenum::type_operators::Same for sb_core::dns::stub::DnsCache
pub type sb_core::dns::stub::DnsCache::Output = T
pub fn sb_core::dns::stub::global() -> core::option::Option<&'static sb_core::dns::stub::DnsCache>
pub fn sb_core::dns::stub::init_global(ttl_secs: u64)
pub mod sb_core::dns::system
pub struct sb_core::dns::system::SystemResolver
impl sb_core::dns::system::SystemResolver
pub fn sb_core::dns::system::SystemResolver::new(default_ttl: core::time::Duration) -> Self
impl sb_core::dns::DnsResolver for sb_core::dns::system::SystemResolver
pub fn sb_core::dns::system::SystemResolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, host: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::system::SystemResolver
impl core::marker::Send for sb_core::dns::system::SystemResolver
impl core::marker::Sync for sb_core::dns::system::SystemResolver
impl core::marker::Unpin for sb_core::dns::system::SystemResolver
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::system::SystemResolver
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::system::SystemResolver
impl<T, U> core::convert::Into<U> for sb_core::dns::system::SystemResolver where U: core::convert::From<T>
pub fn sb_core::dns::system::SystemResolver::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::system::SystemResolver where U: core::convert::Into<T>
pub type sb_core::dns::system::SystemResolver::Error = core::convert::Infallible
pub fn sb_core::dns::system::SystemResolver::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::system::SystemResolver where U: core::convert::TryFrom<T>
pub type sb_core::dns::system::SystemResolver::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::system::SystemResolver::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::system::SystemResolver where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::system::SystemResolver::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::system::SystemResolver where T: ?core::marker::Sized
pub fn sb_core::dns::system::SystemResolver::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::system::SystemResolver where T: ?core::marker::Sized
pub fn sb_core::dns::system::SystemResolver::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::system::SystemResolver
pub fn sb_core::dns::system::SystemResolver::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::system::SystemResolver
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::system::SystemResolver
impl<T> typenum::type_operators::Same for sb_core::dns::system::SystemResolver
pub type sb_core::dns::system::SystemResolver::Output = T
pub mod sb_core::dns::transport
pub mod sb_core::dns::transport::enhanced_udp
pub struct sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::is_enabled(&self) -> bool
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::new(servers: alloc::vec::Vec<core::net::socket_addr::SocketAddr>) -> Self
impl sb_core::dns::transport::DnsTransport for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::name(&self) -> &'static str
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::query<'life0, 'life1, 'async_trait>(&'life0 self, packet: &'life1 [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<alloc::vec::Vec<u8>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::marker::Send for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::marker::Sync for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::marker::Unpin for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl<T, U> core::convert::Into<U> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where U: core::convert::From<T>
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where U: core::convert::Into<T>
pub type sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::Error = core::convert::Infallible
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where U: core::convert::TryFrom<T>
pub type sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where T: ?core::marker::Sized
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where T: ?core::marker::Sized
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl<T> typenum::type_operators::Same for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub type sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::Output = T
pub struct sb_core::dns::transport::DhcpResolver
impl sb_core::dns::transport::DhcpResolver
pub fn sb_core::dns::transport::DhcpResolver::new() -> Self
impl core::default::Default for sb_core::dns::transport::DhcpResolver
pub fn sb_core::dns::transport::DhcpResolver::default() -> Self
impl sb_core::dns::Resolver for sb_core::dns::transport::DhcpResolver
pub fn sb_core::dns::transport::DhcpResolver::name(&self) -> &str
pub fn sb_core::dns::transport::DhcpResolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, _domain: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::transport::DhcpResolver
impl core::marker::Send for sb_core::dns::transport::DhcpResolver
impl core::marker::Sync for sb_core::dns::transport::DhcpResolver
impl core::marker::Unpin for sb_core::dns::transport::DhcpResolver
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::transport::DhcpResolver
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::transport::DhcpResolver
impl<T, U> core::convert::Into<U> for sb_core::dns::transport::DhcpResolver where U: core::convert::From<T>
pub fn sb_core::dns::transport::DhcpResolver::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::transport::DhcpResolver where U: core::convert::Into<T>
pub type sb_core::dns::transport::DhcpResolver::Error = core::convert::Infallible
pub fn sb_core::dns::transport::DhcpResolver::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::transport::DhcpResolver where U: core::convert::TryFrom<T>
pub type sb_core::dns::transport::DhcpResolver::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::transport::DhcpResolver::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::transport::DhcpResolver where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::transport::DhcpResolver::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::transport::DhcpResolver where T: ?core::marker::Sized
pub fn sb_core::dns::transport::DhcpResolver::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::transport::DhcpResolver where T: ?core::marker::Sized
pub fn sb_core::dns::transport::DhcpResolver::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::transport::DhcpResolver
pub fn sb_core::dns::transport::DhcpResolver::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::transport::DhcpResolver
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::transport::DhcpResolver
impl<T> typenum::type_operators::Same for sb_core::dns::transport::DhcpResolver
pub type sb_core::dns::transport::DhcpResolver::Output = T
pub struct sb_core::dns::transport::EnhancedUdpTransport
impl sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::is_enabled(&self) -> bool
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::new(servers: alloc::vec::Vec<core::net::socket_addr::SocketAddr>) -> Self
impl sb_core::dns::transport::DnsTransport for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::name(&self) -> &'static str
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::query<'life0, 'life1, 'async_trait>(&'life0 self, packet: &'life1 [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<alloc::vec::Vec<u8>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::marker::Send for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::marker::Sync for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::marker::Unpin for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl<T, U> core::convert::Into<U> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where U: core::convert::From<T>
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where U: core::convert::Into<T>
pub type sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::Error = core::convert::Infallible
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where U: core::convert::TryFrom<T>
pub type sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where T: ?core::marker::Sized
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport where T: ?core::marker::Sized
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
impl<T> typenum::type_operators::Same for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub type sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::Output = T
pub struct sb_core::dns::transport::UdpTransport
impl sb_core::dns::transport::UdpTransport
pub fn sb_core::dns::transport::UdpTransport::new(upstream: sb_core::dns::transport::UdpUpstream) -> Self
impl core::clone::Clone for sb_core::dns::transport::UdpTransport
pub fn sb_core::dns::transport::UdpTransport::clone(&self) -> sb_core::dns::transport::UdpTransport
impl core::fmt::Debug for sb_core::dns::transport::UdpTransport
pub fn sb_core::dns::transport::UdpTransport::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl sb_core::dns::transport::DnsTransport for sb_core::dns::transport::UdpTransport
pub fn sb_core::dns::transport::UdpTransport::name(&self) -> &'static str
pub fn sb_core::dns::transport::UdpTransport::query<'life0, 'life1, 'async_trait>(&'life0 self, packet: &'life1 [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<alloc::vec::Vec<u8>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::transport::UdpTransport
impl core::marker::Send for sb_core::dns::transport::UdpTransport
impl core::marker::Sync for sb_core::dns::transport::UdpTransport
impl core::marker::Unpin for sb_core::dns::transport::UdpTransport
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::transport::UdpTransport
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::transport::UdpTransport
impl<T, U> core::convert::Into<U> for sb_core::dns::transport::UdpTransport where U: core::convert::From<T>
pub fn sb_core::dns::transport::UdpTransport::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::transport::UdpTransport where U: core::convert::Into<T>
pub type sb_core::dns::transport::UdpTransport::Error = core::convert::Infallible
pub fn sb_core::dns::transport::UdpTransport::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::transport::UdpTransport where U: core::convert::TryFrom<T>
pub type sb_core::dns::transport::UdpTransport::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::transport::UdpTransport::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::transport::UdpTransport where T: core::clone::Clone
pub type sb_core::dns::transport::UdpTransport::Owned = T
pub fn sb_core::dns::transport::UdpTransport::clone_into(&self, target: &mut T)
pub fn sb_core::dns::transport::UdpTransport::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::transport::UdpTransport where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::transport::UdpTransport::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::transport::UdpTransport where T: ?core::marker::Sized
pub fn sb_core::dns::transport::UdpTransport::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::transport::UdpTransport where T: ?core::marker::Sized
pub fn sb_core::dns::transport::UdpTransport::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::transport::UdpTransport where T: core::clone::Clone
pub unsafe fn sb_core::dns::transport::UdpTransport::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::transport::UdpTransport
pub fn sb_core::dns::transport::UdpTransport::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::transport::UdpTransport
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::transport::UdpTransport
impl<T> typenum::type_operators::Same for sb_core::dns::transport::UdpTransport
pub type sb_core::dns::transport::UdpTransport::Output = T
pub struct sb_core::dns::transport::UdpUpstream
pub sb_core::dns::transport::UdpUpstream::addr: core::net::socket_addr::SocketAddr
pub sb_core::dns::transport::UdpUpstream::timeout: core::time::Duration
impl core::clone::Clone for sb_core::dns::transport::UdpUpstream
pub fn sb_core::dns::transport::UdpUpstream::clone(&self) -> sb_core::dns::transport::UdpUpstream
impl core::fmt::Debug for sb_core::dns::transport::UdpUpstream
pub fn sb_core::dns::transport::UdpUpstream::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::transport::UdpUpstream
impl core::marker::Send for sb_core::dns::transport::UdpUpstream
impl core::marker::Sync for sb_core::dns::transport::UdpUpstream
impl core::marker::Unpin for sb_core::dns::transport::UdpUpstream
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::transport::UdpUpstream
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::transport::UdpUpstream
impl<T, U> core::convert::Into<U> for sb_core::dns::transport::UdpUpstream where U: core::convert::From<T>
pub fn sb_core::dns::transport::UdpUpstream::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::transport::UdpUpstream where U: core::convert::Into<T>
pub type sb_core::dns::transport::UdpUpstream::Error = core::convert::Infallible
pub fn sb_core::dns::transport::UdpUpstream::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::transport::UdpUpstream where U: core::convert::TryFrom<T>
pub type sb_core::dns::transport::UdpUpstream::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::transport::UdpUpstream::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::transport::UdpUpstream where T: core::clone::Clone
pub type sb_core::dns::transport::UdpUpstream::Owned = T
pub fn sb_core::dns::transport::UdpUpstream::clone_into(&self, target: &mut T)
pub fn sb_core::dns::transport::UdpUpstream::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::transport::UdpUpstream where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::transport::UdpUpstream::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::transport::UdpUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::transport::UdpUpstream::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::transport::UdpUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::transport::UdpUpstream::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::transport::UdpUpstream where T: core::clone::Clone
pub unsafe fn sb_core::dns::transport::UdpUpstream::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::transport::UdpUpstream
pub fn sb_core::dns::transport::UdpUpstream::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::transport::UdpUpstream
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::transport::UdpUpstream
impl<T> typenum::type_operators::Same for sb_core::dns::transport::UdpUpstream
pub type sb_core::dns::transport::UdpUpstream::Output = T
pub trait sb_core::dns::transport::DnsTransport: core::marker::Send + core::marker::Sync
pub fn sb_core::dns::transport::DnsTransport::name(&self) -> &'static str
pub fn sb_core::dns::transport::DnsTransport::query<'life0, 'life1, 'async_trait>(&'life0 self, packet: &'life1 [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<alloc::vec::Vec<u8>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::transport::DnsTransport for sb_core::dns::transport::UdpTransport
pub fn sb_core::dns::transport::UdpTransport::name(&self) -> &'static str
pub fn sb_core::dns::transport::UdpTransport::query<'life0, 'life1, 'async_trait>(&'life0 self, packet: &'life1 [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<alloc::vec::Vec<u8>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::transport::DnsTransport for sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::name(&self) -> &'static str
pub fn sb_core::dns::transport::enhanced_udp::EnhancedUdpTransport::query<'life0, 'life1, 'async_trait>(&'life0 self, packet: &'life1 [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<alloc::vec::Vec<u8>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub mod sb_core::dns::upstream
pub struct sb_core::dns::upstream::DohUpstream
impl sb_core::dns::upstream::DohUpstream
pub fn sb_core::dns::upstream::DohUpstream::new(url: alloc::string::String) -> anyhow::Result<Self>
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::DohUpstream
pub fn sb_core::dns::upstream::DohUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::DohUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::DohUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::upstream::DohUpstream
impl core::marker::Send for sb_core::dns::upstream::DohUpstream
impl core::marker::Sync for sb_core::dns::upstream::DohUpstream
impl core::marker::Unpin for sb_core::dns::upstream::DohUpstream
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::upstream::DohUpstream
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::upstream::DohUpstream
impl<T, U> core::convert::Into<U> for sb_core::dns::upstream::DohUpstream where U: core::convert::From<T>
pub fn sb_core::dns::upstream::DohUpstream::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::upstream::DohUpstream where U: core::convert::Into<T>
pub type sb_core::dns::upstream::DohUpstream::Error = core::convert::Infallible
pub fn sb_core::dns::upstream::DohUpstream::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::upstream::DohUpstream where U: core::convert::TryFrom<T>
pub type sb_core::dns::upstream::DohUpstream::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::upstream::DohUpstream::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::upstream::DohUpstream where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::upstream::DohUpstream::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::upstream::DohUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::DohUpstream::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::upstream::DohUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::DohUpstream::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::upstream::DohUpstream
pub fn sb_core::dns::upstream::DohUpstream::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::upstream::DohUpstream
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::upstream::DohUpstream
impl<T> typenum::type_operators::Same for sb_core::dns::upstream::DohUpstream
pub type sb_core::dns::upstream::DohUpstream::Output = T
pub struct sb_core::dns::upstream::DotUpstream
impl sb_core::dns::upstream::DotUpstream
pub fn sb_core::dns::upstream::DotUpstream::new(server: core::net::socket_addr::SocketAddr, server_name: alloc::string::String) -> Self
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::DotUpstream
pub fn sb_core::dns::upstream::DotUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::DotUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::DotUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::upstream::DotUpstream
impl core::marker::Send for sb_core::dns::upstream::DotUpstream
impl core::marker::Sync for sb_core::dns::upstream::DotUpstream
impl core::marker::Unpin for sb_core::dns::upstream::DotUpstream
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::upstream::DotUpstream
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::upstream::DotUpstream
impl<T, U> core::convert::Into<U> for sb_core::dns::upstream::DotUpstream where U: core::convert::From<T>
pub fn sb_core::dns::upstream::DotUpstream::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::upstream::DotUpstream where U: core::convert::Into<T>
pub type sb_core::dns::upstream::DotUpstream::Error = core::convert::Infallible
pub fn sb_core::dns::upstream::DotUpstream::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::upstream::DotUpstream where U: core::convert::TryFrom<T>
pub type sb_core::dns::upstream::DotUpstream::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::upstream::DotUpstream::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::upstream::DotUpstream where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::upstream::DotUpstream::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::upstream::DotUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::DotUpstream::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::upstream::DotUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::DotUpstream::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::upstream::DotUpstream
pub fn sb_core::dns::upstream::DotUpstream::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::upstream::DotUpstream
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::upstream::DotUpstream
impl<T> typenum::type_operators::Same for sb_core::dns::upstream::DotUpstream
pub type sb_core::dns::upstream::DotUpstream::Output = T
pub struct sb_core::dns::upstream::SystemUpstream
impl sb_core::dns::upstream::SystemUpstream
pub fn sb_core::dns::upstream::SystemUpstream::new() -> Self
impl core::default::Default for sb_core::dns::upstream::SystemUpstream
pub fn sb_core::dns::upstream::SystemUpstream::default() -> Self
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::SystemUpstream
pub fn sb_core::dns::upstream::SystemUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::SystemUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::SystemUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, _record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::upstream::SystemUpstream
impl core::marker::Send for sb_core::dns::upstream::SystemUpstream
impl core::marker::Sync for sb_core::dns::upstream::SystemUpstream
impl core::marker::Unpin for sb_core::dns::upstream::SystemUpstream
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::upstream::SystemUpstream
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::upstream::SystemUpstream
impl<T, U> core::convert::Into<U> for sb_core::dns::upstream::SystemUpstream where U: core::convert::From<T>
pub fn sb_core::dns::upstream::SystemUpstream::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::upstream::SystemUpstream where U: core::convert::Into<T>
pub type sb_core::dns::upstream::SystemUpstream::Error = core::convert::Infallible
pub fn sb_core::dns::upstream::SystemUpstream::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::upstream::SystemUpstream where U: core::convert::TryFrom<T>
pub type sb_core::dns::upstream::SystemUpstream::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::upstream::SystemUpstream::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::upstream::SystemUpstream where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::upstream::SystemUpstream::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::upstream::SystemUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::SystemUpstream::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::upstream::SystemUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::SystemUpstream::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::upstream::SystemUpstream
pub fn sb_core::dns::upstream::SystemUpstream::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::upstream::SystemUpstream
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::upstream::SystemUpstream
impl<T> typenum::type_operators::Same for sb_core::dns::upstream::SystemUpstream
pub type sb_core::dns::upstream::SystemUpstream::Output = T
pub struct sb_core::dns::upstream::UdpUpstream
impl sb_core::dns::upstream::UdpUpstream
pub fn sb_core::dns::upstream::UdpUpstream::new(server: core::net::socket_addr::SocketAddr) -> Self
pub fn sb_core::dns::upstream::UdpUpstream::with_retries(self, retries: usize) -> Self
pub fn sb_core::dns::upstream::UdpUpstream::with_timeout(self, timeout: core::time::Duration) -> Self
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::UdpUpstream
pub fn sb_core::dns::upstream::UdpUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::UdpUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::UdpUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::upstream::UdpUpstream
impl core::marker::Send for sb_core::dns::upstream::UdpUpstream
impl core::marker::Sync for sb_core::dns::upstream::UdpUpstream
impl core::marker::Unpin for sb_core::dns::upstream::UdpUpstream
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::upstream::UdpUpstream
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::upstream::UdpUpstream
impl<T, U> core::convert::Into<U> for sb_core::dns::upstream::UdpUpstream where U: core::convert::From<T>
pub fn sb_core::dns::upstream::UdpUpstream::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::upstream::UdpUpstream where U: core::convert::Into<T>
pub type sb_core::dns::upstream::UdpUpstream::Error = core::convert::Infallible
pub fn sb_core::dns::upstream::UdpUpstream::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::upstream::UdpUpstream where U: core::convert::TryFrom<T>
pub type sb_core::dns::upstream::UdpUpstream::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::upstream::UdpUpstream::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::dns::upstream::UdpUpstream where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::upstream::UdpUpstream::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::upstream::UdpUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::UdpUpstream::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::upstream::UdpUpstream where T: ?core::marker::Sized
pub fn sb_core::dns::upstream::UdpUpstream::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::dns::upstream::UdpUpstream
pub fn sb_core::dns::upstream::UdpUpstream::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::upstream::UdpUpstream
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::upstream::UdpUpstream
impl<T> typenum::type_operators::Same for sb_core::dns::upstream::UdpUpstream
pub type sb_core::dns::upstream::UdpUpstream::Output = T
pub enum sb_core::dns::RecordType
pub sb_core::dns::RecordType::A = 1
pub sb_core::dns::RecordType::AAAA = 28
pub sb_core::dns::RecordType::CNAME = 5
pub sb_core::dns::RecordType::MX = 15
pub sb_core::dns::RecordType::TXT = 16
impl sb_core::dns::RecordType
pub fn sb_core::dns::RecordType::as_u16(self) -> u16
pub fn sb_core::dns::RecordType::from_u16(value: u16) -> core::option::Option<Self>
impl core::clone::Clone for sb_core::dns::RecordType
pub fn sb_core::dns::RecordType::clone(&self) -> sb_core::dns::RecordType
impl core::cmp::Eq for sb_core::dns::RecordType
impl core::cmp::PartialEq for sb_core::dns::RecordType
pub fn sb_core::dns::RecordType::eq(&self, other: &sb_core::dns::RecordType) -> bool
impl core::fmt::Debug for sb_core::dns::RecordType
pub fn sb_core::dns::RecordType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::dns::RecordType
pub fn sb_core::dns::RecordType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for sb_core::dns::RecordType
impl core::marker::StructuralPartialEq for sb_core::dns::RecordType
impl core::marker::Freeze for sb_core::dns::RecordType
impl core::marker::Send for sb_core::dns::RecordType
impl core::marker::Sync for sb_core::dns::RecordType
impl core::marker::Unpin for sb_core::dns::RecordType
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::RecordType
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::RecordType
impl<Q, K> equivalent::Equivalent<K> for sb_core::dns::RecordType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::RecordType::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::RecordType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::dns::RecordType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::dns::RecordType::equivalent(&self, key: &K) -> bool
pub fn sb_core::dns::RecordType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::dns::RecordType where U: core::convert::From<T>
pub fn sb_core::dns::RecordType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::RecordType where U: core::convert::Into<T>
pub type sb_core::dns::RecordType::Error = core::convert::Infallible
pub fn sb_core::dns::RecordType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::RecordType where U: core::convert::TryFrom<T>
pub type sb_core::dns::RecordType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::RecordType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::RecordType where T: core::clone::Clone
pub type sb_core::dns::RecordType::Owned = T
pub fn sb_core::dns::RecordType::clone_into(&self, target: &mut T)
pub fn sb_core::dns::RecordType::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::RecordType where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::RecordType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::RecordType where T: ?core::marker::Sized
pub fn sb_core::dns::RecordType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::RecordType where T: ?core::marker::Sized
pub fn sb_core::dns::RecordType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::RecordType where T: core::clone::Clone
pub unsafe fn sb_core::dns::RecordType::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::RecordType
pub fn sb_core::dns::RecordType::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::RecordType
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::RecordType
impl<T> typenum::type_operators::Same for sb_core::dns::RecordType
pub type sb_core::dns::RecordType::Output = T
pub struct sb_core::dns::DnsAnswer
pub sb_core::dns::DnsAnswer::ips: alloc::vec::Vec<core::net::ip_addr::IpAddr>
pub sb_core::dns::DnsAnswer::rcode: sb_core::dns::cache::Rcode
pub sb_core::dns::DnsAnswer::source: sb_core::dns::cache::Source
pub sb_core::dns::DnsAnswer::ttl: core::time::Duration
impl core::clone::Clone for sb_core::dns::DnsAnswer
pub fn sb_core::dns::DnsAnswer::clone(&self) -> sb_core::dns::DnsAnswer
impl core::fmt::Debug for sb_core::dns::DnsAnswer
pub fn sb_core::dns::DnsAnswer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::dns::DnsAnswer
impl core::marker::Send for sb_core::dns::DnsAnswer
impl core::marker::Sync for sb_core::dns::DnsAnswer
impl core::marker::Unpin for sb_core::dns::DnsAnswer
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::DnsAnswer
impl core::panic::unwind_safe::UnwindSafe for sb_core::dns::DnsAnswer
impl<T, U> core::convert::Into<U> for sb_core::dns::DnsAnswer where U: core::convert::From<T>
pub fn sb_core::dns::DnsAnswer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::DnsAnswer where U: core::convert::Into<T>
pub type sb_core::dns::DnsAnswer::Error = core::convert::Infallible
pub fn sb_core::dns::DnsAnswer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::DnsAnswer where U: core::convert::TryFrom<T>
pub type sb_core::dns::DnsAnswer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::DnsAnswer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::DnsAnswer where T: core::clone::Clone
pub type sb_core::dns::DnsAnswer::Owned = T
pub fn sb_core::dns::DnsAnswer::clone_into(&self, target: &mut T)
pub fn sb_core::dns::DnsAnswer::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::DnsAnswer where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::DnsAnswer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::DnsAnswer where T: ?core::marker::Sized
pub fn sb_core::dns::DnsAnswer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::DnsAnswer where T: ?core::marker::Sized
pub fn sb_core::dns::DnsAnswer::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::DnsAnswer where T: core::clone::Clone
pub unsafe fn sb_core::dns::DnsAnswer::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::DnsAnswer
pub fn sb_core::dns::DnsAnswer::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::DnsAnswer
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::DnsAnswer
impl<T> typenum::type_operators::Same for sb_core::dns::DnsAnswer
pub type sb_core::dns::DnsAnswer::Output = T
pub struct sb_core::dns::ResolverHandle
impl sb_core::dns::ResolverHandle
pub fn sb_core::dns::ResolverHandle::disabled() -> Self
pub fn sb_core::dns::ResolverHandle::from_env_or_default() -> Self
pub fn sb_core::dns::ResolverHandle::is_enabled(&self) -> bool
pub async fn sb_core::dns::ResolverHandle::resolve(&self, host: &str) -> anyhow::Result<sb_core::dns::DnsAnswer>
impl core::clone::Clone for sb_core::dns::ResolverHandle
pub fn sb_core::dns::ResolverHandle::clone(&self) -> sb_core::dns::ResolverHandle
impl core::fmt::Debug for sb_core::dns::ResolverHandle
pub fn sb_core::dns::ResolverHandle::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl sb_core::dns::Resolver for sb_core::dns::ResolverHandle
pub fn sb_core::dns::ResolverHandle::name(&self) -> &str
pub fn sb_core::dns::ResolverHandle::resolve<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::dns::ResolverHandle
impl core::marker::Send for sb_core::dns::ResolverHandle
impl core::marker::Sync for sb_core::dns::ResolverHandle
impl core::marker::Unpin for sb_core::dns::ResolverHandle
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::dns::ResolverHandle
impl !core::panic::unwind_safe::UnwindSafe for sb_core::dns::ResolverHandle
impl<T, U> core::convert::Into<U> for sb_core::dns::ResolverHandle where U: core::convert::From<T>
pub fn sb_core::dns::ResolverHandle::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::dns::ResolverHandle where U: core::convert::Into<T>
pub type sb_core::dns::ResolverHandle::Error = core::convert::Infallible
pub fn sb_core::dns::ResolverHandle::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::dns::ResolverHandle where U: core::convert::TryFrom<T>
pub type sb_core::dns::ResolverHandle::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::dns::ResolverHandle::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::dns::ResolverHandle where T: core::clone::Clone
pub type sb_core::dns::ResolverHandle::Owned = T
pub fn sb_core::dns::ResolverHandle::clone_into(&self, target: &mut T)
pub fn sb_core::dns::ResolverHandle::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::dns::ResolverHandle where T: 'static + ?core::marker::Sized
pub fn sb_core::dns::ResolverHandle::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::dns::ResolverHandle where T: ?core::marker::Sized
pub fn sb_core::dns::ResolverHandle::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::dns::ResolverHandle where T: ?core::marker::Sized
pub fn sb_core::dns::ResolverHandle::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::dns::ResolverHandle where T: core::clone::Clone
pub unsafe fn sb_core::dns::ResolverHandle::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::dns::ResolverHandle
pub fn sb_core::dns::ResolverHandle::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::dns::ResolverHandle
impl<T> tracing::instrument::WithSubscriber for sb_core::dns::ResolverHandle
impl<T> typenum::type_operators::Same for sb_core::dns::ResolverHandle
pub type sb_core::dns::ResolverHandle::Output = T
pub trait sb_core::dns::DnsResolver: core::marker::Send + core::marker::Sync
pub fn sb_core::dns::DnsResolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, host: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::DnsResolver for sb_core::dns::system::SystemResolver
pub fn sb_core::dns::system::SystemResolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, host: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub trait sb_core::dns::DnsUpstream: core::marker::Send + core::marker::Sync
pub fn sb_core::dns::DnsUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::DnsUpstream::name(&self) -> &str
pub fn sb_core::dns::DnsUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::DohUpstream
pub fn sb_core::dns::upstream::DohUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::DohUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::DohUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::DotUpstream
pub fn sb_core::dns::upstream::DotUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::DotUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::DotUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::SystemUpstream
pub fn sb_core::dns::upstream::SystemUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::SystemUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::SystemUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, _record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::DnsUpstream for sb_core::dns::upstream::UdpUpstream
pub fn sb_core::dns::upstream::UdpUpstream::health_check<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = bool> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::dns::upstream::UdpUpstream::name(&self) -> &str
pub fn sb_core::dns::upstream::UdpUpstream::query<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str, record_type: sb_core::dns::RecordType) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub trait sb_core::dns::Resolver: core::marker::Send + core::marker::Sync
pub fn sb_core::dns::Resolver::name(&self) -> &str
pub fn sb_core::dns::Resolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::Resolver for sb_core::dns::ResolverHandle
pub fn sb_core::dns::ResolverHandle::name(&self) -> &str
pub fn sb_core::dns::ResolverHandle::resolve<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::Resolver for sb_core::dns::resolver::DnsResolver
pub fn sb_core::dns::resolver::DnsResolver::name(&self) -> &str
pub fn sb_core::dns::resolver::DnsResolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, domain: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::dns::Resolver for sb_core::dns::transport::DhcpResolver
pub fn sb_core::dns::transport::DhcpResolver::name(&self) -> &str
pub fn sb_core::dns::transport::DhcpResolver::resolve<'life0, 'life1, 'async_trait>(&'life0 self, _domain: &'life1 str) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::dns::DnsAnswer>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub mod sb_core::error
pub use sb_core::error::IssueCode
pub enum sb_core::error::Error
pub sb_core::error::Error::Canceled
pub sb_core::error::Error::Forbidden
pub sb_core::error::Error::Internal(&'static str)
pub sb_core::error::Error::Io(std::io::error::Error)
pub sb_core::error::Error::Protocol(&'static str)
pub sb_core::error::Error::Refused
pub sb_core::error::Error::Timeout(core::time::Duration)
pub sb_core::error::Error::Unauthorized
pub sb_core::error::Error::Unreachable
impl core::convert::From<std::io::error::Error> for sb_core::error::Error
pub fn sb_core::error::Error::from(source: std::io::error::Error) -> Self
impl core::error::Error for sb_core::error::Error
pub fn sb_core::error::Error::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for sb_core::error::Error
pub fn sb_core::error::Error::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::error::Error
pub fn sb_core::error::Error::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::error::Error
impl core::marker::Send for sb_core::error::Error
impl core::marker::Sync for sb_core::error::Error
impl core::marker::Unpin for sb_core::error::Error
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::error::Error
impl !core::panic::unwind_safe::UnwindSafe for sb_core::error::Error
impl<T, U> core::convert::Into<U> for sb_core::error::Error where U: core::convert::From<T>
pub fn sb_core::error::Error::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::error::Error where U: core::convert::Into<T>
pub type sb_core::error::Error::Error = core::convert::Infallible
pub fn sb_core::error::Error::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::error::Error where U: core::convert::TryFrom<T>
pub type sb_core::error::Error::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::error::Error::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for sb_core::error::Error where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::error::Error::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::error::Error where T: 'static + ?core::marker::Sized
pub fn sb_core::error::Error::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::error::Error where T: ?core::marker::Sized
pub fn sb_core::error::Error::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::error::Error where T: ?core::marker::Sized
pub fn sb_core::error::Error::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::error::Error
pub fn sb_core::error::Error::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::error::Error
impl<T> tracing::instrument::WithSubscriber for sb_core::error::Error
impl<T> typenum::type_operators::Same for sb_core::error::Error
pub type sb_core::error::Error::Output = T
pub enum sb_core::error::ErrorClass
pub sb_core::error::ErrorClass::Authentication
pub sb_core::error::ErrorClass::Configuration
pub sb_core::error::ErrorClass::Connection
pub sb_core::error::ErrorClass::Protocol
pub sb_core::error::ErrorClass::Resource
impl core::clone::Clone for sb_core::error::ErrorClass
pub fn sb_core::error::ErrorClass::clone(&self) -> sb_core::error::ErrorClass
impl core::cmp::PartialEq for sb_core::error::ErrorClass
pub fn sb_core::error::ErrorClass::eq(&self, other: &sb_core::error::ErrorClass) -> bool
impl core::fmt::Debug for sb_core::error::ErrorClass
pub fn sb_core::error::ErrorClass::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::error::ErrorClass
impl core::marker::Freeze for sb_core::error::ErrorClass
impl core::marker::Send for sb_core::error::ErrorClass
impl core::marker::Sync for sb_core::error::ErrorClass
impl core::marker::Unpin for sb_core::error::ErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::error::ErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::error::ErrorClass
impl<T, U> core::convert::Into<U> for sb_core::error::ErrorClass where U: core::convert::From<T>
pub fn sb_core::error::ErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::error::ErrorClass where U: core::convert::Into<T>
pub type sb_core::error::ErrorClass::Error = core::convert::Infallible
pub fn sb_core::error::ErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::error::ErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::error::ErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::error::ErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::error::ErrorClass where T: core::clone::Clone
pub type sb_core::error::ErrorClass::Owned = T
pub fn sb_core::error::ErrorClass::clone_into(&self, target: &mut T)
pub fn sb_core::error::ErrorClass::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::error::ErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::error::ErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::error::ErrorClass where T: ?core::marker::Sized
pub fn sb_core::error::ErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::error::ErrorClass where T: ?core::marker::Sized
pub fn sb_core::error::ErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::error::ErrorClass where T: core::clone::Clone
pub unsafe fn sb_core::error::ErrorClass::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::error::ErrorClass
pub fn sb_core::error::ErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::error::ErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::error::ErrorClass
impl<T> typenum::type_operators::Same for sb_core::error::ErrorClass
pub type sb_core::error::ErrorClass::Output = T
pub enum sb_core::error::SbError
pub sb_core::error::SbError::Addr
pub sb_core::error::SbError::Addr::message: alloc::string::String
pub sb_core::error::SbError::Canceled
pub sb_core::error::SbError::Canceled::operation: alloc::string::String
pub sb_core::error::SbError::Capacity
pub sb_core::error::SbError::Capacity::limit: usize
pub sb_core::error::SbError::Capacity::what: alloc::string::String
pub sb_core::error::SbError::Config
pub sb_core::error::SbError::Config::code: sb_types::IssueCode
pub sb_core::error::SbError::Config::hint: core::option::Option<alloc::string::String>
pub sb_core::error::SbError::Config::msg: alloc::string::String
pub sb_core::error::SbError::Config::ptr: alloc::string::String
pub sb_core::error::SbError::Dns
pub sb_core::error::SbError::Dns::message: alloc::string::String
pub sb_core::error::SbError::Io(std::io::error::Error)
pub sb_core::error::SbError::Network
pub sb_core::error::SbError::Network::class: sb_core::error::ErrorClass
pub sb_core::error::SbError::Network::msg: alloc::string::String
pub sb_core::error::SbError::Other
pub sb_core::error::SbError::Other::message: alloc::string::String
pub sb_core::error::SbError::Other::source: core::option::Option<alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync)>>
pub sb_core::error::SbError::Parse
pub sb_core::error::SbError::Parse::message: alloc::string::String
pub sb_core::error::SbError::Poison
pub sb_core::error::SbError::Poison::message: alloc::string::String
pub sb_core::error::SbError::Timeout
pub sb_core::error::SbError::Timeout::operation: alloc::string::String
pub sb_core::error::SbError::Timeout::timeout_ms: u64
impl sb_core::error::SbError
pub fn sb_core::error::SbError::addr(msg: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::error::SbError::canceled(operation: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::error::SbError::dns(msg: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::error::SbError::io(e: std::io::error::Error) -> Self
pub fn sb_core::error::SbError::kind(&self) -> &'static str
pub fn sb_core::error::SbError::other(msg: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::error::SbError::parse(msg: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::error::SbError::poison(msg: impl core::convert::Into<alloc::string::String>) -> Self
impl sb_core::error::SbError
pub fn sb_core::error::SbError::capacity(what: impl core::convert::Into<alloc::string::String>, limit: usize) -> Self
pub fn sb_core::error::SbError::config(code: sb_types::IssueCode, ptr: impl core::convert::Into<alloc::string::String>, msg: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::error::SbError::network(class: sb_core::error::ErrorClass, msg: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::error::SbError::timeout(operation: impl core::convert::Into<alloc::string::String>, timeout_ms: u64) -> Self
pub fn sb_core::error::SbError::with_hint(self, hint: impl core::convert::Into<alloc::string::String>) -> Self
impl core::convert::From<anyhow::Error> for sb_core::error::SbError
pub fn sb_core::error::SbError::from(e: anyhow::Error) -> Self
impl core::convert::From<sb_core::error::Issue> for sb_core::error::SbError
pub fn sb_core::error::SbError::from(issue: sb_core::error::Issue) -> Self
impl core::convert::From<sb_core::error::SbError> for sb_core::error::Issue
pub fn sb_core::error::Issue::from(error: sb_core::error::SbError) -> Self
impl core::convert::From<std::io::error::Error> for sb_core::error::SbError
pub fn sb_core::error::SbError::from(e: std::io::error::Error) -> Self
impl core::error::Error for sb_core::error::SbError
pub fn sb_core::error::SbError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for sb_core::error::SbError
pub fn sb_core::error::SbError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::error::SbError
pub fn sb_core::error::SbError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::error::SbError
impl core::marker::Send for sb_core::error::SbError
impl core::marker::Sync for sb_core::error::SbError
impl core::marker::Unpin for sb_core::error::SbError
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::error::SbError
impl !core::panic::unwind_safe::UnwindSafe for sb_core::error::SbError
impl<T, U> core::convert::Into<U> for sb_core::error::SbError where U: core::convert::From<T>
pub fn sb_core::error::SbError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::error::SbError where U: core::convert::Into<T>
pub type sb_core::error::SbError::Error = core::convert::Infallible
pub fn sb_core::error::SbError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::error::SbError where U: core::convert::TryFrom<T>
pub type sb_core::error::SbError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::error::SbError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for sb_core::error::SbError where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::error::SbError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::error::SbError where T: 'static + ?core::marker::Sized
pub fn sb_core::error::SbError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::error::SbError where T: ?core::marker::Sized
pub fn sb_core::error::SbError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::error::SbError where T: ?core::marker::Sized
pub fn sb_core::error::SbError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::error::SbError
pub fn sb_core::error::SbError::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::error::SbError
impl<T> tracing::instrument::WithSubscriber for sb_core::error::SbError
impl<T> typenum::type_operators::Same for sb_core::error::SbError
pub type sb_core::error::SbError::Output = T
pub struct sb_core::error::ErrorReport
pub sb_core::error::ErrorReport::fingerprint: alloc::string::String
pub sb_core::error::ErrorReport::issues: alloc::vec::Vec<sb_core::error::Issue>
impl sb_core::error::ErrorReport
pub fn sb_core::error::ErrorReport::from_errors(errors: alloc::vec::Vec<sb_core::error::SbError>) -> Self
pub fn sb_core::error::ErrorReport::single(error: sb_core::error::SbError) -> Self
impl core::fmt::Debug for sb_core::error::ErrorReport
pub fn sb_core::error::ErrorReport::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::error::ErrorReport
impl core::marker::Send for sb_core::error::ErrorReport
impl core::marker::Sync for sb_core::error::ErrorReport
impl core::marker::Unpin for sb_core::error::ErrorReport
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::error::ErrorReport
impl core::panic::unwind_safe::UnwindSafe for sb_core::error::ErrorReport
impl<T, U> core::convert::Into<U> for sb_core::error::ErrorReport where U: core::convert::From<T>
pub fn sb_core::error::ErrorReport::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::error::ErrorReport where U: core::convert::Into<T>
pub type sb_core::error::ErrorReport::Error = core::convert::Infallible
pub fn sb_core::error::ErrorReport::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::error::ErrorReport where U: core::convert::TryFrom<T>
pub type sb_core::error::ErrorReport::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::error::ErrorReport::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::error::ErrorReport where T: 'static + ?core::marker::Sized
pub fn sb_core::error::ErrorReport::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::error::ErrorReport where T: ?core::marker::Sized
pub fn sb_core::error::ErrorReport::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::error::ErrorReport where T: ?core::marker::Sized
pub fn sb_core::error::ErrorReport::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::error::ErrorReport
pub fn sb_core::error::ErrorReport::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::error::ErrorReport
impl<T> tracing::instrument::WithSubscriber for sb_core::error::ErrorReport
impl<T> typenum::type_operators::Same for sb_core::error::ErrorReport
pub type sb_core::error::ErrorReport::Output = T
pub struct sb_core::error::Issue
pub sb_core::error::Issue::code: alloc::string::String
pub sb_core::error::Issue::hint: core::option::Option<alloc::string::String>
pub sb_core::error::Issue::kind: alloc::string::String
pub sb_core::error::Issue::msg: alloc::string::String
pub sb_core::error::Issue::ptr: alloc::string::String
impl core::convert::From<sb_core::error::Issue> for sb_core::error::SbError
pub fn sb_core::error::SbError::from(issue: sb_core::error::Issue) -> Self
impl core::convert::From<sb_core::error::SbError> for sb_core::error::Issue
pub fn sb_core::error::Issue::from(error: sb_core::error::SbError) -> Self
impl core::fmt::Debug for sb_core::error::Issue
pub fn sb_core::error::Issue::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::error::Issue
impl core::marker::Send for sb_core::error::Issue
impl core::marker::Sync for sb_core::error::Issue
impl core::marker::Unpin for sb_core::error::Issue
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::error::Issue
impl core::panic::unwind_safe::UnwindSafe for sb_core::error::Issue
impl<T, U> core::convert::Into<U> for sb_core::error::Issue where U: core::convert::From<T>
pub fn sb_core::error::Issue::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::error::Issue where U: core::convert::Into<T>
pub type sb_core::error::Issue::Error = core::convert::Infallible
pub fn sb_core::error::Issue::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::error::Issue where U: core::convert::TryFrom<T>
pub type sb_core::error::Issue::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::error::Issue::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::error::Issue where T: 'static + ?core::marker::Sized
pub fn sb_core::error::Issue::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::error::Issue where T: ?core::marker::Sized
pub fn sb_core::error::Issue::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::error::Issue where T: ?core::marker::Sized
pub fn sb_core::error::Issue::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::error::Issue
pub fn sb_core::error::Issue::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::error::Issue
impl<T> tracing::instrument::WithSubscriber for sb_core::error::Issue
impl<T> typenum::type_operators::Same for sb_core::error::Issue
pub type sb_core::error::Issue::Output = T
pub type sb_core::error::Result<T, E> = core::result::Result<T, E>
pub type sb_core::error::SbResult<T> = core::result::Result<T, sb_core::error::SbError>
pub mod sb_core::error_map
pub use sb_core::error_map::IssueCode
pub mod sb_core::error_map::classify
pub fn sb_core::error_map::classify::from_io_error(e: &std::io::error::Error) -> sb_types::IssueCode
pub mod sb_core::errors
pub mod sb_core::errors::classify
pub struct sb_core::errors::classify::NetClass
pub sb_core::errors::classify::NetClass::class: &'static str
pub sb_core::errors::classify::NetClass::code: sb_types::IssueCode
impl core::clone::Clone for sb_core::errors::classify::NetClass
pub fn sb_core::errors::classify::NetClass::clone(&self) -> sb_core::errors::classify::NetClass
impl core::fmt::Debug for sb_core::errors::classify::NetClass
pub fn sb_core::errors::classify::NetClass::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::errors::classify::NetClass
impl core::marker::Send for sb_core::errors::classify::NetClass
impl core::marker::Sync for sb_core::errors::classify::NetClass
impl core::marker::Unpin for sb_core::errors::classify::NetClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::errors::classify::NetClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::errors::classify::NetClass
impl<T, U> core::convert::Into<U> for sb_core::errors::classify::NetClass where U: core::convert::From<T>
pub fn sb_core::errors::classify::NetClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::errors::classify::NetClass where U: core::convert::Into<T>
pub type sb_core::errors::classify::NetClass::Error = core::convert::Infallible
pub fn sb_core::errors::classify::NetClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::errors::classify::NetClass where U: core::convert::TryFrom<T>
pub type sb_core::errors::classify::NetClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::errors::classify::NetClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::errors::classify::NetClass where T: core::clone::Clone
pub type sb_core::errors::classify::NetClass::Owned = T
pub fn sb_core::errors::classify::NetClass::clone_into(&self, target: &mut T)
pub fn sb_core::errors::classify::NetClass::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::errors::classify::NetClass where T: 'static + ?core::marker::Sized
pub fn sb_core::errors::classify::NetClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::errors::classify::NetClass where T: ?core::marker::Sized
pub fn sb_core::errors::classify::NetClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::errors::classify::NetClass where T: ?core::marker::Sized
pub fn sb_core::errors::classify::NetClass::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::errors::classify::NetClass where T: core::clone::Clone
pub unsafe fn sb_core::errors::classify::NetClass::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::errors::classify::NetClass
pub fn sb_core::errors::classify::NetClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::errors::classify::NetClass
impl<T> tracing::instrument::WithSubscriber for sb_core::errors::classify::NetClass
impl<T> typenum::type_operators::Same for sb_core::errors::classify::NetClass
pub type sb_core::errors::classify::NetClass::Output = T
pub fn sb_core::errors::classify::classify_io(e: &std::io::error::Error) -> sb_core::errors::classify::NetClass
pub fn sb_core::errors::classify::classify_tls(err: &rustls::error::Error) -> sb_core::errors::classify::NetClass
pub mod sb_core::geoip
pub mod sb_core::geoip::mmdb
pub struct sb_core::geoip::mmdb::GeoIp
impl sb_core::geoip::mmdb::GeoIp
pub fn sb_core::geoip::mmdb::GeoIp::is_country(&self, ip: core::net::ip_addr::IpAddr, country_code: &str) -> bool
pub fn sb_core::geoip::mmdb::GeoIp::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<sb_core::geoip::GeoInfo>
pub fn sb_core::geoip::mmdb::GeoIp::new() -> anyhow::Result<Self>
pub fn sb_core::geoip::mmdb::GeoIp::open(path: &std::path::Path, cache_capacity: usize, _ttl: core::time::Duration) -> anyhow::Result<Self>
impl !core::marker::Freeze for sb_core::geoip::mmdb::GeoIp
impl core::marker::Send for sb_core::geoip::mmdb::GeoIp
impl core::marker::Sync for sb_core::geoip::mmdb::GeoIp
impl core::marker::Unpin for sb_core::geoip::mmdb::GeoIp
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::mmdb::GeoIp
impl core::panic::unwind_safe::UnwindSafe for sb_core::geoip::mmdb::GeoIp
impl<T, U> core::convert::Into<U> for sb_core::geoip::mmdb::GeoIp where U: core::convert::From<T>
pub fn sb_core::geoip::mmdb::GeoIp::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::mmdb::GeoIp where U: core::convert::Into<T>
pub type sb_core::geoip::mmdb::GeoIp::Error = core::convert::Infallible
pub fn sb_core::geoip::mmdb::GeoIp::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::mmdb::GeoIp where U: core::convert::TryFrom<T>
pub type sb_core::geoip::mmdb::GeoIp::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::mmdb::GeoIp::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::geoip::mmdb::GeoIp where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::mmdb::GeoIp::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::mmdb::GeoIp where T: ?core::marker::Sized
pub fn sb_core::geoip::mmdb::GeoIp::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::mmdb::GeoIp where T: ?core::marker::Sized
pub fn sb_core::geoip::mmdb::GeoIp::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::geoip::mmdb::GeoIp
pub fn sb_core::geoip::mmdb::GeoIp::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::mmdb::GeoIp
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::mmdb::GeoIp
impl<T> typenum::type_operators::Same for sb_core::geoip::mmdb::GeoIp
pub type sb_core::geoip::mmdb::GeoIp::Output = T
pub struct sb_core::geoip::mmdb::MmdbProvider
impl sb_core::geoip::mmdb::MmdbProvider
pub fn sb_core::geoip::mmdb::MmdbProvider::from_paths(country_path: core::option::Option<&std::path::Path>, city_path: core::option::Option<&std::path::Path>, asn_path: core::option::Option<&std::path::Path>) -> anyhow::Result<Self>
pub fn sb_core::geoip::mmdb::MmdbProvider::new() -> anyhow::Result<Self>
impl sb_core::geoip::GeoIpProvider for sb_core::geoip::mmdb::MmdbProvider
pub fn sb_core::geoip::mmdb::MmdbProvider::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<sb_core::geoip::GeoInfo>
impl !core::marker::Freeze for sb_core::geoip::mmdb::MmdbProvider
impl core::marker::Send for sb_core::geoip::mmdb::MmdbProvider
impl core::marker::Sync for sb_core::geoip::mmdb::MmdbProvider
impl core::marker::Unpin for sb_core::geoip::mmdb::MmdbProvider
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::mmdb::MmdbProvider
impl core::panic::unwind_safe::UnwindSafe for sb_core::geoip::mmdb::MmdbProvider
impl<T, U> core::convert::Into<U> for sb_core::geoip::mmdb::MmdbProvider where U: core::convert::From<T>
pub fn sb_core::geoip::mmdb::MmdbProvider::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::mmdb::MmdbProvider where U: core::convert::Into<T>
pub type sb_core::geoip::mmdb::MmdbProvider::Error = core::convert::Infallible
pub fn sb_core::geoip::mmdb::MmdbProvider::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::mmdb::MmdbProvider where U: core::convert::TryFrom<T>
pub type sb_core::geoip::mmdb::MmdbProvider::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::mmdb::MmdbProvider::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::geoip::mmdb::MmdbProvider where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::mmdb::MmdbProvider::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::mmdb::MmdbProvider where T: ?core::marker::Sized
pub fn sb_core::geoip::mmdb::MmdbProvider::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::mmdb::MmdbProvider where T: ?core::marker::Sized
pub fn sb_core::geoip::mmdb::MmdbProvider::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::geoip::mmdb::MmdbProvider
pub fn sb_core::geoip::mmdb::MmdbProvider::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::mmdb::MmdbProvider
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::mmdb::MmdbProvider
impl<T> typenum::type_operators::Same for sb_core::geoip::mmdb::MmdbProvider
pub type sb_core::geoip::mmdb::MmdbProvider::Output = T
pub struct sb_core::geoip::mmdb::MmdbReader
impl sb_core::geoip::mmdb::MmdbReader
pub fn sb_core::geoip::mmdb::MmdbReader::from_paths(country_path: core::option::Option<&std::path::Path>, city_path: core::option::Option<&std::path::Path>, asn_path: core::option::Option<&std::path::Path>) -> anyhow::Result<Self>
pub fn sb_core::geoip::mmdb::MmdbReader::new() -> anyhow::Result<Self>
impl core::marker::Freeze for sb_core::geoip::mmdb::MmdbReader
impl core::marker::Send for sb_core::geoip::mmdb::MmdbReader
impl core::marker::Sync for sb_core::geoip::mmdb::MmdbReader
impl core::marker::Unpin for sb_core::geoip::mmdb::MmdbReader
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::mmdb::MmdbReader
impl core::panic::unwind_safe::UnwindSafe for sb_core::geoip::mmdb::MmdbReader
impl<T, U> core::convert::Into<U> for sb_core::geoip::mmdb::MmdbReader where U: core::convert::From<T>
pub fn sb_core::geoip::mmdb::MmdbReader::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::mmdb::MmdbReader where U: core::convert::Into<T>
pub type sb_core::geoip::mmdb::MmdbReader::Error = core::convert::Infallible
pub fn sb_core::geoip::mmdb::MmdbReader::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::mmdb::MmdbReader where U: core::convert::TryFrom<T>
pub type sb_core::geoip::mmdb::MmdbReader::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::mmdb::MmdbReader::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::geoip::mmdb::MmdbReader where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::mmdb::MmdbReader::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::mmdb::MmdbReader where T: ?core::marker::Sized
pub fn sb_core::geoip::mmdb::MmdbReader::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::mmdb::MmdbReader where T: ?core::marker::Sized
pub fn sb_core::geoip::mmdb::MmdbReader::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::geoip::mmdb::MmdbReader
pub fn sb_core::geoip::mmdb::MmdbReader::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::mmdb::MmdbReader
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::mmdb::MmdbReader
impl<T> typenum::type_operators::Same for sb_core::geoip::mmdb::MmdbReader
pub type sb_core::geoip::mmdb::MmdbReader::Output = T
pub mod sb_core::geoip::multi
pub enum sb_core::geoip::multi::LookupStrategy
pub sb_core::geoip::multi::LookupStrategy::Aggregate
pub sb_core::geoip::multi::LookupStrategy::Fastest
pub sb_core::geoip::multi::LookupStrategy::FirstSuccess
pub sb_core::geoip::multi::LookupStrategy::Priority
impl core::clone::Clone for sb_core::geoip::multi::LookupStrategy
pub fn sb_core::geoip::multi::LookupStrategy::clone(&self) -> sb_core::geoip::multi::LookupStrategy
impl core::fmt::Debug for sb_core::geoip::multi::LookupStrategy
pub fn sb_core::geoip::multi::LookupStrategy::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::geoip::multi::LookupStrategy
impl core::marker::Send for sb_core::geoip::multi::LookupStrategy
impl core::marker::Sync for sb_core::geoip::multi::LookupStrategy
impl core::marker::Unpin for sb_core::geoip::multi::LookupStrategy
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::multi::LookupStrategy
impl core::panic::unwind_safe::UnwindSafe for sb_core::geoip::multi::LookupStrategy
impl<T, U> core::convert::Into<U> for sb_core::geoip::multi::LookupStrategy where U: core::convert::From<T>
pub fn sb_core::geoip::multi::LookupStrategy::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::multi::LookupStrategy where U: core::convert::Into<T>
pub type sb_core::geoip::multi::LookupStrategy::Error = core::convert::Infallible
pub fn sb_core::geoip::multi::LookupStrategy::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::multi::LookupStrategy where U: core::convert::TryFrom<T>
pub type sb_core::geoip::multi::LookupStrategy::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::multi::LookupStrategy::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::geoip::multi::LookupStrategy where T: core::clone::Clone
pub type sb_core::geoip::multi::LookupStrategy::Owned = T
pub fn sb_core::geoip::multi::LookupStrategy::clone_into(&self, target: &mut T)
pub fn sb_core::geoip::multi::LookupStrategy::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::geoip::multi::LookupStrategy where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::multi::LookupStrategy::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::multi::LookupStrategy where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::LookupStrategy::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::multi::LookupStrategy where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::LookupStrategy::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::geoip::multi::LookupStrategy where T: core::clone::Clone
pub unsafe fn sb_core::geoip::multi::LookupStrategy::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::geoip::multi::LookupStrategy
pub fn sb_core::geoip::multi::LookupStrategy::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::multi::LookupStrategy
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::multi::LookupStrategy
impl<T> typenum::type_operators::Same for sb_core::geoip::multi::LookupStrategy
pub type sb_core::geoip::multi::LookupStrategy::Output = T
pub struct sb_core::geoip::multi::GeoMux
impl sb_core::geoip::multi::GeoMux
pub fn sb_core::geoip::multi::GeoMux::add_provider(&mut self, provider: alloc::sync::Arc<dyn sb_core::geoip::GeoIpProvider>, name: alloc::string::String, priority: u8, timeout: core::time::Duration)
pub fn sb_core::geoip::multi::GeoMux::from_env() -> anyhow::Result<Self>
pub fn sb_core::geoip::multi::GeoMux::get_provider_stats(&self) -> alloc::vec::Vec<sb_core::geoip::multi::ProviderStats>
pub fn sb_core::geoip::multi::GeoMux::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<(alloc::string::String, alloc::string::String)>
pub fn sb_core::geoip::multi::GeoMux::new(strategy: sb_core::geoip::multi::LookupStrategy) -> Self
pub fn sb_core::geoip::multi::GeoMux::remove_provider(&mut self, name: &str)
pub fn sb_core::geoip::multi::GeoMux::set_provider_enabled(&self, name: &str, enabled: bool)
impl sb_core::geoip::GeoIpProvider for sb_core::geoip::multi::GeoMux
pub fn sb_core::geoip::multi::GeoMux::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<sb_core::geoip::GeoInfo>
impl !core::marker::Freeze for sb_core::geoip::multi::GeoMux
impl core::marker::Send for sb_core::geoip::multi::GeoMux
impl core::marker::Sync for sb_core::geoip::multi::GeoMux
impl core::marker::Unpin for sb_core::geoip::multi::GeoMux
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::multi::GeoMux
impl !core::panic::unwind_safe::UnwindSafe for sb_core::geoip::multi::GeoMux
impl<T, U> core::convert::Into<U> for sb_core::geoip::multi::GeoMux where U: core::convert::From<T>
pub fn sb_core::geoip::multi::GeoMux::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::multi::GeoMux where U: core::convert::Into<T>
pub type sb_core::geoip::multi::GeoMux::Error = core::convert::Infallible
pub fn sb_core::geoip::multi::GeoMux::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::multi::GeoMux where U: core::convert::TryFrom<T>
pub type sb_core::geoip::multi::GeoMux::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::multi::GeoMux::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::geoip::multi::GeoMux where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::multi::GeoMux::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::multi::GeoMux where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::GeoMux::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::multi::GeoMux where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::GeoMux::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::geoip::multi::GeoMux
pub fn sb_core::geoip::multi::GeoMux::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::multi::GeoMux
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::multi::GeoMux
impl<T> typenum::type_operators::Same for sb_core::geoip::multi::GeoMux
pub type sb_core::geoip::multi::GeoMux::Output = T
pub struct sb_core::geoip::multi::GeoMuxBuilder
impl sb_core::geoip::multi::GeoMuxBuilder
pub fn sb_core::geoip::multi::GeoMuxBuilder::add_provider(self, provider: alloc::sync::Arc<dyn sb_core::geoip::GeoIpProvider>, name: alloc::string::String, priority: u8, timeout: core::time::Duration) -> Self
pub fn sb_core::geoip::multi::GeoMuxBuilder::build(self) -> sb_core::geoip::multi::GeoMux
pub fn sb_core::geoip::multi::GeoMuxBuilder::new(strategy: sb_core::geoip::multi::LookupStrategy) -> Self
impl core::marker::Freeze for sb_core::geoip::multi::GeoMuxBuilder
impl core::marker::Send for sb_core::geoip::multi::GeoMuxBuilder
impl core::marker::Sync for sb_core::geoip::multi::GeoMuxBuilder
impl core::marker::Unpin for sb_core::geoip::multi::GeoMuxBuilder
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::multi::GeoMuxBuilder
impl !core::panic::unwind_safe::UnwindSafe for sb_core::geoip::multi::GeoMuxBuilder
impl<T, U> core::convert::Into<U> for sb_core::geoip::multi::GeoMuxBuilder where U: core::convert::From<T>
pub fn sb_core::geoip::multi::GeoMuxBuilder::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::multi::GeoMuxBuilder where U: core::convert::Into<T>
pub type sb_core::geoip::multi::GeoMuxBuilder::Error = core::convert::Infallible
pub fn sb_core::geoip::multi::GeoMuxBuilder::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::multi::GeoMuxBuilder where U: core::convert::TryFrom<T>
pub type sb_core::geoip::multi::GeoMuxBuilder::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::multi::GeoMuxBuilder::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::geoip::multi::GeoMuxBuilder where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::multi::GeoMuxBuilder::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::multi::GeoMuxBuilder where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::GeoMuxBuilder::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::multi::GeoMuxBuilder where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::GeoMuxBuilder::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::geoip::multi::GeoMuxBuilder
pub fn sb_core::geoip::multi::GeoMuxBuilder::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::multi::GeoMuxBuilder
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::multi::GeoMuxBuilder
impl<T> typenum::type_operators::Same for sb_core::geoip::multi::GeoMuxBuilder
pub type sb_core::geoip::multi::GeoMuxBuilder::Output = T
pub struct sb_core::geoip::multi::ProviderStats
pub sb_core::geoip::multi::ProviderStats::enabled: bool
pub sb_core::geoip::multi::ProviderStats::failure_count: u64
pub sb_core::geoip::multi::ProviderStats::last_success: core::option::Option<std::time::Instant>
pub sb_core::geoip::multi::ProviderStats::name: alloc::string::String
pub sb_core::geoip::multi::ProviderStats::priority: u8
impl core::clone::Clone for sb_core::geoip::multi::ProviderStats
pub fn sb_core::geoip::multi::ProviderStats::clone(&self) -> sb_core::geoip::multi::ProviderStats
impl core::fmt::Debug for sb_core::geoip::multi::ProviderStats
pub fn sb_core::geoip::multi::ProviderStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::geoip::multi::ProviderStats
impl core::marker::Send for sb_core::geoip::multi::ProviderStats
impl core::marker::Sync for sb_core::geoip::multi::ProviderStats
impl core::marker::Unpin for sb_core::geoip::multi::ProviderStats
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::multi::ProviderStats
impl core::panic::unwind_safe::UnwindSafe for sb_core::geoip::multi::ProviderStats
impl<T, U> core::convert::Into<U> for sb_core::geoip::multi::ProviderStats where U: core::convert::From<T>
pub fn sb_core::geoip::multi::ProviderStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::multi::ProviderStats where U: core::convert::Into<T>
pub type sb_core::geoip::multi::ProviderStats::Error = core::convert::Infallible
pub fn sb_core::geoip::multi::ProviderStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::multi::ProviderStats where U: core::convert::TryFrom<T>
pub type sb_core::geoip::multi::ProviderStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::multi::ProviderStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::geoip::multi::ProviderStats where T: core::clone::Clone
pub type sb_core::geoip::multi::ProviderStats::Owned = T
pub fn sb_core::geoip::multi::ProviderStats::clone_into(&self, target: &mut T)
pub fn sb_core::geoip::multi::ProviderStats::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::geoip::multi::ProviderStats where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::multi::ProviderStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::multi::ProviderStats where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::ProviderStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::multi::ProviderStats where T: ?core::marker::Sized
pub fn sb_core::geoip::multi::ProviderStats::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::geoip::multi::ProviderStats where T: core::clone::Clone
pub unsafe fn sb_core::geoip::multi::ProviderStats::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::geoip::multi::ProviderStats
pub fn sb_core::geoip::multi::ProviderStats::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::multi::ProviderStats
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::multi::ProviderStats
impl<T> typenum::type_operators::Same for sb_core::geoip::multi::ProviderStats
pub type sb_core::geoip::multi::ProviderStats::Output = T
pub struct sb_core::geoip::GeoInfo
pub sb_core::geoip::GeoInfo::asn: core::option::Option<u32>
pub sb_core::geoip::GeoInfo::city: core::option::Option<alloc::string::String>
pub sb_core::geoip::GeoInfo::continent_code: core::option::Option<alloc::string::String>
pub sb_core::geoip::GeoInfo::country_code: core::option::Option<alloc::string::String>
pub sb_core::geoip::GeoInfo::country_name: core::option::Option<alloc::string::String>
pub sb_core::geoip::GeoInfo::organization: core::option::Option<alloc::string::String>
pub sb_core::geoip::GeoInfo::region: core::option::Option<alloc::string::String>
impl core::clone::Clone for sb_core::geoip::GeoInfo
pub fn sb_core::geoip::GeoInfo::clone(&self) -> sb_core::geoip::GeoInfo
impl core::fmt::Debug for sb_core::geoip::GeoInfo
pub fn sb_core::geoip::GeoInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::geoip::GeoInfo
impl core::marker::Send for sb_core::geoip::GeoInfo
impl core::marker::Sync for sb_core::geoip::GeoInfo
impl core::marker::Unpin for sb_core::geoip::GeoInfo
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::GeoInfo
impl core::panic::unwind_safe::UnwindSafe for sb_core::geoip::GeoInfo
impl<T, U> core::convert::Into<U> for sb_core::geoip::GeoInfo where U: core::convert::From<T>
pub fn sb_core::geoip::GeoInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::GeoInfo where U: core::convert::Into<T>
pub type sb_core::geoip::GeoInfo::Error = core::convert::Infallible
pub fn sb_core::geoip::GeoInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::GeoInfo where U: core::convert::TryFrom<T>
pub type sb_core::geoip::GeoInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::GeoInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::geoip::GeoInfo where T: core::clone::Clone
pub type sb_core::geoip::GeoInfo::Owned = T
pub fn sb_core::geoip::GeoInfo::clone_into(&self, target: &mut T)
pub fn sb_core::geoip::GeoInfo::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::geoip::GeoInfo where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::GeoInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::GeoInfo where T: ?core::marker::Sized
pub fn sb_core::geoip::GeoInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::GeoInfo where T: ?core::marker::Sized
pub fn sb_core::geoip::GeoInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::geoip::GeoInfo where T: core::clone::Clone
pub unsafe fn sb_core::geoip::GeoInfo::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::geoip::GeoInfo
pub fn sb_core::geoip::GeoInfo::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::GeoInfo
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::GeoInfo
impl<T> typenum::type_operators::Same for sb_core::geoip::GeoInfo
pub type sb_core::geoip::GeoInfo::Output = T
pub struct sb_core::geoip::GeoIpService
impl sb_core::geoip::GeoIpService
pub fn sb_core::geoip::GeoIpService::get_asn(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<u32>
pub fn sb_core::geoip::GeoIpService::is_continent(&self, ip: core::net::ip_addr::IpAddr, continent_code: &str) -> bool
pub fn sb_core::geoip::GeoIpService::is_country(&self, ip: core::net::ip_addr::IpAddr, country_code: &str) -> bool
pub fn sb_core::geoip::GeoIpService::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<sb_core::geoip::GeoInfo>
pub fn sb_core::geoip::GeoIpService::new(provider: alloc::boxed::Box<dyn sb_core::geoip::GeoIpProvider>) -> Self
impl core::marker::Freeze for sb_core::geoip::GeoIpService
impl core::marker::Send for sb_core::geoip::GeoIpService
impl core::marker::Sync for sb_core::geoip::GeoIpService
impl core::marker::Unpin for sb_core::geoip::GeoIpService
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::geoip::GeoIpService
impl !core::panic::unwind_safe::UnwindSafe for sb_core::geoip::GeoIpService
impl<T, U> core::convert::Into<U> for sb_core::geoip::GeoIpService where U: core::convert::From<T>
pub fn sb_core::geoip::GeoIpService::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::geoip::GeoIpService where U: core::convert::Into<T>
pub type sb_core::geoip::GeoIpService::Error = core::convert::Infallible
pub fn sb_core::geoip::GeoIpService::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::geoip::GeoIpService where U: core::convert::TryFrom<T>
pub type sb_core::geoip::GeoIpService::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::geoip::GeoIpService::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::geoip::GeoIpService where T: 'static + ?core::marker::Sized
pub fn sb_core::geoip::GeoIpService::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::geoip::GeoIpService where T: ?core::marker::Sized
pub fn sb_core::geoip::GeoIpService::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::geoip::GeoIpService where T: ?core::marker::Sized
pub fn sb_core::geoip::GeoIpService::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::geoip::GeoIpService
pub fn sb_core::geoip::GeoIpService::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::geoip::GeoIpService
impl<T> tracing::instrument::WithSubscriber for sb_core::geoip::GeoIpService
impl<T> typenum::type_operators::Same for sb_core::geoip::GeoIpService
pub type sb_core::geoip::GeoIpService::Output = T
pub trait sb_core::geoip::GeoIpProvider: core::marker::Send + core::marker::Sync
pub fn sb_core::geoip::GeoIpProvider::get_asn(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<u32>
pub fn sb_core::geoip::GeoIpProvider::is_continent(&self, ip: core::net::ip_addr::IpAddr, continent_code: &str) -> bool
pub fn sb_core::geoip::GeoIpProvider::is_country(&self, ip: core::net::ip_addr::IpAddr, country_code: &str) -> bool
pub fn sb_core::geoip::GeoIpProvider::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<sb_core::geoip::GeoInfo>
impl sb_core::geoip::GeoIpProvider for sb_core::geoip::mmdb::MmdbProvider
pub fn sb_core::geoip::mmdb::MmdbProvider::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<sb_core::geoip::GeoInfo>
impl sb_core::geoip::GeoIpProvider for sb_core::geoip::multi::GeoMux
pub fn sb_core::geoip::multi::GeoMux::lookup(&self, ip: core::net::ip_addr::IpAddr) -> core::option::Option<sb_core::geoip::GeoInfo>
pub fn sb_core::geoip::init() -> anyhow::Result<()>
pub fn sb_core::geoip::lookup_with_metrics(ip: core::net::ip_addr::IpAddr, country_code: &str) -> bool
pub fn sb_core::geoip::lookup_with_metrics_decision(ip: core::net::ip_addr::IpAddr) -> core::option::Option<&'static str>
pub fn sb_core::geoip::service() -> core::option::Option<&'static sb_core::geoip::GeoIpService>
pub mod sb_core::health
pub fn sb_core::health::spawn_health_task(bridge: alloc::sync::Arc<sb_core::Bridge>) -> std::thread::JoinHandle<()>
pub mod sb_core::http
pub mod sb_core::http::admin
pub fn sb_core::http::admin::spawn_admin(listen: &str, _engine: (), bridge: alloc::sync::Arc<sb_core::Bridge>, admin_token: core::option::Option<alloc::string::String>, supervisor: core::option::Option<alloc::sync::Arc<sb_core::runtime::supervisor::Supervisor>>, rt_handle: core::option::Option<tokio::runtime::handle::Handle>) -> std::io::error::Result<std::thread::JoinHandle<()>>
pub mod sb_core::http::metrics
pub enum sb_core::http::metrics::HttpErrorClass
pub sb_core::http::metrics::HttpErrorClass::AuthFailed
pub sb_core::http::metrics::HttpErrorClass::BadRequest
pub sb_core::http::metrics::HttpErrorClass::ConnectTimeout
pub sb_core::http::metrics::HttpErrorClass::ConnectionReset
pub sb_core::http::metrics::HttpErrorClass::Other
pub sb_core::http::metrics::HttpErrorClass::ParseError
pub sb_core::http::metrics::HttpErrorClass::ReadTimeout
pub sb_core::http::metrics::HttpErrorClass::WriteTimeout
impl sb_core::metrics::http::HttpErrorClass
pub fn sb_core::metrics::http::HttpErrorClass::as_str(&self) -> &'static str
impl core::marker::Freeze for sb_core::metrics::http::HttpErrorClass
impl core::marker::Send for sb_core::metrics::http::HttpErrorClass
impl core::marker::Sync for sb_core::metrics::http::HttpErrorClass
impl core::marker::Unpin for sb_core::metrics::http::HttpErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::http::HttpErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::http::HttpErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::http::HttpErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::http::HttpErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::http::HttpErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::http::HttpErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::http::HttpErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::http::HttpErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::http::HttpErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::http::HttpErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::http::HttpErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::http::HttpErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::http::HttpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::http::HttpErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::http::HttpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::http::HttpErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::http::HttpErrorClass
pub fn sb_core::metrics::http::HttpErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::http::HttpErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::http::HttpErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::http::HttpErrorClass
pub type sb_core::metrics::http::HttpErrorClass::Output = T
pub fn sb_core::http::metrics::dec_active_connections()
pub fn sb_core::http::metrics::inc_405_responses()
pub fn sb_core::http::metrics::inc_active_connections()
pub fn sb_core::http::metrics::inc_errors(_class: &str)
pub fn sb_core::http::metrics::inc_requests(_method: &str, _status: u16)
pub fn sb_core::http::metrics::record_connect_duration(_duration_ms: f64)
pub fn sb_core::http::metrics::record_error(error_class: sb_core::metrics::http::HttpErrorClass)
pub fn sb_core::http::metrics::register_metrics()
pub fn sb_core::http::metrics::set_active_connections(_count: usize)
pub mod sb_core::inbound
pub mod sb_core::log
pub enum sb_core::log::Level
pub sb_core::log::Level::Debug
pub sb_core::log::Level::Error
pub sb_core::log::Level::Info
pub sb_core::log::Level::Trace
pub sb_core::log::Level::Warn
impl core::clone::Clone for sb_core::log::Level
pub fn sb_core::log::Level::clone(&self) -> sb_core::log::Level
impl core::marker::Copy for sb_core::log::Level
impl core::marker::Freeze for sb_core::log::Level
impl core::marker::Send for sb_core::log::Level
impl core::marker::Sync for sb_core::log::Level
impl core::marker::Unpin for sb_core::log::Level
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::log::Level
impl core::panic::unwind_safe::UnwindSafe for sb_core::log::Level
impl<T, U> core::convert::Into<U> for sb_core::log::Level where U: core::convert::From<T>
pub fn sb_core::log::Level::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::log::Level where U: core::convert::Into<T>
pub type sb_core::log::Level::Error = core::convert::Infallible
pub fn sb_core::log::Level::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::log::Level where U: core::convert::TryFrom<T>
pub type sb_core::log::Level::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::log::Level::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::log::Level where T: core::clone::Clone
pub type sb_core::log::Level::Owned = T
pub fn sb_core::log::Level::clone_into(&self, target: &mut T)
pub fn sb_core::log::Level::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::log::Level where T: 'static + ?core::marker::Sized
pub fn sb_core::log::Level::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::log::Level where T: ?core::marker::Sized
pub fn sb_core::log::Level::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::log::Level where T: ?core::marker::Sized
pub fn sb_core::log::Level::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::log::Level where T: core::clone::Clone
pub unsafe fn sb_core::log::Level::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::log::Level
pub fn sb_core::log::Level::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::log::Level
impl<T> tracing::instrument::WithSubscriber for sb_core::log::Level
impl<T> typenum::type_operators::Same for sb_core::log::Level
pub type sb_core::log::Level::Output = T
pub fn sb_core::log::init(target: &str)
pub fn sb_core::log::log(level: sb_core::log::Level, msg: &str, kv: &[(&str, &str)])
pub mod sb_core::metrics
pub mod sb_core::metrics::dns
pub enum sb_core::metrics::dns::DnsErrorClass
pub sb_core::metrics::dns::DnsErrorClass::NameError
pub sb_core::metrics::dns::DnsErrorClass::NetworkError
pub sb_core::metrics::dns::DnsErrorClass::Other
pub sb_core::metrics::dns::DnsErrorClass::Timeout
impl sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::as_str(&self) -> &'static str
pub fn sb_core::metrics::dns::DnsErrorClass::from_error_str(s: &str) -> Self
impl core::clone::Clone for sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::clone(&self) -> sb_core::metrics::dns::DnsErrorClass
impl core::fmt::Debug for sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Freeze for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Send for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Sync for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Unpin for sb_core::metrics::dns::DnsErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::dns::DnsErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::dns::DnsErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::dns::DnsErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::dns::DnsErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::dns::DnsErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::dns::DnsErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::dns::DnsErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::dns::DnsErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::dns::DnsErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::dns::DnsErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::dns::DnsErrorClass where T: core::clone::Clone
pub type sb_core::metrics::dns::DnsErrorClass::Owned = T
pub fn sb_core::metrics::dns::DnsErrorClass::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::dns::DnsErrorClass::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::dns::DnsErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::dns::DnsErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::dns::DnsErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::dns::DnsErrorClass where T: core::clone::Clone
pub unsafe fn sb_core::metrics::dns::DnsErrorClass::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::dns::DnsErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::dns::DnsErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::dns::DnsErrorClass
pub type sb_core::metrics::dns::DnsErrorClass::Output = T
pub enum sb_core::metrics::dns::DnsQueryType
pub sb_core::metrics::dns::DnsQueryType::A
pub sb_core::metrics::dns::DnsQueryType::AAAA
pub sb_core::metrics::dns::DnsQueryType::Other
impl sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::as_str(&self) -> &'static str
pub fn sb_core::metrics::dns::DnsQueryType::from_u16(v: u16) -> Self
impl core::clone::Clone for sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::clone(&self) -> sb_core::metrics::dns::DnsQueryType
impl core::fmt::Debug for sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::dns::DnsQueryType
impl core::marker::Freeze for sb_core::metrics::dns::DnsQueryType
impl core::marker::Send for sb_core::metrics::dns::DnsQueryType
impl core::marker::Sync for sb_core::metrics::dns::DnsQueryType
impl core::marker::Unpin for sb_core::metrics::dns::DnsQueryType
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::dns::DnsQueryType
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::dns::DnsQueryType
impl<T, U> core::convert::Into<U> for sb_core::metrics::dns::DnsQueryType where U: core::convert::From<T>
pub fn sb_core::metrics::dns::DnsQueryType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::dns::DnsQueryType where U: core::convert::Into<T>
pub type sb_core::metrics::dns::DnsQueryType::Error = core::convert::Infallible
pub fn sb_core::metrics::dns::DnsQueryType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::dns::DnsQueryType where U: core::convert::TryFrom<T>
pub type sb_core::metrics::dns::DnsQueryType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::dns::DnsQueryType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::dns::DnsQueryType where T: core::clone::Clone
pub type sb_core::metrics::dns::DnsQueryType::Owned = T
pub fn sb_core::metrics::dns::DnsQueryType::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::dns::DnsQueryType::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::dns::DnsQueryType where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsQueryType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::dns::DnsQueryType where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsQueryType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::dns::DnsQueryType where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsQueryType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::dns::DnsQueryType where T: core::clone::Clone
pub unsafe fn sb_core::metrics::dns::DnsQueryType::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::dns::DnsQueryType
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::dns::DnsQueryType
impl<T> typenum::type_operators::Same for sb_core::metrics::dns::DnsQueryType
pub type sb_core::metrics::dns::DnsQueryType::Output = T
pub struct sb_core::metrics::dns::DnsCacheMetrics
impl core::marker::Freeze for sb_core::metrics::dns::DnsCacheMetrics
impl core::marker::Send for sb_core::metrics::dns::DnsCacheMetrics
impl core::marker::Sync for sb_core::metrics::dns::DnsCacheMetrics
impl core::marker::Unpin for sb_core::metrics::dns::DnsCacheMetrics
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::dns::DnsCacheMetrics
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::dns::DnsCacheMetrics
impl<T, U> core::convert::Into<U> for sb_core::metrics::dns::DnsCacheMetrics where U: core::convert::From<T>
pub fn sb_core::metrics::dns::DnsCacheMetrics::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::dns::DnsCacheMetrics where U: core::convert::Into<T>
pub type sb_core::metrics::dns::DnsCacheMetrics::Error = core::convert::Infallible
pub fn sb_core::metrics::dns::DnsCacheMetrics::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::dns::DnsCacheMetrics where U: core::convert::TryFrom<T>
pub type sb_core::metrics::dns::DnsCacheMetrics::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::dns::DnsCacheMetrics::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::dns::DnsCacheMetrics where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsCacheMetrics::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::dns::DnsCacheMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsCacheMetrics::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::dns::DnsCacheMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsCacheMetrics::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::dns::DnsCacheMetrics
pub fn sb_core::metrics::dns::DnsCacheMetrics::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::dns::DnsCacheMetrics
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::dns::DnsCacheMetrics
impl<T> typenum::type_operators::Same for sb_core::metrics::dns::DnsCacheMetrics
pub type sb_core::metrics::dns::DnsCacheMetrics::Output = T
pub fn sb_core::metrics::dns::record_cache_hit()
pub fn sb_core::metrics::dns::record_cache_miss()
pub fn sb_core::metrics::dns::record_error(_c: sb_core::metrics::dns::DnsErrorClass)
pub fn sb_core::metrics::dns::record_failed_query(_q: sb_core::metrics::dns::DnsQueryType, _class: sb_core::metrics::dns::DnsErrorClass)
pub fn sb_core::metrics::dns::record_query(_q: sb_core::metrics::dns::DnsQueryType)
pub fn sb_core::metrics::dns::record_rtt(_rtt_ms: f64)
pub fn sb_core::metrics::dns::record_successful_query(_q: sb_core::metrics::dns::DnsQueryType, _rtt_ms: f64, _from_cache: bool)
pub fn sb_core::metrics::dns::register_dns_cache_metrics() -> sb_core::metrics::dns::DnsCacheMetrics
pub fn sb_core::metrics::dns::register_metrics()
pub fn sb_core::metrics::dns::set_cache_size(_size: usize)
pub mod sb_core::metrics::dns_v2
pub struct sb_core::metrics::dns_v2::DnsCacheMetrics
impl core::marker::Freeze for sb_core::metrics::dns_v2::DnsCacheMetrics
impl core::marker::Send for sb_core::metrics::dns_v2::DnsCacheMetrics
impl core::marker::Sync for sb_core::metrics::dns_v2::DnsCacheMetrics
impl core::marker::Unpin for sb_core::metrics::dns_v2::DnsCacheMetrics
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::dns_v2::DnsCacheMetrics
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::dns_v2::DnsCacheMetrics
impl<T, U> core::convert::Into<U> for sb_core::metrics::dns_v2::DnsCacheMetrics where U: core::convert::From<T>
pub fn sb_core::metrics::dns_v2::DnsCacheMetrics::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::dns_v2::DnsCacheMetrics where U: core::convert::Into<T>
pub type sb_core::metrics::dns_v2::DnsCacheMetrics::Error = core::convert::Infallible
pub fn sb_core::metrics::dns_v2::DnsCacheMetrics::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::dns_v2::DnsCacheMetrics where U: core::convert::TryFrom<T>
pub type sb_core::metrics::dns_v2::DnsCacheMetrics::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::dns_v2::DnsCacheMetrics::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::dns_v2::DnsCacheMetrics where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::dns_v2::DnsCacheMetrics::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::dns_v2::DnsCacheMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::dns_v2::DnsCacheMetrics::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::dns_v2::DnsCacheMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::dns_v2::DnsCacheMetrics::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::dns_v2::DnsCacheMetrics
pub fn sb_core::metrics::dns_v2::DnsCacheMetrics::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::dns_v2::DnsCacheMetrics
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::dns_v2::DnsCacheMetrics
impl<T> typenum::type_operators::Same for sb_core::metrics::dns_v2::DnsCacheMetrics
pub type sb_core::metrics::dns_v2::DnsCacheMetrics::Output = T
pub fn sb_core::metrics::dns_v2::register_dns_cache_metrics() -> sb_core::metrics::dns_v2::DnsCacheMetrics
pub mod sb_core::metrics::geoip
pub fn sb_core::metrics::geoip::geoip_cache_hit()
pub fn sb_core::metrics::geoip::geoip_cache_miss()
pub fn sb_core::metrics::geoip::geoip_cache_size(_size: usize)
pub fn sb_core::metrics::geoip::geoip_country_lookup_total(_country: &str)
pub fn sb_core::metrics::geoip::geoip_database_load_error(_db_type: &str, _error: &str)
pub fn sb_core::metrics::geoip::geoip_database_loaded(_db_type: &str, _file_size: u64)
pub fn sb_core::metrics::geoip::geoip_fastest_provider(_provider: &str, _duration: f64)
pub fn sb_core::metrics::geoip::geoip_lookup_duration(_duration: f64)
pub fn sb_core::metrics::geoip::geoip_lookup_total(_result: &str)
pub fn sb_core::metrics::geoip::geoip_provider_failure(_provider: &str, _duration: f64)
pub fn sb_core::metrics::geoip::geoip_provider_success(_provider: &str, _duration: f64)
pub fn sb_core::metrics::geoip::init_geoip_metrics()
pub mod sb_core::metrics::http
pub enum sb_core::metrics::http::HttpErrorClass
pub sb_core::metrics::http::HttpErrorClass::AuthFailed
pub sb_core::metrics::http::HttpErrorClass::BadRequest
pub sb_core::metrics::http::HttpErrorClass::ConnectTimeout
pub sb_core::metrics::http::HttpErrorClass::ConnectionReset
pub sb_core::metrics::http::HttpErrorClass::Other
pub sb_core::metrics::http::HttpErrorClass::ParseError
pub sb_core::metrics::http::HttpErrorClass::ReadTimeout
pub sb_core::metrics::http::HttpErrorClass::WriteTimeout
impl sb_core::metrics::http::HttpErrorClass
pub fn sb_core::metrics::http::HttpErrorClass::as_str(&self) -> &'static str
impl core::marker::Freeze for sb_core::metrics::http::HttpErrorClass
impl core::marker::Send for sb_core::metrics::http::HttpErrorClass
impl core::marker::Sync for sb_core::metrics::http::HttpErrorClass
impl core::marker::Unpin for sb_core::metrics::http::HttpErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::http::HttpErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::http::HttpErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::http::HttpErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::http::HttpErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::http::HttpErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::http::HttpErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::http::HttpErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::http::HttpErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::http::HttpErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::http::HttpErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::http::HttpErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::http::HttpErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::http::HttpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::http::HttpErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::http::HttpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::http::HttpErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::http::HttpErrorClass
pub fn sb_core::metrics::http::HttpErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::http::HttpErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::http::HttpErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::http::HttpErrorClass
pub type sb_core::metrics::http::HttpErrorClass::Output = T
pub fn sb_core::metrics::http::dec_active_connections()
pub fn sb_core::metrics::http::inc_405_responses()
pub fn sb_core::metrics::http::inc_active_connections()
pub fn sb_core::metrics::http::inc_errors(_class: &str)
pub fn sb_core::metrics::http::inc_requests(_method: &str, _status: u16)
pub fn sb_core::metrics::http::record_connect_duration(_duration_ms: f64)
pub fn sb_core::metrics::http::record_error(error_class: sb_core::metrics::http::HttpErrorClass)
pub fn sb_core::metrics::http::register_metrics()
pub fn sb_core::metrics::http::set_active_connections(_count: usize)
pub mod sb_core::metrics::http_exporter
pub fn sb_core::metrics::http_exporter::run_exporter(addr: &str) -> std::io::error::Result<()>
pub mod sb_core::metrics::labels
pub enum sb_core::metrics::labels::CipherType
pub sb_core::metrics::labels::CipherType::Aes128Gcm
pub sb_core::metrics::labels::CipherType::ChaCha20Poly1305
pub sb_core::metrics::labels::CipherType::None
impl sb_core::metrics::labels::CipherType
pub fn sb_core::metrics::labels::CipherType::as_str(&self) -> &'static str
impl core::clone::Clone for sb_core::metrics::labels::CipherType
pub fn sb_core::metrics::labels::CipherType::clone(&self) -> sb_core::metrics::labels::CipherType
impl core::fmt::Debug for sb_core::metrics::labels::CipherType
pub fn sb_core::metrics::labels::CipherType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::labels::CipherType
impl core::marker::Freeze for sb_core::metrics::labels::CipherType
impl core::marker::Send for sb_core::metrics::labels::CipherType
impl core::marker::Sync for sb_core::metrics::labels::CipherType
impl core::marker::Unpin for sb_core::metrics::labels::CipherType
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::labels::CipherType
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::labels::CipherType
impl<T, U> core::convert::Into<U> for sb_core::metrics::labels::CipherType where U: core::convert::From<T>
pub fn sb_core::metrics::labels::CipherType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::labels::CipherType where U: core::convert::Into<T>
pub type sb_core::metrics::labels::CipherType::Error = core::convert::Infallible
pub fn sb_core::metrics::labels::CipherType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::labels::CipherType where U: core::convert::TryFrom<T>
pub type sb_core::metrics::labels::CipherType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::labels::CipherType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::labels::CipherType where T: core::clone::Clone
pub type sb_core::metrics::labels::CipherType::Owned = T
pub fn sb_core::metrics::labels::CipherType::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::labels::CipherType::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::labels::CipherType where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::labels::CipherType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::labels::CipherType where T: ?core::marker::Sized
pub fn sb_core::metrics::labels::CipherType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::labels::CipherType where T: ?core::marker::Sized
pub fn sb_core::metrics::labels::CipherType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::labels::CipherType where T: core::clone::Clone
pub unsafe fn sb_core::metrics::labels::CipherType::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::labels::CipherType
pub fn sb_core::metrics::labels::CipherType::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::labels::CipherType
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::labels::CipherType
impl<T> typenum::type_operators::Same for sb_core::metrics::labels::CipherType
pub type sb_core::metrics::labels::CipherType::Output = T
pub enum sb_core::metrics::labels::Proto
pub sb_core::metrics::labels::Proto::Hysteria2
pub sb_core::metrics::labels::Proto::NaiveH2
pub sb_core::metrics::labels::Proto::ShadowTls
pub sb_core::metrics::labels::Proto::Shadowsocks
pub sb_core::metrics::labels::Proto::Trojan
pub sb_core::metrics::labels::Proto::Tuic
pub sb_core::metrics::labels::Proto::Vless
pub sb_core::metrics::labels::Proto::Vmess
impl sb_core::metrics::labels::Proto
pub fn sb_core::metrics::labels::Proto::as_str(&self) -> &'static str
impl core::clone::Clone for sb_core::metrics::labels::Proto
pub fn sb_core::metrics::labels::Proto::clone(&self) -> sb_core::metrics::labels::Proto
impl core::fmt::Debug for sb_core::metrics::labels::Proto
pub fn sb_core::metrics::labels::Proto::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::labels::Proto
impl core::marker::Freeze for sb_core::metrics::labels::Proto
impl core::marker::Send for sb_core::metrics::labels::Proto
impl core::marker::Sync for sb_core::metrics::labels::Proto
impl core::marker::Unpin for sb_core::metrics::labels::Proto
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::labels::Proto
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::labels::Proto
impl<T, U> core::convert::Into<U> for sb_core::metrics::labels::Proto where U: core::convert::From<T>
pub fn sb_core::metrics::labels::Proto::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::labels::Proto where U: core::convert::Into<T>
pub type sb_core::metrics::labels::Proto::Error = core::convert::Infallible
pub fn sb_core::metrics::labels::Proto::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::labels::Proto where U: core::convert::TryFrom<T>
pub type sb_core::metrics::labels::Proto::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::labels::Proto::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::labels::Proto where T: core::clone::Clone
pub type sb_core::metrics::labels::Proto::Owned = T
pub fn sb_core::metrics::labels::Proto::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::labels::Proto::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::labels::Proto where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::labels::Proto::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::labels::Proto where T: ?core::marker::Sized
pub fn sb_core::metrics::labels::Proto::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::labels::Proto where T: ?core::marker::Sized
pub fn sb_core::metrics::labels::Proto::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::labels::Proto where T: core::clone::Clone
pub unsafe fn sb_core::metrics::labels::Proto::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::labels::Proto
pub fn sb_core::metrics::labels::Proto::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::labels::Proto
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::labels::Proto
impl<T> typenum::type_operators::Same for sb_core::metrics::labels::Proto
pub type sb_core::metrics::labels::Proto::Output = T
pub enum sb_core::metrics::labels::ResultTag
pub sb_core::metrics::labels::ResultTag::AuthFail
pub sb_core::metrics::labels::ResultTag::BadTag
pub sb_core::metrics::labels::ResultTag::ConnectFail
pub sb_core::metrics::labels::ResultTag::HandshakeFail
pub sb_core::metrics::labels::ResultTag::HttpNon200
pub sb_core::metrics::labels::ResultTag::Ok
pub sb_core::metrics::labels::ResultTag::Other
pub sb_core::metrics::labels::ResultTag::ProtocolError
pub sb_core::metrics::labels::ResultTag::Timeout
pub sb_core::metrics::labels::ResultTag::TlsFail
impl sb_core::metrics::labels::ResultTag
pub fn sb_core::metrics::labels::ResultTag::as_str(&self) -> &'static str
impl core::clone::Clone for sb_core::metrics::labels::ResultTag
pub fn sb_core::metrics::labels::ResultTag::clone(&self) -> sb_core::metrics::labels::ResultTag
impl core::fmt::Debug for sb_core::metrics::labels::ResultTag
pub fn sb_core::metrics::labels::ResultTag::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::labels::ResultTag
impl core::marker::Freeze for sb_core::metrics::labels::ResultTag
impl core::marker::Send for sb_core::metrics::labels::ResultTag
impl core::marker::Sync for sb_core::metrics::labels::ResultTag
impl core::marker::Unpin for sb_core::metrics::labels::ResultTag
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::labels::ResultTag
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::labels::ResultTag
impl<T, U> core::convert::Into<U> for sb_core::metrics::labels::ResultTag where U: core::convert::From<T>
pub fn sb_core::metrics::labels::ResultTag::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::labels::ResultTag where U: core::convert::Into<T>
pub type sb_core::metrics::labels::ResultTag::Error = core::convert::Infallible
pub fn sb_core::metrics::labels::ResultTag::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::labels::ResultTag where U: core::convert::TryFrom<T>
pub type sb_core::metrics::labels::ResultTag::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::labels::ResultTag::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::labels::ResultTag where T: core::clone::Clone
pub type sb_core::metrics::labels::ResultTag::Owned = T
pub fn sb_core::metrics::labels::ResultTag::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::labels::ResultTag::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::labels::ResultTag where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::labels::ResultTag::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::labels::ResultTag where T: ?core::marker::Sized
pub fn sb_core::metrics::labels::ResultTag::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::labels::ResultTag where T: ?core::marker::Sized
pub fn sb_core::metrics::labels::ResultTag::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::labels::ResultTag where T: core::clone::Clone
pub unsafe fn sb_core::metrics::labels::ResultTag::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::labels::ResultTag
pub fn sb_core::metrics::labels::ResultTag::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::labels::ResultTag
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::labels::ResultTag
impl<T> typenum::type_operators::Same for sb_core::metrics::labels::ResultTag
pub type sb_core::metrics::labels::ResultTag::Output = T
pub fn sb_core::metrics::labels::record_connect_total(_proto: sb_core::metrics::labels::Proto, _result: sb_core::metrics::labels::ResultTag)
pub fn sb_core::metrics::labels::record_handshake_duration(_proto: sb_core::metrics::labels::Proto, _duration_ms: f64)
pub fn sb_core::metrics::labels::record_tls_verify(_proto: sb_core::metrics::labels::Proto, _result: &'static str)
pub mod sb_core::metrics::outbound
pub enum sb_core::metrics::outbound::OutboundErrorClass
pub sb_core::metrics::outbound::OutboundErrorClass::Handshake
pub sb_core::metrics::outbound::OutboundErrorClass::Io
pub sb_core::metrics::outbound::OutboundErrorClass::Other
pub sb_core::metrics::outbound::OutboundErrorClass::Protocol
pub sb_core::metrics::outbound::OutboundErrorClass::Timeout
impl core::clone::Clone for sb_core::metrics::outbound::OutboundErrorClass
pub fn sb_core::metrics::outbound::OutboundErrorClass::clone(&self) -> sb_core::metrics::outbound::OutboundErrorClass
impl core::fmt::Debug for sb_core::metrics::outbound::OutboundErrorClass
pub fn sb_core::metrics::outbound::OutboundErrorClass::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Freeze for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Send for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Sync for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Unpin for sb_core::metrics::outbound::OutboundErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::outbound::OutboundErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::outbound::OutboundErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::outbound::OutboundErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::outbound::OutboundErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::outbound::OutboundErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::outbound::OutboundErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::outbound::OutboundErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::outbound::OutboundErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::outbound::OutboundErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::outbound::OutboundErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::outbound::OutboundErrorClass where T: core::clone::Clone
pub type sb_core::metrics::outbound::OutboundErrorClass::Owned = T
pub fn sb_core::metrics::outbound::OutboundErrorClass::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::outbound::OutboundErrorClass::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::outbound::OutboundErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::outbound::OutboundErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::outbound::OutboundErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::OutboundErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::outbound::OutboundErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::OutboundErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::outbound::OutboundErrorClass where T: core::clone::Clone
pub unsafe fn sb_core::metrics::outbound::OutboundErrorClass::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::outbound::OutboundErrorClass
pub fn sb_core::metrics::outbound::OutboundErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::outbound::OutboundErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::outbound::OutboundErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::outbound::OutboundErrorClass
pub type sb_core::metrics::outbound::OutboundErrorClass::Output = T
pub enum sb_core::metrics::outbound::OutboundKind
pub sb_core::metrics::outbound::OutboundKind::Block
pub sb_core::metrics::outbound::OutboundKind::Direct
pub sb_core::metrics::outbound::OutboundKind::Http
pub sb_core::metrics::outbound::OutboundKind::Socks
impl core::clone::Clone for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::clone(&self) -> sb_core::outbound::OutboundKind
impl core::cmp::Eq for sb_core::outbound::OutboundKind
impl core::cmp::PartialEq for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::eq(&self, other: &sb_core::outbound::OutboundKind) -> bool
impl core::default::Default for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::default() -> sb_core::outbound::OutboundKind
impl core::fmt::Debug for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::outbound::OutboundKind
impl core::marker::Freeze for sb_core::outbound::OutboundKind
impl core::marker::Send for sb_core::outbound::OutboundKind
impl core::marker::Sync for sb_core::outbound::OutboundKind
impl core::marker::Unpin for sb_core::outbound::OutboundKind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::OutboundKind
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::OutboundKind
impl<Q, K> equivalent::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::outbound::OutboundKind where U: core::convert::From<T>
pub fn sb_core::outbound::OutboundKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::OutboundKind where U: core::convert::Into<T>
pub type sb_core::outbound::OutboundKind::Error = core::convert::Infallible
pub fn sb_core::outbound::OutboundKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::OutboundKind where U: core::convert::TryFrom<T>
pub type sb_core::outbound::OutboundKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::OutboundKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::OutboundKind where T: core::clone::Clone
pub type sb_core::outbound::OutboundKind::Owned = T
pub fn sb_core::outbound::OutboundKind::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::OutboundKind::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::OutboundKind where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::OutboundKind where T: core::clone::Clone
pub unsafe fn sb_core::outbound::OutboundKind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::OutboundKind
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::OutboundKind
impl<T> typenum::type_operators::Same for sb_core::outbound::OutboundKind
pub type sb_core::outbound::OutboundKind::Output = T
pub struct sb_core::metrics::outbound::DummyHistogram
impl sb_core::metrics::outbound::DummyHistogram
pub fn sb_core::metrics::outbound::DummyHistogram::observe(&self, _value: f64)
impl core::marker::Freeze for sb_core::metrics::outbound::DummyHistogram
impl core::marker::Send for sb_core::metrics::outbound::DummyHistogram
impl core::marker::Sync for sb_core::metrics::outbound::DummyHistogram
impl core::marker::Unpin for sb_core::metrics::outbound::DummyHistogram
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::outbound::DummyHistogram
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::outbound::DummyHistogram
impl<T, U> core::convert::Into<U> for sb_core::metrics::outbound::DummyHistogram where U: core::convert::From<T>
pub fn sb_core::metrics::outbound::DummyHistogram::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::outbound::DummyHistogram where U: core::convert::Into<T>
pub type sb_core::metrics::outbound::DummyHistogram::Error = core::convert::Infallible
pub fn sb_core::metrics::outbound::DummyHistogram::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::outbound::DummyHistogram where U: core::convert::TryFrom<T>
pub type sb_core::metrics::outbound::DummyHistogram::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::outbound::DummyHistogram::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::outbound::DummyHistogram where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::outbound::DummyHistogram::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::outbound::DummyHistogram where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::DummyHistogram::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::outbound::DummyHistogram where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::DummyHistogram::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::outbound::DummyHistogram
pub fn sb_core::metrics::outbound::DummyHistogram::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::outbound::DummyHistogram
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::outbound::DummyHistogram
impl<T> typenum::type_operators::Same for sb_core::metrics::outbound::DummyHistogram
pub type sb_core::metrics::outbound::DummyHistogram::Output = T
pub struct sb_core::metrics::outbound::DummyHistogramVec
impl sb_core::metrics::outbound::DummyHistogramVec
pub fn sb_core::metrics::outbound::DummyHistogramVec::with_label_values(&self, _labels: &[&str]) -> sb_core::metrics::outbound::DummyHistogram
impl core::marker::Freeze for sb_core::metrics::outbound::DummyHistogramVec
impl core::marker::Send for sb_core::metrics::outbound::DummyHistogramVec
impl core::marker::Sync for sb_core::metrics::outbound::DummyHistogramVec
impl core::marker::Unpin for sb_core::metrics::outbound::DummyHistogramVec
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::outbound::DummyHistogramVec
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::outbound::DummyHistogramVec
impl<T, U> core::convert::Into<U> for sb_core::metrics::outbound::DummyHistogramVec where U: core::convert::From<T>
pub fn sb_core::metrics::outbound::DummyHistogramVec::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::outbound::DummyHistogramVec where U: core::convert::Into<T>
pub type sb_core::metrics::outbound::DummyHistogramVec::Error = core::convert::Infallible
pub fn sb_core::metrics::outbound::DummyHistogramVec::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::outbound::DummyHistogramVec where U: core::convert::TryFrom<T>
pub type sb_core::metrics::outbound::DummyHistogramVec::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::outbound::DummyHistogramVec::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::outbound::DummyHistogramVec where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::outbound::DummyHistogramVec::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::outbound::DummyHistogramVec where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::DummyHistogramVec::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::outbound::DummyHistogramVec where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::DummyHistogramVec::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::outbound::DummyHistogramVec
pub fn sb_core::metrics::outbound::DummyHistogramVec::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::outbound::DummyHistogramVec
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::outbound::DummyHistogramVec
impl<T> typenum::type_operators::Same for sb_core::metrics::outbound::DummyHistogramVec
pub type sb_core::metrics::outbound::DummyHistogramVec::Output = T
pub struct sb_core::metrics::outbound::SelectorMetrics
impl core::marker::Freeze for sb_core::metrics::outbound::SelectorMetrics
impl core::marker::Send for sb_core::metrics::outbound::SelectorMetrics
impl core::marker::Sync for sb_core::metrics::outbound::SelectorMetrics
impl core::marker::Unpin for sb_core::metrics::outbound::SelectorMetrics
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::outbound::SelectorMetrics
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::outbound::SelectorMetrics
impl<T, U> core::convert::Into<U> for sb_core::metrics::outbound::SelectorMetrics where U: core::convert::From<T>
pub fn sb_core::metrics::outbound::SelectorMetrics::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::outbound::SelectorMetrics where U: core::convert::Into<T>
pub type sb_core::metrics::outbound::SelectorMetrics::Error = core::convert::Infallible
pub fn sb_core::metrics::outbound::SelectorMetrics::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::outbound::SelectorMetrics where U: core::convert::TryFrom<T>
pub type sb_core::metrics::outbound::SelectorMetrics::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::outbound::SelectorMetrics::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::outbound::SelectorMetrics where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::outbound::SelectorMetrics::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::outbound::SelectorMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::SelectorMetrics::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::outbound::SelectorMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::SelectorMetrics::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::outbound::SelectorMetrics
pub fn sb_core::metrics::outbound::SelectorMetrics::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::outbound::SelectorMetrics
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::outbound::SelectorMetrics
impl<T> typenum::type_operators::Same for sb_core::metrics::outbound::SelectorMetrics
pub type sb_core::metrics::outbound::SelectorMetrics::Output = T
pub fn sb_core::metrics::outbound::handshake_duration_histogram() -> sb_core::metrics::outbound::DummyHistogramVec
pub fn sb_core::metrics::outbound::record_aead_decrypt_duration(_duration_ms: f64, _protocol: sb_core::metrics::labels::Proto, _cipher: sb_core::metrics::labels::CipherType)
pub fn sb_core::metrics::outbound::record_aead_decrypt_total(_protocol: sb_core::metrics::labels::Proto, _cipher: sb_core::metrics::labels::CipherType, _result: sb_core::metrics::labels::ResultTag)
pub fn sb_core::metrics::outbound::record_aead_encrypt_duration(_duration_ms: f64, _protocol: sb_core::metrics::labels::Proto, _cipher: sb_core::metrics::labels::CipherType)
pub fn sb_core::metrics::outbound::record_aead_encrypt_total(_protocol: sb_core::metrics::labels::Proto, _cipher: sb_core::metrics::labels::CipherType, _result: sb_core::metrics::labels::ResultTag)
pub fn sb_core::metrics::outbound::record_connect_attempt(_kind: sb_core::outbound::OutboundKind)
pub fn sb_core::metrics::outbound::record_connect_duration(_duration_ms: f64)
pub fn sb_core::metrics::outbound::record_connect_error(_kind: sb_core::outbound::OutboundKind, _class: sb_core::metrics::outbound::OutboundErrorClass)
pub fn sb_core::metrics::outbound::record_connect_failure(_kind: sb_core::outbound::OutboundKind)
pub fn sb_core::metrics::outbound::record_connect_success(_kind: sb_core::outbound::OutboundKind)
pub fn sb_core::metrics::outbound::register_comprehensive_metrics()
pub fn sb_core::metrics::outbound::register_metrics()
pub fn sb_core::metrics::outbound::register_selector_metrics() -> sb_core::metrics::outbound::SelectorMetrics
pub mod sb_core::metrics::udp
pub enum sb_core::metrics::udp::EvictionReason
pub sb_core::metrics::udp::EvictionReason::Capacity
pub sb_core::metrics::udp::EvictionReason::Replace
pub sb_core::metrics::udp::EvictionReason::Ttl
impl core::marker::Freeze for sb_core::metrics::udp::EvictionReason
impl core::marker::Send for sb_core::metrics::udp::EvictionReason
impl core::marker::Sync for sb_core::metrics::udp::EvictionReason
impl core::marker::Unpin for sb_core::metrics::udp::EvictionReason
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::udp::EvictionReason
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::udp::EvictionReason
impl<T, U> core::convert::Into<U> for sb_core::metrics::udp::EvictionReason where U: core::convert::From<T>
pub fn sb_core::metrics::udp::EvictionReason::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::udp::EvictionReason where U: core::convert::Into<T>
pub type sb_core::metrics::udp::EvictionReason::Error = core::convert::Infallible
pub fn sb_core::metrics::udp::EvictionReason::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::udp::EvictionReason where U: core::convert::TryFrom<T>
pub type sb_core::metrics::udp::EvictionReason::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::udp::EvictionReason::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::udp::EvictionReason where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::udp::EvictionReason::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::udp::EvictionReason where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::EvictionReason::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::udp::EvictionReason where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::EvictionReason::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::udp::EvictionReason
pub fn sb_core::metrics::udp::EvictionReason::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::udp::EvictionReason
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::udp::EvictionReason
impl<T> typenum::type_operators::Same for sb_core::metrics::udp::EvictionReason
pub type sb_core::metrics::udp::EvictionReason::Output = T
pub enum sb_core::metrics::udp::UdpErrorClass
pub sb_core::metrics::udp::UdpErrorClass::Canceled
pub sb_core::metrics::udp::UdpErrorClass::Decode
pub sb_core::metrics::udp::UdpErrorClass::Io
pub sb_core::metrics::udp::UdpErrorClass::NoRoute
pub sb_core::metrics::udp::UdpErrorClass::Other
pub sb_core::metrics::udp::UdpErrorClass::Timeout
impl core::marker::Freeze for sb_core::metrics::udp::UdpErrorClass
impl core::marker::Send for sb_core::metrics::udp::UdpErrorClass
impl core::marker::Sync for sb_core::metrics::udp::UdpErrorClass
impl core::marker::Unpin for sb_core::metrics::udp::UdpErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::udp::UdpErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::udp::UdpErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::udp::UdpErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::udp::UdpErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::udp::UdpErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::udp::UdpErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::udp::UdpErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::udp::UdpErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::udp::UdpErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::udp::UdpErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::udp::UdpErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::udp::UdpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::udp::UdpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::udp::UdpErrorClass
pub fn sb_core::metrics::udp::UdpErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::udp::UdpErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::udp::UdpErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::udp::UdpErrorClass
pub type sb_core::metrics::udp::UdpErrorClass::Output = T
pub struct sb_core::metrics::udp::UdpNatMetrics
impl core::marker::Freeze for sb_core::metrics::udp::UdpNatMetrics
impl core::marker::Send for sb_core::metrics::udp::UdpNatMetrics
impl core::marker::Sync for sb_core::metrics::udp::UdpNatMetrics
impl core::marker::Unpin for sb_core::metrics::udp::UdpNatMetrics
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::udp::UdpNatMetrics
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::udp::UdpNatMetrics
impl<T, U> core::convert::Into<U> for sb_core::metrics::udp::UdpNatMetrics where U: core::convert::From<T>
pub fn sb_core::metrics::udp::UdpNatMetrics::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::udp::UdpNatMetrics where U: core::convert::Into<T>
pub type sb_core::metrics::udp::UdpNatMetrics::Error = core::convert::Infallible
pub fn sb_core::metrics::udp::UdpNatMetrics::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::udp::UdpNatMetrics where U: core::convert::TryFrom<T>
pub type sb_core::metrics::udp::UdpNatMetrics::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::udp::UdpNatMetrics::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::udp::UdpNatMetrics where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpNatMetrics::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::udp::UdpNatMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpNatMetrics::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::udp::UdpNatMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpNatMetrics::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::udp::UdpNatMetrics
pub fn sb_core::metrics::udp::UdpNatMetrics::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::udp::UdpNatMetrics
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::udp::UdpNatMetrics
impl<T> typenum::type_operators::Same for sb_core::metrics::udp::UdpNatMetrics
pub type sb_core::metrics::udp::UdpNatMetrics::Output = T
pub fn sb_core::metrics::udp::inc_packets_in()
pub fn sb_core::metrics::udp::inc_packets_out()
pub fn sb_core::metrics::udp::record_canceled_failure()
pub fn sb_core::metrics::udp::record_decode_failure()
pub fn sb_core::metrics::udp::record_flow_bytes(_dir: &str, _n: usize)
pub fn sb_core::metrics::udp::record_io_failure()
pub fn sb_core::metrics::udp::record_nat_eviction(_reason: sb_core::metrics::udp::EvictionReason)
pub fn sb_core::metrics::udp::record_no_route_failure()
pub fn sb_core::metrics::udp::record_other_failure()
pub fn sb_core::metrics::udp::record_session_ttl(_ttl_seconds: f64)
pub fn sb_core::metrics::udp::record_timeout_failure()
pub fn sb_core::metrics::udp::record_upstream_failure(_class: sb_core::metrics::udp::UdpErrorClass)
pub fn sb_core::metrics::udp::register_metrics()
pub fn sb_core::metrics::udp::register_udp_nat_metrics() -> sb_core::metrics::udp::UdpNatMetrics
pub fn sb_core::metrics::udp::set_nat_entries(_alive: usize, _gc: usize)
pub fn sb_core::metrics::udp::set_nat_size(_size: usize)
pub mod sb_core::metrics::udp_v2
pub struct sb_core::metrics::udp_v2::UdpNatMetrics
impl core::marker::Freeze for sb_core::metrics::udp_v2::UdpNatMetrics
impl core::marker::Send for sb_core::metrics::udp_v2::UdpNatMetrics
impl core::marker::Sync for sb_core::metrics::udp_v2::UdpNatMetrics
impl core::marker::Unpin for sb_core::metrics::udp_v2::UdpNatMetrics
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::udp_v2::UdpNatMetrics
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::udp_v2::UdpNatMetrics
impl<T, U> core::convert::Into<U> for sb_core::metrics::udp_v2::UdpNatMetrics where U: core::convert::From<T>
pub fn sb_core::metrics::udp_v2::UdpNatMetrics::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::udp_v2::UdpNatMetrics where U: core::convert::Into<T>
pub type sb_core::metrics::udp_v2::UdpNatMetrics::Error = core::convert::Infallible
pub fn sb_core::metrics::udp_v2::UdpNatMetrics::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::udp_v2::UdpNatMetrics where U: core::convert::TryFrom<T>
pub type sb_core::metrics::udp_v2::UdpNatMetrics::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::udp_v2::UdpNatMetrics::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::udp_v2::UdpNatMetrics where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::udp_v2::UdpNatMetrics::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::udp_v2::UdpNatMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::udp_v2::UdpNatMetrics::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::udp_v2::UdpNatMetrics where T: ?core::marker::Sized
pub fn sb_core::metrics::udp_v2::UdpNatMetrics::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::udp_v2::UdpNatMetrics
pub fn sb_core::metrics::udp_v2::UdpNatMetrics::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::udp_v2::UdpNatMetrics
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::udp_v2::UdpNatMetrics
impl<T> typenum::type_operators::Same for sb_core::metrics::udp_v2::UdpNatMetrics
pub type sb_core::metrics::udp_v2::UdpNatMetrics::Output = T
pub fn sb_core::metrics::udp_v2::register_udp_nat_metrics() -> sb_core::metrics::udp_v2::UdpNatMetrics
pub enum sb_core::metrics::DnsErrorClass
pub sb_core::metrics::DnsErrorClass::NameError
pub sb_core::metrics::DnsErrorClass::NetworkError
pub sb_core::metrics::DnsErrorClass::Other
pub sb_core::metrics::DnsErrorClass::Timeout
impl sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::as_str(&self) -> &'static str
pub fn sb_core::metrics::dns::DnsErrorClass::from_error_str(s: &str) -> Self
impl core::clone::Clone for sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::clone(&self) -> sb_core::metrics::dns::DnsErrorClass
impl core::fmt::Debug for sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Freeze for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Send for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Sync for sb_core::metrics::dns::DnsErrorClass
impl core::marker::Unpin for sb_core::metrics::dns::DnsErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::dns::DnsErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::dns::DnsErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::dns::DnsErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::dns::DnsErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::dns::DnsErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::dns::DnsErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::dns::DnsErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::dns::DnsErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::dns::DnsErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::dns::DnsErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::dns::DnsErrorClass where T: core::clone::Clone
pub type sb_core::metrics::dns::DnsErrorClass::Owned = T
pub fn sb_core::metrics::dns::DnsErrorClass::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::dns::DnsErrorClass::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::dns::DnsErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::dns::DnsErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::dns::DnsErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::dns::DnsErrorClass where T: core::clone::Clone
pub unsafe fn sb_core::metrics::dns::DnsErrorClass::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::dns::DnsErrorClass
pub fn sb_core::metrics::dns::DnsErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::dns::DnsErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::dns::DnsErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::dns::DnsErrorClass
pub type sb_core::metrics::dns::DnsErrorClass::Output = T
pub enum sb_core::metrics::DnsQueryType
pub sb_core::metrics::DnsQueryType::A
pub sb_core::metrics::DnsQueryType::AAAA
pub sb_core::metrics::DnsQueryType::Other
impl sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::as_str(&self) -> &'static str
pub fn sb_core::metrics::dns::DnsQueryType::from_u16(v: u16) -> Self
impl core::clone::Clone for sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::clone(&self) -> sb_core::metrics::dns::DnsQueryType
impl core::fmt::Debug for sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::dns::DnsQueryType
impl core::marker::Freeze for sb_core::metrics::dns::DnsQueryType
impl core::marker::Send for sb_core::metrics::dns::DnsQueryType
impl core::marker::Sync for sb_core::metrics::dns::DnsQueryType
impl core::marker::Unpin for sb_core::metrics::dns::DnsQueryType
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::dns::DnsQueryType
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::dns::DnsQueryType
impl<T, U> core::convert::Into<U> for sb_core::metrics::dns::DnsQueryType where U: core::convert::From<T>
pub fn sb_core::metrics::dns::DnsQueryType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::dns::DnsQueryType where U: core::convert::Into<T>
pub type sb_core::metrics::dns::DnsQueryType::Error = core::convert::Infallible
pub fn sb_core::metrics::dns::DnsQueryType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::dns::DnsQueryType where U: core::convert::TryFrom<T>
pub type sb_core::metrics::dns::DnsQueryType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::dns::DnsQueryType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::dns::DnsQueryType where T: core::clone::Clone
pub type sb_core::metrics::dns::DnsQueryType::Owned = T
pub fn sb_core::metrics::dns::DnsQueryType::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::dns::DnsQueryType::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::dns::DnsQueryType where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsQueryType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::dns::DnsQueryType where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsQueryType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::dns::DnsQueryType where T: ?core::marker::Sized
pub fn sb_core::metrics::dns::DnsQueryType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::dns::DnsQueryType where T: core::clone::Clone
pub unsafe fn sb_core::metrics::dns::DnsQueryType::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::dns::DnsQueryType
pub fn sb_core::metrics::dns::DnsQueryType::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::dns::DnsQueryType
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::dns::DnsQueryType
impl<T> typenum::type_operators::Same for sb_core::metrics::dns::DnsQueryType
pub type sb_core::metrics::dns::DnsQueryType::Output = T
pub enum sb_core::metrics::EvictionReason
pub sb_core::metrics::EvictionReason::Capacity
pub sb_core::metrics::EvictionReason::Replace
pub sb_core::metrics::EvictionReason::Ttl
impl core::marker::Freeze for sb_core::metrics::udp::EvictionReason
impl core::marker::Send for sb_core::metrics::udp::EvictionReason
impl core::marker::Sync for sb_core::metrics::udp::EvictionReason
impl core::marker::Unpin for sb_core::metrics::udp::EvictionReason
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::udp::EvictionReason
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::udp::EvictionReason
impl<T, U> core::convert::Into<U> for sb_core::metrics::udp::EvictionReason where U: core::convert::From<T>
pub fn sb_core::metrics::udp::EvictionReason::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::udp::EvictionReason where U: core::convert::Into<T>
pub type sb_core::metrics::udp::EvictionReason::Error = core::convert::Infallible
pub fn sb_core::metrics::udp::EvictionReason::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::udp::EvictionReason where U: core::convert::TryFrom<T>
pub type sb_core::metrics::udp::EvictionReason::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::udp::EvictionReason::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::udp::EvictionReason where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::udp::EvictionReason::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::udp::EvictionReason where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::EvictionReason::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::udp::EvictionReason where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::EvictionReason::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::udp::EvictionReason
pub fn sb_core::metrics::udp::EvictionReason::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::udp::EvictionReason
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::udp::EvictionReason
impl<T> typenum::type_operators::Same for sb_core::metrics::udp::EvictionReason
pub type sb_core::metrics::udp::EvictionReason::Output = T
pub enum sb_core::metrics::OutboundErrorClass
pub sb_core::metrics::OutboundErrorClass::Handshake
pub sb_core::metrics::OutboundErrorClass::Io
pub sb_core::metrics::OutboundErrorClass::Other
pub sb_core::metrics::OutboundErrorClass::Protocol
pub sb_core::metrics::OutboundErrorClass::Timeout
impl core::clone::Clone for sb_core::metrics::outbound::OutboundErrorClass
pub fn sb_core::metrics::outbound::OutboundErrorClass::clone(&self) -> sb_core::metrics::outbound::OutboundErrorClass
impl core::fmt::Debug for sb_core::metrics::outbound::OutboundErrorClass
pub fn sb_core::metrics::outbound::OutboundErrorClass::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Freeze for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Send for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Sync for sb_core::metrics::outbound::OutboundErrorClass
impl core::marker::Unpin for sb_core::metrics::outbound::OutboundErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::outbound::OutboundErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::outbound::OutboundErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::outbound::OutboundErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::outbound::OutboundErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::outbound::OutboundErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::outbound::OutboundErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::outbound::OutboundErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::outbound::OutboundErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::outbound::OutboundErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::outbound::OutboundErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::metrics::outbound::OutboundErrorClass where T: core::clone::Clone
pub type sb_core::metrics::outbound::OutboundErrorClass::Owned = T
pub fn sb_core::metrics::outbound::OutboundErrorClass::clone_into(&self, target: &mut T)
pub fn sb_core::metrics::outbound::OutboundErrorClass::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::metrics::outbound::OutboundErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::outbound::OutboundErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::outbound::OutboundErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::OutboundErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::outbound::OutboundErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::outbound::OutboundErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::metrics::outbound::OutboundErrorClass where T: core::clone::Clone
pub unsafe fn sb_core::metrics::outbound::OutboundErrorClass::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::metrics::outbound::OutboundErrorClass
pub fn sb_core::metrics::outbound::OutboundErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::outbound::OutboundErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::outbound::OutboundErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::outbound::OutboundErrorClass
pub type sb_core::metrics::outbound::OutboundErrorClass::Output = T
pub enum sb_core::metrics::OutboundKind
pub sb_core::metrics::OutboundKind::Block
pub sb_core::metrics::OutboundKind::Direct
pub sb_core::metrics::OutboundKind::Http
pub sb_core::metrics::OutboundKind::Socks
impl core::clone::Clone for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::clone(&self) -> sb_core::outbound::OutboundKind
impl core::cmp::Eq for sb_core::outbound::OutboundKind
impl core::cmp::PartialEq for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::eq(&self, other: &sb_core::outbound::OutboundKind) -> bool
impl core::default::Default for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::default() -> sb_core::outbound::OutboundKind
impl core::fmt::Debug for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::outbound::OutboundKind
impl core::marker::Freeze for sb_core::outbound::OutboundKind
impl core::marker::Send for sb_core::outbound::OutboundKind
impl core::marker::Sync for sb_core::outbound::OutboundKind
impl core::marker::Unpin for sb_core::outbound::OutboundKind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::OutboundKind
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::OutboundKind
impl<Q, K> equivalent::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::outbound::OutboundKind where U: core::convert::From<T>
pub fn sb_core::outbound::OutboundKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::OutboundKind where U: core::convert::Into<T>
pub type sb_core::outbound::OutboundKind::Error = core::convert::Infallible
pub fn sb_core::outbound::OutboundKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::OutboundKind where U: core::convert::TryFrom<T>
pub type sb_core::outbound::OutboundKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::OutboundKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::OutboundKind where T: core::clone::Clone
pub type sb_core::outbound::OutboundKind::Owned = T
pub fn sb_core::outbound::OutboundKind::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::OutboundKind::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::OutboundKind where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::OutboundKind where T: core::clone::Clone
pub unsafe fn sb_core::outbound::OutboundKind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::OutboundKind
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::OutboundKind
impl<T> typenum::type_operators::Same for sb_core::outbound::OutboundKind
pub type sb_core::outbound::OutboundKind::Output = T
pub enum sb_core::metrics::UdpErrorClass
pub sb_core::metrics::UdpErrorClass::Canceled
pub sb_core::metrics::UdpErrorClass::Decode
pub sb_core::metrics::UdpErrorClass::Io
pub sb_core::metrics::UdpErrorClass::NoRoute
pub sb_core::metrics::UdpErrorClass::Other
pub sb_core::metrics::UdpErrorClass::Timeout
impl core::marker::Freeze for sb_core::metrics::udp::UdpErrorClass
impl core::marker::Send for sb_core::metrics::udp::UdpErrorClass
impl core::marker::Sync for sb_core::metrics::udp::UdpErrorClass
impl core::marker::Unpin for sb_core::metrics::udp::UdpErrorClass
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::metrics::udp::UdpErrorClass
impl core::panic::unwind_safe::UnwindSafe for sb_core::metrics::udp::UdpErrorClass
impl<T, U> core::convert::Into<U> for sb_core::metrics::udp::UdpErrorClass where U: core::convert::From<T>
pub fn sb_core::metrics::udp::UdpErrorClass::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::metrics::udp::UdpErrorClass where U: core::convert::Into<T>
pub type sb_core::metrics::udp::UdpErrorClass::Error = core::convert::Infallible
pub fn sb_core::metrics::udp::UdpErrorClass::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::metrics::udp::UdpErrorClass where U: core::convert::TryFrom<T>
pub type sb_core::metrics::udp::UdpErrorClass::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::metrics::udp::UdpErrorClass::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::metrics::udp::UdpErrorClass where T: 'static + ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpErrorClass::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::metrics::udp::UdpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpErrorClass::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::metrics::udp::UdpErrorClass where T: ?core::marker::Sized
pub fn sb_core::metrics::udp::UdpErrorClass::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::metrics::udp::UdpErrorClass
pub fn sb_core::metrics::udp::UdpErrorClass::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::metrics::udp::UdpErrorClass
impl<T> tracing::instrument::WithSubscriber for sb_core::metrics::udp::UdpErrorClass
impl<T> typenum::type_operators::Same for sb_core::metrics::udp::UdpErrorClass
pub type sb_core::metrics::udp::UdpErrorClass::Output = T
pub fn sb_core::metrics::inc_405_responses()
pub fn sb_core::metrics::inc_http_requests(_method: &str, _status: u16)
pub fn sb_core::metrics::inc_udp_packets_in()
pub fn sb_core::metrics::inc_udp_packets_out()
pub fn sb_core::metrics::record_cache_hit()
pub fn sb_core::metrics::record_cache_miss()
pub fn sb_core::metrics::record_connect_attempt(_kind: sb_core::outbound::OutboundKind)
pub fn sb_core::metrics::record_connect_error(_kind: sb_core::outbound::OutboundKind, _class: sb_core::metrics::outbound::OutboundErrorClass)
pub fn sb_core::metrics::record_connect_failure(_kind: sb_core::outbound::OutboundKind)
pub fn sb_core::metrics::record_connect_success(_kind: sb_core::outbound::OutboundKind)
pub fn sb_core::metrics::record_dns_error(_c: sb_core::metrics::dns::DnsErrorClass)
pub fn sb_core::metrics::record_dns_failure(_q: sb_core::metrics::dns::DnsQueryType, _class: sb_core::metrics::dns::DnsErrorClass)
pub fn sb_core::metrics::record_dns_query(_q: sb_core::metrics::dns::DnsQueryType)
pub fn sb_core::metrics::record_dns_rtt(_rtt_ms: f64)
pub fn sb_core::metrics::record_dns_success(_q: sb_core::metrics::dns::DnsQueryType, _rtt_ms: f64, _from_cache: bool)
pub fn sb_core::metrics::record_http_duration(_duration_ms: f64)
pub fn sb_core::metrics::record_http_error(error_class: sb_core::metrics::http::HttpErrorClass)
pub fn sb_core::metrics::record_nat_eviction(_reason: sb_core::metrics::udp::EvictionReason)
pub fn sb_core::metrics::record_outbound_duration(_duration_ms: f64)
pub fn sb_core::metrics::record_udp_flow_bytes(_dir: &str, _n: usize)
pub fn sb_core::metrics::record_udp_upstream_failure(_class: sb_core::metrics::udp::UdpErrorClass)
pub fn sb_core::metrics::register_all_metrics()
pub fn sb_core::metrics::set_dns_cache_size(_size: usize)
pub fn sb_core::metrics::set_http_active_connections(_count: usize)
pub fn sb_core::metrics::set_nat_size(_size: usize)
pub mod sb_core::net
pub mod sb_core::net::datagram
pub enum sb_core::net::datagram::UdpTargetAddr
pub sb_core::net::datagram::UdpTargetAddr::Domain
pub sb_core::net::datagram::UdpTargetAddr::Domain::host: alloc::string::String
pub sb_core::net::datagram::UdpTargetAddr::Domain::port: u16
pub sb_core::net::datagram::UdpTargetAddr::Ip(core::net::socket_addr::SocketAddr)
impl core::clone::Clone for sb_core::net::datagram::UdpTargetAddr
pub fn sb_core::net::datagram::UdpTargetAddr::clone(&self) -> sb_core::net::datagram::UdpTargetAddr
impl core::cmp::Eq for sb_core::net::datagram::UdpTargetAddr
impl core::cmp::PartialEq for sb_core::net::datagram::UdpTargetAddr
pub fn sb_core::net::datagram::UdpTargetAddr::eq(&self, other: &sb_core::net::datagram::UdpTargetAddr) -> bool
impl core::fmt::Debug for sb_core::net::datagram::UdpTargetAddr
pub fn sb_core::net::datagram::UdpTargetAddr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::datagram::UdpTargetAddr
pub fn sb_core::net::datagram::UdpTargetAddr::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::datagram::UdpTargetAddr
impl core::marker::Freeze for sb_core::net::datagram::UdpTargetAddr
impl core::marker::Send for sb_core::net::datagram::UdpTargetAddr
impl core::marker::Sync for sb_core::net::datagram::UdpTargetAddr
impl core::marker::Unpin for sb_core::net::datagram::UdpTargetAddr
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::datagram::UdpTargetAddr
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::datagram::UdpTargetAddr
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::datagram::UdpTargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpTargetAddr::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::datagram::UdpTargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::datagram::UdpTargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpTargetAddr::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::datagram::UdpTargetAddr::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::datagram::UdpTargetAddr where U: core::convert::From<T>
pub fn sb_core::net::datagram::UdpTargetAddr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::datagram::UdpTargetAddr where U: core::convert::Into<T>
pub type sb_core::net::datagram::UdpTargetAddr::Error = core::convert::Infallible
pub fn sb_core::net::datagram::UdpTargetAddr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::datagram::UdpTargetAddr where U: core::convert::TryFrom<T>
pub type sb_core::net::datagram::UdpTargetAddr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::datagram::UdpTargetAddr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::datagram::UdpTargetAddr where T: core::clone::Clone
pub type sb_core::net::datagram::UdpTargetAddr::Owned = T
pub fn sb_core::net::datagram::UdpTargetAddr::clone_into(&self, target: &mut T)
pub fn sb_core::net::datagram::UdpTargetAddr::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::datagram::UdpTargetAddr where T: 'static + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpTargetAddr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::datagram::UdpTargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpTargetAddr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::datagram::UdpTargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpTargetAddr::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::datagram::UdpTargetAddr where T: core::clone::Clone
pub unsafe fn sb_core::net::datagram::UdpTargetAddr::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::datagram::UdpTargetAddr
pub fn sb_core::net::datagram::UdpTargetAddr::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::datagram::UdpTargetAddr
impl<T> tracing::instrument::WithSubscriber for sb_core::net::datagram::UdpTargetAddr
impl<T> typenum::type_operators::Same for sb_core::net::datagram::UdpTargetAddr
pub type sb_core::net::datagram::UdpTargetAddr::Output = T
pub struct sb_core::net::datagram::UdpNatEntry
pub sb_core::net::datagram::UdpNatEntry::bytes_in: u64
pub sb_core::net::datagram::UdpNatEntry::bytes_out: u64
pub sb_core::net::datagram::UdpNatEntry::last_seen: std::time::Instant
pub sb_core::net::datagram::UdpNatEntry::upstream: alloc::sync::Arc<tokio::net::udp::UdpSocket>
impl core::fmt::Debug for sb_core::net::datagram::UdpNatEntry
pub fn sb_core::net::datagram::UdpNatEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::net::datagram::UdpNatEntry
impl core::marker::Send for sb_core::net::datagram::UdpNatEntry
impl core::marker::Sync for sb_core::net::datagram::UdpNatEntry
impl core::marker::Unpin for sb_core::net::datagram::UdpNatEntry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::datagram::UdpNatEntry
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::datagram::UdpNatEntry
impl<T, U> core::convert::Into<U> for sb_core::net::datagram::UdpNatEntry where U: core::convert::From<T>
pub fn sb_core::net::datagram::UdpNatEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::datagram::UdpNatEntry where U: core::convert::Into<T>
pub type sb_core::net::datagram::UdpNatEntry::Error = core::convert::Infallible
pub fn sb_core::net::datagram::UdpNatEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::datagram::UdpNatEntry where U: core::convert::TryFrom<T>
pub type sb_core::net::datagram::UdpNatEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::datagram::UdpNatEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::datagram::UdpNatEntry where T: 'static + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::datagram::UdpNatEntry where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::datagram::UdpNatEntry where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::datagram::UdpNatEntry
pub fn sb_core::net::datagram::UdpNatEntry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::datagram::UdpNatEntry
impl<T> tracing::instrument::WithSubscriber for sb_core::net::datagram::UdpNatEntry
impl<T> typenum::type_operators::Same for sb_core::net::datagram::UdpNatEntry
pub type sb_core::net::datagram::UdpNatEntry::Output = T
pub struct sb_core::net::datagram::UdpNatKey
pub sb_core::net::datagram::UdpNatKey::client: core::net::socket_addr::SocketAddr
pub sb_core::net::datagram::UdpNatKey::dst: sb_core::net::datagram::UdpTargetAddr
impl core::clone::Clone for sb_core::net::datagram::UdpNatKey
pub fn sb_core::net::datagram::UdpNatKey::clone(&self) -> sb_core::net::datagram::UdpNatKey
impl core::cmp::Eq for sb_core::net::datagram::UdpNatKey
impl core::cmp::PartialEq for sb_core::net::datagram::UdpNatKey
pub fn sb_core::net::datagram::UdpNatKey::eq(&self, other: &sb_core::net::datagram::UdpNatKey) -> bool
impl core::fmt::Debug for sb_core::net::datagram::UdpNatKey
pub fn sb_core::net::datagram::UdpNatKey::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::datagram::UdpNatKey
pub fn sb_core::net::datagram::UdpNatKey::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::datagram::UdpNatKey
impl core::marker::Freeze for sb_core::net::datagram::UdpNatKey
impl core::marker::Send for sb_core::net::datagram::UdpNatKey
impl core::marker::Sync for sb_core::net::datagram::UdpNatKey
impl core::marker::Unpin for sb_core::net::datagram::UdpNatKey
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::datagram::UdpNatKey
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::datagram::UdpNatKey
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::datagram::UdpNatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatKey::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::datagram::UdpNatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::datagram::UdpNatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatKey::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::datagram::UdpNatKey::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::datagram::UdpNatKey where U: core::convert::From<T>
pub fn sb_core::net::datagram::UdpNatKey::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::datagram::UdpNatKey where U: core::convert::Into<T>
pub type sb_core::net::datagram::UdpNatKey::Error = core::convert::Infallible
pub fn sb_core::net::datagram::UdpNatKey::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::datagram::UdpNatKey where U: core::convert::TryFrom<T>
pub type sb_core::net::datagram::UdpNatKey::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::datagram::UdpNatKey::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::datagram::UdpNatKey where T: core::clone::Clone
pub type sb_core::net::datagram::UdpNatKey::Owned = T
pub fn sb_core::net::datagram::UdpNatKey::clone_into(&self, target: &mut T)
pub fn sb_core::net::datagram::UdpNatKey::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::datagram::UdpNatKey where T: 'static + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatKey::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::datagram::UdpNatKey where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatKey::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::datagram::UdpNatKey where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatKey::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::datagram::UdpNatKey where T: core::clone::Clone
pub unsafe fn sb_core::net::datagram::UdpNatKey::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::datagram::UdpNatKey
pub fn sb_core::net::datagram::UdpNatKey::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::datagram::UdpNatKey
impl<T> tracing::instrument::WithSubscriber for sb_core::net::datagram::UdpNatKey
impl<T> typenum::type_operators::Same for sb_core::net::datagram::UdpNatKey
pub type sb_core::net::datagram::UdpNatKey::Output = T
pub struct sb_core::net::datagram::UdpNatMap
impl sb_core::net::datagram::UdpNatMap
pub async fn sb_core::net::datagram::UdpNatMap::evict_expired(&self) -> usize
pub async fn sb_core::net::datagram::UdpNatMap::get(&self, k: &sb_core::net::datagram::UdpNatKey) -> core::option::Option<alloc::sync::Arc<tokio::net::udp::UdpSocket>>
pub async fn sb_core::net::datagram::UdpNatMap::is_empty(&self) -> bool
pub async fn sb_core::net::datagram::UdpNatMap::len(&self) -> usize
pub async fn sb_core::net::datagram::UdpNatMap::map(&self) -> &tokio::sync::mutex::Mutex<std::collections::hash::map::HashMap<sb_core::net::datagram::UdpNatKey, sb_core::net::datagram::UdpNatEntry>>
pub fn sb_core::net::datagram::UdpNatMap::new<T>(_maybe_ttl: T) -> Self where T: core::convert::Into<core::option::Option<core::time::Duration>>
pub async fn sb_core::net::datagram::UdpNatMap::purge_expired(&self, ttl: core::time::Duration) -> usize
pub async fn sb_core::net::datagram::UdpNatMap::upsert(&self, k: sb_core::net::datagram::UdpNatKey, upstream: alloc::sync::Arc<tokio::net::udp::UdpSocket>)
pub async fn sb_core::net::datagram::UdpNatMap::upsert_guarded(&self, k: sb_core::net::datagram::UdpNatKey, upstream: alloc::sync::Arc<tokio::net::udp::UdpSocket>) -> bool
impl core::default::Default for sb_core::net::datagram::UdpNatMap
pub fn sb_core::net::datagram::UdpNatMap::default() -> sb_core::net::datagram::UdpNatMap
impl core::fmt::Debug for sb_core::net::datagram::UdpNatMap
pub fn sb_core::net::datagram::UdpNatMap::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl !core::marker::Freeze for sb_core::net::datagram::UdpNatMap
impl core::marker::Send for sb_core::net::datagram::UdpNatMap
impl core::marker::Sync for sb_core::net::datagram::UdpNatMap
impl core::marker::Unpin for sb_core::net::datagram::UdpNatMap
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::net::datagram::UdpNatMap
impl !core::panic::unwind_safe::UnwindSafe for sb_core::net::datagram::UdpNatMap
impl<T, U> core::convert::Into<U> for sb_core::net::datagram::UdpNatMap where U: core::convert::From<T>
pub fn sb_core::net::datagram::UdpNatMap::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::datagram::UdpNatMap where U: core::convert::Into<T>
pub type sb_core::net::datagram::UdpNatMap::Error = core::convert::Infallible
pub fn sb_core::net::datagram::UdpNatMap::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::datagram::UdpNatMap where U: core::convert::TryFrom<T>
pub type sb_core::net::datagram::UdpNatMap::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::datagram::UdpNatMap::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::datagram::UdpNatMap where T: 'static + ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatMap::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::datagram::UdpNatMap where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatMap::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::datagram::UdpNatMap where T: ?core::marker::Sized
pub fn sb_core::net::datagram::UdpNatMap::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::datagram::UdpNatMap
pub fn sb_core::net::datagram::UdpNatMap::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::datagram::UdpNatMap
impl<T> tracing::instrument::WithSubscriber for sb_core::net::datagram::UdpNatMap
impl<T> typenum::type_operators::Same for sb_core::net::datagram::UdpNatMap
pub type sb_core::net::datagram::UdpNatMap::Output = T
pub async fn sb_core::net::datagram::run_nat_evictor(map: alloc::sync::Arc<sb_core::net::datagram::UdpNatMap>, ttl: core::time::Duration, scan: core::time::Duration)
pub mod sb_core::net::dial
pub async fn sb_core::net::dial::dial_all(host: &str, port: u16, per_attempt: core::time::Duration) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::net::dial::dial_hostport(host: &str, port: u16, per_attempt: core::time::Duration) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::net::dial::dial_pref(host: &str, port: u16) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::net::dial::dial_socketaddrs<I>(iter: I, per_attempt: core::time::Duration) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream> where I: core::iter::traits::collect::IntoIterator<Item = core::net::socket_addr::SocketAddr>
pub fn sb_core::net::dial::per_attempt_timeout() -> core::time::Duration
pub mod sb_core::net::metered
pub struct sb_core::net::metered::MeteredStream<T>
impl<T> sb_core::net::metered::MeteredStream<T>
pub fn sb_core::net::metered::MeteredStream<T>::into_inner(self) -> T
pub fn sb_core::net::metered::MeteredStream<T>::new(inner: T, label: &'static str) -> Self
impl<T: tokio::io::async_read::AsyncRead + core::marker::Unpin> tokio::io::async_read::AsyncRead for sb_core::net::metered::MeteredStream<T>
pub fn sb_core::net::metered::MeteredStream<T>::poll_read(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>, buf: &mut tokio::io::read_buf::ReadBuf<'_>) -> core::task::poll::Poll<std::io::error::Result<()>>
impl<T: tokio::io::async_write::AsyncWrite + core::marker::Unpin> tokio::io::async_write::AsyncWrite for sb_core::net::metered::MeteredStream<T>
pub fn sb_core::net::metered::MeteredStream<T>::poll_flush(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>) -> core::task::poll::Poll<std::io::error::Result<()>>
pub fn sb_core::net::metered::MeteredStream<T>::poll_shutdown(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>) -> core::task::poll::Poll<std::io::error::Result<()>>
pub fn sb_core::net::metered::MeteredStream<T>::poll_write(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>, data: &[u8]) -> core::task::poll::Poll<std::io::error::Result<usize>>
impl<T> core::marker::Freeze for sb_core::net::metered::MeteredStream<T> where T: core::marker::Freeze
impl<T> core::marker::Send for sb_core::net::metered::MeteredStream<T> where T: core::marker::Send
impl<T> core::marker::Sync for sb_core::net::metered::MeteredStream<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for sb_core::net::metered::MeteredStream<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for sb_core::net::metered::MeteredStream<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for sb_core::net::metered::MeteredStream<T> where T: core::panic::unwind_safe::UnwindSafe
impl<R> tokio::io::util::async_read_ext::AsyncReadExt for sb_core::net::metered::MeteredStream<T> where R: tokio::io::async_read::AsyncRead + ?core::marker::Sized
impl<T, U> core::convert::Into<U> for sb_core::net::metered::MeteredStream<T> where U: core::convert::From<T>
pub fn sb_core::net::metered::MeteredStream<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::metered::MeteredStream<T> where U: core::convert::Into<T>
pub type sb_core::net::metered::MeteredStream<T>::Error = core::convert::Infallible
pub fn sb_core::net::metered::MeteredStream<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::metered::MeteredStream<T> where U: core::convert::TryFrom<T>
pub type sb_core::net::metered::MeteredStream<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::metered::MeteredStream<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::metered::MeteredStream<T> where T: 'static + ?core::marker::Sized
pub fn sb_core::net::metered::MeteredStream<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::metered::MeteredStream<T> where T: ?core::marker::Sized
pub fn sb_core::net::metered::MeteredStream<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::metered::MeteredStream<T> where T: ?core::marker::Sized
pub fn sb_core::net::metered::MeteredStream<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::metered::MeteredStream<T>
pub fn sb_core::net::metered::MeteredStream<T>::from(t: T) -> T
impl<T> sb_core::runtime::switchboard::AsyncStream for sb_core::net::metered::MeteredStream<T> where T: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin + core::marker::Send
impl<T> tokio_util::compat::TokioAsyncReadCompatExt for sb_core::net::metered::MeteredStream<T> where T: tokio::io::async_read::AsyncRead
impl<T> tokio_util::compat::TokioAsyncWriteCompatExt for sb_core::net::metered::MeteredStream<T> where T: tokio::io::async_write::AsyncWrite
impl<T> tracing::instrument::Instrument for sb_core::net::metered::MeteredStream<T>
impl<T> tracing::instrument::WithSubscriber for sb_core::net::metered::MeteredStream<T>
impl<T> typenum::type_operators::Same for sb_core::net::metered::MeteredStream<T>
pub type sb_core::net::metered::MeteredStream<T>::Output = T
impl<W> tokio::io::util::async_write_ext::AsyncWriteExt for sb_core::net::metered::MeteredStream<T> where W: tokio::io::async_write::AsyncWrite + ?core::marker::Sized
pub async fn sb_core::net::metered::copy_bidirectional_metered<A, B>(a: &mut A, b: &mut B, _label: &'static str) -> std::io::error::Result<()> where A: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin, B: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin
pub async fn sb_core::net::metered::copy_bidirectional_streaming<A, B>(a: &mut A, b: &mut B, _label: &'static str, interval_dur: core::time::Duration) -> std::io::error::Result<(u64, u64)> where A: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin, B: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin
pub async fn sb_core::net::metered::copy_bidirectional_streaming_ctl<A, B>(a: &mut A, b: &mut B, _label: &'static str, interval_dur: core::time::Duration, read_timeout: core::option::Option<core::time::Duration>, write_timeout: core::option::Option<core::time::Duration>, cancel: core::option::Option<tokio_util::sync::cancellation_token::CancellationToken>) -> std::io::error::Result<(u64, u64)> where A: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin, B: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin
pub fn sb_core::net::metered::wrap_stream<T>(label: &'static str, io: T) -> sb_core::net::metered::MeteredStream<T>
pub mod sb_core::net::rate_limit
pub struct sb_core::net::rate_limit::RateLimiter
impl sb_core::net::rate_limit::RateLimiter
pub fn sb_core::net::rate_limit::RateLimiter::allow(&self, sz: usize) -> core::result::Result<(), &'static str>
pub fn sb_core::net::rate_limit::RateLimiter::from_env_udp() -> core::option::Option<Self>
impl !core::marker::Freeze for sb_core::net::rate_limit::RateLimiter
impl core::marker::Send for sb_core::net::rate_limit::RateLimiter
impl core::marker::Sync for sb_core::net::rate_limit::RateLimiter
impl core::marker::Unpin for sb_core::net::rate_limit::RateLimiter
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::rate_limit::RateLimiter
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::rate_limit::RateLimiter
impl<T, U> core::convert::Into<U> for sb_core::net::rate_limit::RateLimiter where U: core::convert::From<T>
pub fn sb_core::net::rate_limit::RateLimiter::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::rate_limit::RateLimiter where U: core::convert::Into<T>
pub type sb_core::net::rate_limit::RateLimiter::Error = core::convert::Infallible
pub fn sb_core::net::rate_limit::RateLimiter::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::rate_limit::RateLimiter where U: core::convert::TryFrom<T>
pub type sb_core::net::rate_limit::RateLimiter::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::rate_limit::RateLimiter::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::rate_limit::RateLimiter where T: 'static + ?core::marker::Sized
pub fn sb_core::net::rate_limit::RateLimiter::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::rate_limit::RateLimiter where T: ?core::marker::Sized
pub fn sb_core::net::rate_limit::RateLimiter::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::rate_limit::RateLimiter where T: ?core::marker::Sized
pub fn sb_core::net::rate_limit::RateLimiter::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::rate_limit::RateLimiter
pub fn sb_core::net::rate_limit::RateLimiter::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::rate_limit::RateLimiter
impl<T> tracing::instrument::WithSubscriber for sb_core::net::rate_limit::RateLimiter
impl<T> typenum::type_operators::Same for sb_core::net::rate_limit::RateLimiter
pub type sb_core::net::rate_limit::RateLimiter::Output = T
pub mod sb_core::net::ratelimit
pub fn sb_core::net::ratelimit::maybe_drop_udp(len: usize) -> core::option::Option<&'static str>
pub mod sb_core::net::udp_nat
pub enum sb_core::net::udp_nat::TargetAddr
pub sb_core::net::udp_nat::TargetAddr::Domain(alloc::string::String, u16)
pub sb_core::net::udp_nat::TargetAddr::Ip(core::net::socket_addr::SocketAddr)
impl core::clone::Clone for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::clone(&self) -> sb_core::net::udp_nat::TargetAddr
impl core::cmp::Eq for sb_core::net::udp_nat::TargetAddr
impl core::cmp::PartialEq for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::eq(&self, other: &sb_core::net::udp_nat::TargetAddr) -> bool
impl core::fmt::Debug for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::udp_nat::TargetAddr
impl core::marker::Freeze for sb_core::net::udp_nat::TargetAddr
impl core::marker::Send for sb_core::net::udp_nat::TargetAddr
impl core::marker::Sync for sb_core::net::udp_nat::TargetAddr
impl core::marker::Unpin for sb_core::net::udp_nat::TargetAddr
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat::TargetAddr
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat::TargetAddr
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::udp_nat::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::udp_nat::TargetAddr::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat::TargetAddr where U: core::convert::From<T>
pub fn sb_core::net::udp_nat::TargetAddr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat::TargetAddr where U: core::convert::Into<T>
pub type sb_core::net::udp_nat::TargetAddr::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat::TargetAddr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat::TargetAddr where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat::TargetAddr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat::TargetAddr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::udp_nat::TargetAddr where T: core::clone::Clone
pub type sb_core::net::udp_nat::TargetAddr::Owned = T
pub fn sb_core::net::udp_nat::TargetAddr::clone_into(&self, target: &mut T)
pub fn sb_core::net::udp_nat::TargetAddr::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::udp_nat::TargetAddr where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat::TargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat::TargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::udp_nat::TargetAddr where T: core::clone::Clone
pub unsafe fn sb_core::net::udp_nat::TargetAddr::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat::TargetAddr
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat::TargetAddr
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat::TargetAddr
pub type sb_core::net::udp_nat::TargetAddr::Output = T
pub struct sb_core::net::udp_nat::NatEntry
pub sb_core::net::udp_nat::NatEntry::bytes_in: u64
pub sb_core::net::udp_nat::NatEntry::bytes_out: u64
pub sb_core::net::udp_nat::NatEntry::expiry: std::time::Instant
pub sb_core::net::udp_nat::NatEntry::gen: u64
pub sb_core::net::udp_nat::NatEntry::last_seen: std::time::Instant
pub sb_core::net::udp_nat::NatEntry::upstream: alloc::sync::Arc<tokio::net::udp::UdpSocket>
impl core::fmt::Debug for sb_core::net::udp_nat::NatEntry
pub fn sb_core::net::udp_nat::NatEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::net::udp_nat::NatEntry
impl core::marker::Send for sb_core::net::udp_nat::NatEntry
impl core::marker::Sync for sb_core::net::udp_nat::NatEntry
impl core::marker::Unpin for sb_core::net::udp_nat::NatEntry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat::NatEntry
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat::NatEntry
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat::NatEntry where U: core::convert::From<T>
pub fn sb_core::net::udp_nat::NatEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat::NatEntry where U: core::convert::Into<T>
pub type sb_core::net::udp_nat::NatEntry::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat::NatEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat::NatEntry where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat::NatEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat::NatEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::udp_nat::NatEntry where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat::NatEntry where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat::NatEntry where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::udp_nat::NatEntry
pub fn sb_core::net::udp_nat::NatEntry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat::NatEntry
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat::NatEntry
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat::NatEntry
pub type sb_core::net::udp_nat::NatEntry::Output = T
pub struct sb_core::net::udp_nat::NatKey
pub sb_core::net::udp_nat::NatKey::client: core::net::socket_addr::SocketAddr
pub sb_core::net::udp_nat::NatKey::dst: sb_core::net::udp_nat::TargetAddr
impl core::clone::Clone for sb_core::net::udp_nat::NatKey
pub fn sb_core::net::udp_nat::NatKey::clone(&self) -> sb_core::net::udp_nat::NatKey
impl core::cmp::Eq for sb_core::net::udp_nat::NatKey
impl core::cmp::PartialEq for sb_core::net::udp_nat::NatKey
pub fn sb_core::net::udp_nat::NatKey::eq(&self, other: &sb_core::net::udp_nat::NatKey) -> bool
impl core::fmt::Debug for sb_core::net::udp_nat::NatKey
pub fn sb_core::net::udp_nat::NatKey::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::udp_nat::NatKey
pub fn sb_core::net::udp_nat::NatKey::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::udp_nat::NatKey
impl core::marker::Freeze for sb_core::net::udp_nat::NatKey
impl core::marker::Send for sb_core::net::udp_nat::NatKey
impl core::marker::Sync for sb_core::net::udp_nat::NatKey
impl core::marker::Unpin for sb_core::net::udp_nat::NatKey
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat::NatKey
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat::NatKey
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::udp_nat::NatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatKey::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat::NatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat::NatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatKey::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::udp_nat::NatKey::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat::NatKey where U: core::convert::From<T>
pub fn sb_core::net::udp_nat::NatKey::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat::NatKey where U: core::convert::Into<T>
pub type sb_core::net::udp_nat::NatKey::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat::NatKey::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat::NatKey where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat::NatKey::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat::NatKey::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::udp_nat::NatKey where T: core::clone::Clone
pub type sb_core::net::udp_nat::NatKey::Owned = T
pub fn sb_core::net::udp_nat::NatKey::clone_into(&self, target: &mut T)
pub fn sb_core::net::udp_nat::NatKey::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::udp_nat::NatKey where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatKey::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat::NatKey where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatKey::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat::NatKey where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatKey::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::udp_nat::NatKey where T: core::clone::Clone
pub unsafe fn sb_core::net::udp_nat::NatKey::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::udp_nat::NatKey
pub fn sb_core::net::udp_nat::NatKey::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat::NatKey
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat::NatKey
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat::NatKey
pub type sb_core::net::udp_nat::NatKey::Output = T
pub struct sb_core::net::udp_nat::NatMap
impl sb_core::net::udp_nat::NatMap
pub fn sb_core::net::udp_nat::NatMap::add_in_bytes(&self, key: &sb_core::net::udp_nat::NatKey, n: usize)
pub fn sb_core::net::udp_nat::NatMap::add_out_bytes(&self, key: &sb_core::net::udp_nat::NatKey, n: usize)
pub async fn sb_core::net::udp_nat::NatMap::get_or_insert_with<F>(&self, key: sb_core::net::udp_nat::NatKey, make: F) -> alloc::sync::Arc<tokio::net::udp::UdpSocket> where F: core::ops::function::FnOnce() -> alloc::sync::Arc<tokio::net::udp::UdpSocket>
pub fn sb_core::net::udp_nat::NatMap::new(ttl: core::time::Duration, cap: usize) -> alloc::sync::Arc<Self>
pub async fn sb_core::net::udp_nat::NatMap::run_evictor(self: alloc::sync::Arc<Self>, period: core::time::Duration)
impl !core::marker::Freeze for sb_core::net::udp_nat::NatMap
impl core::marker::Send for sb_core::net::udp_nat::NatMap
impl core::marker::Sync for sb_core::net::udp_nat::NatMap
impl core::marker::Unpin for sb_core::net::udp_nat::NatMap
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat::NatMap
impl !core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat::NatMap
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat::NatMap where U: core::convert::From<T>
pub fn sb_core::net::udp_nat::NatMap::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat::NatMap where U: core::convert::Into<T>
pub type sb_core::net::udp_nat::NatMap::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat::NatMap::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat::NatMap where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat::NatMap::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat::NatMap::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::udp_nat::NatMap where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatMap::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat::NatMap where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatMap::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat::NatMap where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::NatMap::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::udp_nat::NatMap
pub fn sb_core::net::udp_nat::NatMap::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat::NatMap
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat::NatMap
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat::NatMap
pub type sb_core::net::udp_nat::NatMap::Output = T
pub mod sb_core::net::udp_nat_core
pub struct sb_core::net::udp_nat_core::UdpFlowKey
pub sb_core::net::udp_nat_core::UdpFlowKey::dst: core::net::socket_addr::SocketAddr
pub sb_core::net::udp_nat_core::UdpFlowKey::session_id: u64
pub sb_core::net::udp_nat_core::UdpFlowKey::src: core::net::socket_addr::SocketAddr
impl sb_core::net::udp_nat_core::UdpFlowKey
pub fn sb_core::net::udp_nat_core::UdpFlowKey::new(src: core::net::socket_addr::SocketAddr, dst: core::net::socket_addr::SocketAddr, session_id: u64) -> Self
impl core::clone::Clone for sb_core::net::udp_nat_core::UdpFlowKey
pub fn sb_core::net::udp_nat_core::UdpFlowKey::clone(&self) -> sb_core::net::udp_nat_core::UdpFlowKey
impl core::cmp::Eq for sb_core::net::udp_nat_core::UdpFlowKey
impl core::cmp::PartialEq for sb_core::net::udp_nat_core::UdpFlowKey
pub fn sb_core::net::udp_nat_core::UdpFlowKey::eq(&self, other: &sb_core::net::udp_nat_core::UdpFlowKey) -> bool
impl core::fmt::Debug for sb_core::net::udp_nat_core::UdpFlowKey
pub fn sb_core::net::udp_nat_core::UdpFlowKey::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::udp_nat_core::UdpFlowKey
pub fn sb_core::net::udp_nat_core::UdpFlowKey::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::udp_nat_core::UdpFlowKey
impl core::marker::Freeze for sb_core::net::udp_nat_core::UdpFlowKey
impl core::marker::Send for sb_core::net::udp_nat_core::UdpFlowKey
impl core::marker::Sync for sb_core::net::udp_nat_core::UdpFlowKey
impl core::marker::Unpin for sb_core::net::udp_nat_core::UdpFlowKey
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat_core::UdpFlowKey
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat_core::UdpFlowKey
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::udp_nat_core::UdpFlowKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpFlowKey::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat_core::UdpFlowKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat_core::UdpFlowKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpFlowKey::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::udp_nat_core::UdpFlowKey::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat_core::UdpFlowKey where U: core::convert::From<T>
pub fn sb_core::net::udp_nat_core::UdpFlowKey::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat_core::UdpFlowKey where U: core::convert::Into<T>
pub type sb_core::net::udp_nat_core::UdpFlowKey::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat_core::UdpFlowKey::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat_core::UdpFlowKey where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat_core::UdpFlowKey::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat_core::UdpFlowKey::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::udp_nat_core::UdpFlowKey where T: core::clone::Clone
pub type sb_core::net::udp_nat_core::UdpFlowKey::Owned = T
pub fn sb_core::net::udp_nat_core::UdpFlowKey::clone_into(&self, target: &mut T)
pub fn sb_core::net::udp_nat_core::UdpFlowKey::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::udp_nat_core::UdpFlowKey where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpFlowKey::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat_core::UdpFlowKey where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpFlowKey::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat_core::UdpFlowKey where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpFlowKey::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::udp_nat_core::UdpFlowKey where T: core::clone::Clone
pub unsafe fn sb_core::net::udp_nat_core::UdpFlowKey::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::udp_nat_core::UdpFlowKey
pub fn sb_core::net::udp_nat_core::UdpFlowKey::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat_core::UdpFlowKey
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat_core::UdpFlowKey
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat_core::UdpFlowKey
pub type sb_core::net::udp_nat_core::UdpFlowKey::Output = T
pub struct sb_core::net::udp_nat_core::UdpNat
impl sb_core::net::udp_nat_core::UdpNat
pub fn sb_core::net::udp_nat_core::UdpNat::active_sessions(&self) -> impl core::iter::traits::iterator::Iterator<Item = &sb_core::net::udp_nat_core::UdpSession>
pub fn sb_core::net::udp_nat_core::UdpNat::add_session_bytes(&mut self, flow_key: &sb_core::net::udp_nat_core::UdpFlowKey, tx_bytes: u64, rx_bytes: u64)
pub fn sb_core::net::udp_nat_core::UdpNat::clear(&mut self)
pub fn sb_core::net::udp_nat_core::UdpNat::create_mapping(&mut self, src: core::net::socket_addr::SocketAddr, dst: core::net::socket_addr::SocketAddr) -> sb_core::error::SbResult<core::net::socket_addr::SocketAddr>
pub fn sb_core::net::udp_nat_core::UdpNat::evict_expired(&mut self) -> usize
pub fn sb_core::net::udp_nat_core::UdpNat::evict_expired_batch(&mut self, limit: usize) -> usize
pub fn sb_core::net::udp_nat_core::UdpNat::lookup_session(&self, addr: &core::net::socket_addr::SocketAddr) -> core::option::Option<&sb_core::net::udp_nat_core::UdpSession>
pub fn sb_core::net::udp_nat_core::UdpNat::lookup_session_by_key(&self, flow_key: &sb_core::net::udp_nat_core::UdpFlowKey) -> core::option::Option<&sb_core::net::udp_nat_core::UdpSession>
pub fn sb_core::net::udp_nat_core::UdpNat::max_sessions(&self) -> usize
pub fn sb_core::net::udp_nat_core::UdpNat::new(max_sessions: usize, session_ttl: core::time::Duration) -> Self
pub fn sb_core::net::udp_nat_core::UdpNat::session_count(&self) -> usize
pub fn sb_core::net::udp_nat_core::UdpNat::session_ttl(&self) -> core::time::Duration
pub fn sb_core::net::udp_nat_core::UdpNat::update_activity(&mut self, flow_key: &sb_core::net::udp_nat_core::UdpFlowKey)
pub fn sb_core::net::udp_nat_core::UdpNat::update_activity_by_addr(&mut self, addr: &core::net::socket_addr::SocketAddr)
impl core::default::Default for sb_core::net::udp_nat_core::UdpNat
pub fn sb_core::net::udp_nat_core::UdpNat::default() -> Self
impl core::marker::Freeze for sb_core::net::udp_nat_core::UdpNat
impl core::marker::Send for sb_core::net::udp_nat_core::UdpNat
impl core::marker::Sync for sb_core::net::udp_nat_core::UdpNat
impl core::marker::Unpin for sb_core::net::udp_nat_core::UdpNat
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat_core::UdpNat
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat_core::UdpNat
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat_core::UdpNat where U: core::convert::From<T>
pub fn sb_core::net::udp_nat_core::UdpNat::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat_core::UdpNat where U: core::convert::Into<T>
pub type sb_core::net::udp_nat_core::UdpNat::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat_core::UdpNat::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat_core::UdpNat where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat_core::UdpNat::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat_core::UdpNat::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::udp_nat_core::UdpNat where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpNat::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat_core::UdpNat where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpNat::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat_core::UdpNat where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpNat::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::udp_nat_core::UdpNat
pub fn sb_core::net::udp_nat_core::UdpNat::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat_core::UdpNat
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat_core::UdpNat
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat_core::UdpNat
pub type sb_core::net::udp_nat_core::UdpNat::Output = T
pub struct sb_core::net::udp_nat_core::UdpSession
pub sb_core::net::udp_nat_core::UdpSession::created_at: std::time::Instant
pub sb_core::net::udp_nat_core::UdpSession::flow_key: sb_core::net::udp_nat_core::UdpFlowKey
pub sb_core::net::udp_nat_core::UdpSession::last_activity: std::time::Instant
pub sb_core::net::udp_nat_core::UdpSession::mapped_addr: core::net::socket_addr::SocketAddr
pub sb_core::net::udp_nat_core::UdpSession::rx_bytes: u64
pub sb_core::net::udp_nat_core::UdpSession::tx_bytes: u64
impl sb_core::net::udp_nat_core::UdpSession
pub fn sb_core::net::udp_nat_core::UdpSession::add_rx_bytes(&mut self, bytes: u64)
pub fn sb_core::net::udp_nat_core::UdpSession::add_tx_bytes(&mut self, bytes: u64)
pub fn sb_core::net::udp_nat_core::UdpSession::is_expired(&self, ttl: core::time::Duration) -> bool
pub fn sb_core::net::udp_nat_core::UdpSession::new(flow_key: sb_core::net::udp_nat_core::UdpFlowKey, mapped_addr: core::net::socket_addr::SocketAddr) -> Self
pub fn sb_core::net::udp_nat_core::UdpSession::total_bytes(&self) -> u64
pub fn sb_core::net::udp_nat_core::UdpSession::update_activity(&mut self)
impl core::fmt::Debug for sb_core::net::udp_nat_core::UdpSession
pub fn sb_core::net::udp_nat_core::UdpSession::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::net::udp_nat_core::UdpSession
impl core::marker::Send for sb_core::net::udp_nat_core::UdpSession
impl core::marker::Sync for sb_core::net::udp_nat_core::UdpSession
impl core::marker::Unpin for sb_core::net::udp_nat_core::UdpSession
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat_core::UdpSession
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat_core::UdpSession
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat_core::UdpSession where U: core::convert::From<T>
pub fn sb_core::net::udp_nat_core::UdpSession::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat_core::UdpSession where U: core::convert::Into<T>
pub type sb_core::net::udp_nat_core::UdpSession::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat_core::UdpSession::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat_core::UdpSession where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat_core::UdpSession::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat_core::UdpSession::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::udp_nat_core::UdpSession where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpSession::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat_core::UdpSession where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpSession::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat_core::UdpSession where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_core::UdpSession::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::udp_nat_core::UdpSession
pub fn sb_core::net::udp_nat_core::UdpSession::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat_core::UdpSession
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat_core::UdpSession
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat_core::UdpSession
pub type sb_core::net::udp_nat_core::UdpSession::Output = T
pub mod sb_core::net::udp_nat_v2
pub enum sb_core::net::udp_nat_v2::TargetAddr
pub sb_core::net::udp_nat_v2::TargetAddr::Ip(core::net::socket_addr::SocketAddr)
impl core::clone::Clone for sb_core::net::udp_nat_v2::TargetAddr
pub fn sb_core::net::udp_nat_v2::TargetAddr::clone(&self) -> sb_core::net::udp_nat_v2::TargetAddr
impl core::cmp::Eq for sb_core::net::udp_nat_v2::TargetAddr
impl core::cmp::PartialEq for sb_core::net::udp_nat_v2::TargetAddr
pub fn sb_core::net::udp_nat_v2::TargetAddr::eq(&self, other: &sb_core::net::udp_nat_v2::TargetAddr) -> bool
impl core::fmt::Debug for sb_core::net::udp_nat_v2::TargetAddr
pub fn sb_core::net::udp_nat_v2::TargetAddr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::udp_nat_v2::TargetAddr
pub fn sb_core::net::udp_nat_v2::TargetAddr::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::udp_nat_v2::TargetAddr
impl core::marker::Freeze for sb_core::net::udp_nat_v2::TargetAddr
impl core::marker::Send for sb_core::net::udp_nat_v2::TargetAddr
impl core::marker::Sync for sb_core::net::udp_nat_v2::TargetAddr
impl core::marker::Unpin for sb_core::net::udp_nat_v2::TargetAddr
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat_v2::TargetAddr
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat_v2::TargetAddr
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::udp_nat_v2::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::TargetAddr::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat_v2::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat_v2::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::TargetAddr::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::udp_nat_v2::TargetAddr::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat_v2::TargetAddr where U: core::convert::From<T>
pub fn sb_core::net::udp_nat_v2::TargetAddr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat_v2::TargetAddr where U: core::convert::Into<T>
pub type sb_core::net::udp_nat_v2::TargetAddr::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat_v2::TargetAddr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat_v2::TargetAddr where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat_v2::TargetAddr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat_v2::TargetAddr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::udp_nat_v2::TargetAddr where T: core::clone::Clone
pub type sb_core::net::udp_nat_v2::TargetAddr::Owned = T
pub fn sb_core::net::udp_nat_v2::TargetAddr::clone_into(&self, target: &mut T)
pub fn sb_core::net::udp_nat_v2::TargetAddr::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::udp_nat_v2::TargetAddr where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::TargetAddr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat_v2::TargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::TargetAddr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat_v2::TargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::TargetAddr::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::udp_nat_v2::TargetAddr where T: core::clone::Clone
pub unsafe fn sb_core::net::udp_nat_v2::TargetAddr::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::udp_nat_v2::TargetAddr
pub fn sb_core::net::udp_nat_v2::TargetAddr::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat_v2::TargetAddr
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat_v2::TargetAddr
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat_v2::TargetAddr
pub type sb_core::net::udp_nat_v2::TargetAddr::Output = T
pub struct sb_core::net::udp_nat_v2::NatEntry
pub sb_core::net::udp_nat_v2::NatEntry::bytes_in: u64
pub sb_core::net::udp_nat_v2::NatEntry::bytes_out: u64
pub sb_core::net::udp_nat_v2::NatEntry::expiry: std::time::Instant
pub sb_core::net::udp_nat_v2::NatEntry::gen: u64
pub sb_core::net::udp_nat_v2::NatEntry::last_seen: std::time::Instant
pub sb_core::net::udp_nat_v2::NatEntry::upstream: alloc::sync::Arc<tokio::net::udp::UdpSocket>
impl core::fmt::Debug for sb_core::net::udp_nat_v2::NatEntry
pub fn sb_core::net::udp_nat_v2::NatEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::net::udp_nat_v2::NatEntry
impl core::marker::Send for sb_core::net::udp_nat_v2::NatEntry
impl core::marker::Sync for sb_core::net::udp_nat_v2::NatEntry
impl core::marker::Unpin for sb_core::net::udp_nat_v2::NatEntry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat_v2::NatEntry
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat_v2::NatEntry
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat_v2::NatEntry where U: core::convert::From<T>
pub fn sb_core::net::udp_nat_v2::NatEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat_v2::NatEntry where U: core::convert::Into<T>
pub type sb_core::net::udp_nat_v2::NatEntry::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat_v2::NatEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat_v2::NatEntry where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat_v2::NatEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat_v2::NatEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::udp_nat_v2::NatEntry where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat_v2::NatEntry where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat_v2::NatEntry where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::udp_nat_v2::NatEntry
pub fn sb_core::net::udp_nat_v2::NatEntry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat_v2::NatEntry
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat_v2::NatEntry
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat_v2::NatEntry
pub type sb_core::net::udp_nat_v2::NatEntry::Output = T
pub struct sb_core::net::udp_nat_v2::NatKey
pub sb_core::net::udp_nat_v2::NatKey::client: core::net::socket_addr::SocketAddr
pub sb_core::net::udp_nat_v2::NatKey::dst: sb_core::net::udp_nat_v2::TargetAddr
impl core::clone::Clone for sb_core::net::udp_nat_v2::NatKey
pub fn sb_core::net::udp_nat_v2::NatKey::clone(&self) -> sb_core::net::udp_nat_v2::NatKey
impl core::cmp::Eq for sb_core::net::udp_nat_v2::NatKey
impl core::cmp::PartialEq for sb_core::net::udp_nat_v2::NatKey
pub fn sb_core::net::udp_nat_v2::NatKey::eq(&self, other: &sb_core::net::udp_nat_v2::NatKey) -> bool
impl core::fmt::Debug for sb_core::net::udp_nat_v2::NatKey
pub fn sb_core::net::udp_nat_v2::NatKey::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::udp_nat_v2::NatKey
pub fn sb_core::net::udp_nat_v2::NatKey::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::udp_nat_v2::NatKey
impl core::marker::Freeze for sb_core::net::udp_nat_v2::NatKey
impl core::marker::Send for sb_core::net::udp_nat_v2::NatKey
impl core::marker::Sync for sb_core::net::udp_nat_v2::NatKey
impl core::marker::Unpin for sb_core::net::udp_nat_v2::NatKey
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat_v2::NatKey
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat_v2::NatKey
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::udp_nat_v2::NatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatKey::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat_v2::NatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat_v2::NatKey where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatKey::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::udp_nat_v2::NatKey::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat_v2::NatKey where U: core::convert::From<T>
pub fn sb_core::net::udp_nat_v2::NatKey::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat_v2::NatKey where U: core::convert::Into<T>
pub type sb_core::net::udp_nat_v2::NatKey::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat_v2::NatKey::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat_v2::NatKey where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat_v2::NatKey::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat_v2::NatKey::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::udp_nat_v2::NatKey where T: core::clone::Clone
pub type sb_core::net::udp_nat_v2::NatKey::Owned = T
pub fn sb_core::net::udp_nat_v2::NatKey::clone_into(&self, target: &mut T)
pub fn sb_core::net::udp_nat_v2::NatKey::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::udp_nat_v2::NatKey where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatKey::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat_v2::NatKey where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatKey::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat_v2::NatKey where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatKey::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::udp_nat_v2::NatKey where T: core::clone::Clone
pub unsafe fn sb_core::net::udp_nat_v2::NatKey::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::udp_nat_v2::NatKey
pub fn sb_core::net::udp_nat_v2::NatKey::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat_v2::NatKey
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat_v2::NatKey
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat_v2::NatKey
pub type sb_core::net::udp_nat_v2::NatKey::Output = T
pub struct sb_core::net::udp_nat_v2::NatMap
impl sb_core::net::udp_nat_v2::NatMap
pub fn sb_core::net::udp_nat_v2::NatMap::add_in_bytes(&self, key: &sb_core::net::udp_nat_v2::NatKey, n: usize)
pub fn sb_core::net::udp_nat_v2::NatMap::add_out_bytes(&self, key: &sb_core::net::udp_nat_v2::NatKey, n: usize)
pub async fn sb_core::net::udp_nat_v2::NatMap::get_or_insert_with<F>(&self, key: sb_core::net::udp_nat_v2::NatKey, make: F) -> alloc::sync::Arc<tokio::net::udp::UdpSocket> where F: core::ops::function::FnOnce() -> alloc::sync::Arc<tokio::net::udp::UdpSocket>
pub fn sb_core::net::udp_nat_v2::NatMap::new(ttl: core::time::Duration, cap: usize) -> alloc::sync::Arc<Self>
pub async fn sb_core::net::udp_nat_v2::NatMap::run_evictor(self: alloc::sync::Arc<Self>, period: core::time::Duration)
impl !core::marker::Freeze for sb_core::net::udp_nat_v2::NatMap
impl core::marker::Send for sb_core::net::udp_nat_v2::NatMap
impl core::marker::Sync for sb_core::net::udp_nat_v2::NatMap
impl core::marker::Unpin for sb_core::net::udp_nat_v2::NatMap
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat_v2::NatMap
impl !core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat_v2::NatMap
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat_v2::NatMap where U: core::convert::From<T>
pub fn sb_core::net::udp_nat_v2::NatMap::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat_v2::NatMap where U: core::convert::Into<T>
pub type sb_core::net::udp_nat_v2::NatMap::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat_v2::NatMap::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat_v2::NatMap where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat_v2::NatMap::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat_v2::NatMap::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::udp_nat_v2::NatMap where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatMap::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat_v2::NatMap where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatMap::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat_v2::NatMap where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat_v2::NatMap::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::udp_nat_v2::NatMap
pub fn sb_core::net::udp_nat_v2::NatMap::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat_v2::NatMap
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat_v2::NatMap
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat_v2::NatMap
pub type sb_core::net::udp_nat_v2::NatMap::Output = T
pub mod sb_core::net::udp_processor
pub struct sb_core::net::udp_processor::UdpPacket
pub sb_core::net::udp_processor::UdpPacket::data: alloc::vec::Vec<u8>
pub sb_core::net::udp_processor::UdpPacket::dst: core::net::socket_addr::SocketAddr
pub sb_core::net::udp_processor::UdpPacket::src: core::net::socket_addr::SocketAddr
impl sb_core::net::udp_processor::UdpPacket
pub fn sb_core::net::udp_processor::UdpPacket::new(src: core::net::socket_addr::SocketAddr, dst: core::net::socket_addr::SocketAddr, data: alloc::vec::Vec<u8>) -> Self
pub fn sb_core::net::udp_processor::UdpPacket::size(&self) -> usize
impl core::clone::Clone for sb_core::net::udp_processor::UdpPacket
pub fn sb_core::net::udp_processor::UdpPacket::clone(&self) -> sb_core::net::udp_processor::UdpPacket
impl core::fmt::Debug for sb_core::net::udp_processor::UdpPacket
pub fn sb_core::net::udp_processor::UdpPacket::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::net::udp_processor::UdpPacket
impl core::marker::Send for sb_core::net::udp_processor::UdpPacket
impl core::marker::Sync for sb_core::net::udp_processor::UdpPacket
impl core::marker::Unpin for sb_core::net::udp_processor::UdpPacket
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_processor::UdpPacket
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_processor::UdpPacket
impl<T, U> core::convert::Into<U> for sb_core::net::udp_processor::UdpPacket where U: core::convert::From<T>
pub fn sb_core::net::udp_processor::UdpPacket::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_processor::UdpPacket where U: core::convert::Into<T>
pub type sb_core::net::udp_processor::UdpPacket::Error = core::convert::Infallible
pub fn sb_core::net::udp_processor::UdpPacket::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_processor::UdpPacket where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_processor::UdpPacket::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_processor::UdpPacket::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::udp_processor::UdpPacket where T: core::clone::Clone
pub type sb_core::net::udp_processor::UdpPacket::Owned = T
pub fn sb_core::net::udp_processor::UdpPacket::clone_into(&self, target: &mut T)
pub fn sb_core::net::udp_processor::UdpPacket::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::udp_processor::UdpPacket where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_processor::UdpPacket::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_processor::UdpPacket where T: ?core::marker::Sized
pub fn sb_core::net::udp_processor::UdpPacket::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_processor::UdpPacket where T: ?core::marker::Sized
pub fn sb_core::net::udp_processor::UdpPacket::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::udp_processor::UdpPacket where T: core::clone::Clone
pub unsafe fn sb_core::net::udp_processor::UdpPacket::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::udp_processor::UdpPacket
pub fn sb_core::net::udp_processor::UdpPacket::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_processor::UdpPacket
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_processor::UdpPacket
impl<T> typenum::type_operators::Same for sb_core::net::udp_processor::UdpPacket
pub type sb_core::net::udp_processor::UdpPacket::Output = T
pub struct sb_core::net::udp_processor::UdpProcessor
impl sb_core::net::udp_processor::UdpProcessor
pub async fn sb_core::net::udp_processor::UdpProcessor::cleanup_expired(&self) -> usize
pub async fn sb_core::net::udp_processor::UdpProcessor::clear_sessions(&self)
pub fn sb_core::net::udp_processor::UdpProcessor::from_env() -> (Self, core::time::Duration)
pub async fn sb_core::net::udp_processor::UdpProcessor::get_config(&self) -> (usize, core::time::Duration)
pub async fn sb_core::net::udp_processor::UdpProcessor::lookup_session(&self, mapped_addr: &core::net::socket_addr::SocketAddr) -> core::option::Option<sb_core::net::udp_nat_core::UdpFlowKey>
pub fn sb_core::net::udp_processor::UdpProcessor::new(max_sessions: usize, session_ttl: core::time::Duration) -> Self
pub async fn sb_core::net::udp_processor::UdpProcessor::process_inbound(&self, packet: sb_core::net::udp_processor::UdpPacket) -> sb_core::error::SbResult<core::net::socket_addr::SocketAddr>
pub async fn sb_core::net::udp_processor::UdpProcessor::process_outbound(&self, packet: sb_core::net::udp_processor::UdpPacket, mapped_addr: core::net::socket_addr::SocketAddr) -> sb_core::error::SbResult<core::option::Option<core::net::socket_addr::SocketAddr>>
pub async fn sb_core::net::udp_processor::UdpProcessor::session_count(&self) -> usize
pub fn sb_core::net::udp_processor::UdpProcessor::start_cleanup_task(self: alloc::sync::Arc<Self>, cleanup_interval: core::time::Duration)
pub async fn sb_core::net::udp_processor::UdpProcessor::update_activity(&self, mapped_addr: &core::net::socket_addr::SocketAddr)
impl core::default::Default for sb_core::net::udp_processor::UdpProcessor
pub fn sb_core::net::udp_processor::UdpProcessor::default() -> Self
impl core::marker::Freeze for sb_core::net::udp_processor::UdpProcessor
impl core::marker::Send for sb_core::net::udp_processor::UdpProcessor
impl core::marker::Sync for sb_core::net::udp_processor::UdpProcessor
impl core::marker::Unpin for sb_core::net::udp_processor::UdpProcessor
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_processor::UdpProcessor
impl !core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_processor::UdpProcessor
impl<T, U> core::convert::Into<U> for sb_core::net::udp_processor::UdpProcessor where U: core::convert::From<T>
pub fn sb_core::net::udp_processor::UdpProcessor::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_processor::UdpProcessor where U: core::convert::Into<T>
pub type sb_core::net::udp_processor::UdpProcessor::Error = core::convert::Infallible
pub fn sb_core::net::udp_processor::UdpProcessor::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_processor::UdpProcessor where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_processor::UdpProcessor::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_processor::UdpProcessor::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::udp_processor::UdpProcessor where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_processor::UdpProcessor::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_processor::UdpProcessor where T: ?core::marker::Sized
pub fn sb_core::net::udp_processor::UdpProcessor::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_processor::UdpProcessor where T: ?core::marker::Sized
pub fn sb_core::net::udp_processor::UdpProcessor::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::udp_processor::UdpProcessor
pub fn sb_core::net::udp_processor::UdpProcessor::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_processor::UdpProcessor
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_processor::UdpProcessor
impl<T> typenum::type_operators::Same for sb_core::net::udp_processor::UdpProcessor
pub type sb_core::net::udp_processor::UdpProcessor::Output = T
pub mod sb_core::net::util
pub enum sb_core::net::util::Address
pub sb_core::net::util::Address::Domain(alloc::string::String, u16)
pub sb_core::net::util::Address::Ip(core::net::socket_addr::SocketAddr)
impl core::clone::Clone for sb_core::net::util::Address
pub fn sb_core::net::util::Address::clone(&self) -> sb_core::net::util::Address
impl core::fmt::Debug for sb_core::net::util::Address
pub fn sb_core::net::util::Address::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::net::util::Address
impl core::marker::Send for sb_core::net::util::Address
impl core::marker::Sync for sb_core::net::util::Address
impl core::marker::Unpin for sb_core::net::util::Address
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::util::Address
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::util::Address
impl<T, U> core::convert::Into<U> for sb_core::net::util::Address where U: core::convert::From<T>
pub fn sb_core::net::util::Address::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::util::Address where U: core::convert::Into<T>
pub type sb_core::net::util::Address::Error = core::convert::Infallible
pub fn sb_core::net::util::Address::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::util::Address where U: core::convert::TryFrom<T>
pub type sb_core::net::util::Address::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::util::Address::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::util::Address where T: core::clone::Clone
pub type sb_core::net::util::Address::Owned = T
pub fn sb_core::net::util::Address::clone_into(&self, target: &mut T)
pub fn sb_core::net::util::Address::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::util::Address where T: 'static + ?core::marker::Sized
pub fn sb_core::net::util::Address::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::util::Address where T: ?core::marker::Sized
pub fn sb_core::net::util::Address::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::util::Address where T: ?core::marker::Sized
pub fn sb_core::net::util::Address::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::util::Address where T: core::clone::Clone
pub unsafe fn sb_core::net::util::Address::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::util::Address
pub fn sb_core::net::util::Address::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::util::Address
impl<T> tracing::instrument::WithSubscriber for sb_core::net::util::Address
impl<T> typenum::type_operators::Same for sb_core::net::util::Address
pub type sb_core::net::util::Address::Output = T
pub enum sb_core::net::Address
pub sb_core::net::Address::Domain(alloc::string::String, u16)
pub sb_core::net::Address::Ip(core::net::socket_addr::SocketAddr)
impl core::clone::Clone for sb_core::net::util::Address
pub fn sb_core::net::util::Address::clone(&self) -> sb_core::net::util::Address
impl core::fmt::Debug for sb_core::net::util::Address
pub fn sb_core::net::util::Address::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::net::util::Address
impl core::marker::Send for sb_core::net::util::Address
impl core::marker::Sync for sb_core::net::util::Address
impl core::marker::Unpin for sb_core::net::util::Address
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::util::Address
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::util::Address
impl<T, U> core::convert::Into<U> for sb_core::net::util::Address where U: core::convert::From<T>
pub fn sb_core::net::util::Address::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::util::Address where U: core::convert::Into<T>
pub type sb_core::net::util::Address::Error = core::convert::Infallible
pub fn sb_core::net::util::Address::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::util::Address where U: core::convert::TryFrom<T>
pub type sb_core::net::util::Address::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::util::Address::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::util::Address where T: core::clone::Clone
pub type sb_core::net::util::Address::Owned = T
pub fn sb_core::net::util::Address::clone_into(&self, target: &mut T)
pub fn sb_core::net::util::Address::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::util::Address where T: 'static + ?core::marker::Sized
pub fn sb_core::net::util::Address::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::util::Address where T: ?core::marker::Sized
pub fn sb_core::net::util::Address::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::util::Address where T: ?core::marker::Sized
pub fn sb_core::net::util::Address::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::util::Address where T: core::clone::Clone
pub unsafe fn sb_core::net::util::Address::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::util::Address
pub fn sb_core::net::util::Address::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::util::Address
impl<T> tracing::instrument::WithSubscriber for sb_core::net::util::Address
impl<T> typenum::type_operators::Same for sb_core::net::util::Address
pub type sb_core::net::util::Address::Output = T
pub struct sb_core::net::RateLimiter
impl sb_core::net::rate_limit::RateLimiter
pub fn sb_core::net::rate_limit::RateLimiter::allow(&self, sz: usize) -> core::result::Result<(), &'static str>
pub fn sb_core::net::rate_limit::RateLimiter::from_env_udp() -> core::option::Option<Self>
impl !core::marker::Freeze for sb_core::net::rate_limit::RateLimiter
impl core::marker::Send for sb_core::net::rate_limit::RateLimiter
impl core::marker::Sync for sb_core::net::rate_limit::RateLimiter
impl core::marker::Unpin for sb_core::net::rate_limit::RateLimiter
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::rate_limit::RateLimiter
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::rate_limit::RateLimiter
impl<T, U> core::convert::Into<U> for sb_core::net::rate_limit::RateLimiter where U: core::convert::From<T>
pub fn sb_core::net::rate_limit::RateLimiter::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::rate_limit::RateLimiter where U: core::convert::Into<T>
pub type sb_core::net::rate_limit::RateLimiter::Error = core::convert::Infallible
pub fn sb_core::net::rate_limit::RateLimiter::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::rate_limit::RateLimiter where U: core::convert::TryFrom<T>
pub type sb_core::net::rate_limit::RateLimiter::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::rate_limit::RateLimiter::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::net::rate_limit::RateLimiter where T: 'static + ?core::marker::Sized
pub fn sb_core::net::rate_limit::RateLimiter::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::rate_limit::RateLimiter where T: ?core::marker::Sized
pub fn sb_core::net::rate_limit::RateLimiter::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::rate_limit::RateLimiter where T: ?core::marker::Sized
pub fn sb_core::net::rate_limit::RateLimiter::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::net::rate_limit::RateLimiter
pub fn sb_core::net::rate_limit::RateLimiter::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::rate_limit::RateLimiter
impl<T> tracing::instrument::WithSubscriber for sb_core::net::rate_limit::RateLimiter
impl<T> typenum::type_operators::Same for sb_core::net::rate_limit::RateLimiter
pub type sb_core::net::rate_limit::RateLimiter::Output = T
pub mod sb_core::obs
pub mod sb_core::obs::access
pub fn sb_core::obs::access::log(event: &str, kv: &[(&str, alloc::string::String)])
pub mod sb_core::observe
pub async fn sb_core::observe::with_observation<T, E, F, Fut>(selector: &sb_core::outbound::selector::Selector, pool_name: &str, endpoint_index: usize, f: F) -> core::result::Result<T, E> where F: core::ops::function::FnOnce() -> Fut, Fut: core::future::future::Future<Output = core::result::Result<T, E>>
pub async fn sb_core::observe::with_pool_observation<T, E, F, Fut>(_selector: &sb_core::outbound::selector::PoolSelector, pool_name: &str, endpoint_index: usize, f: F) -> core::result::Result<T, E> where F: core::ops::function::FnOnce() -> Fut, Fut: core::future::future::Future<Output = core::result::Result<T, E>>
pub mod sb_core::outbound
pub mod sb_core::outbound::address
pub enum sb_core::outbound::address::Addr
pub sb_core::outbound::address::Addr::Domain(alloc::string::String)
pub sb_core::outbound::address::Addr::V4(core::net::ip_addr::Ipv4Addr)
pub sb_core::outbound::address::Addr::V6(core::net::ip_addr::Ipv6Addr)
impl sb_core::outbound::address::Addr
pub fn sb_core::outbound::address::Addr::from_target_addr(target: &sb_core::net::udp_nat::TargetAddr) -> Self
impl core::clone::Clone for sb_core::outbound::address::Addr
pub fn sb_core::outbound::address::Addr::clone(&self) -> sb_core::outbound::address::Addr
impl core::fmt::Debug for sb_core::outbound::address::Addr
pub fn sb_core::outbound::address::Addr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::address::Addr
impl core::marker::Send for sb_core::outbound::address::Addr
impl core::marker::Sync for sb_core::outbound::address::Addr
impl core::marker::Unpin for sb_core::outbound::address::Addr
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::address::Addr
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::address::Addr
impl<T, U> core::convert::Into<U> for sb_core::outbound::address::Addr where U: core::convert::From<T>
pub fn sb_core::outbound::address::Addr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::address::Addr where U: core::convert::Into<T>
pub type sb_core::outbound::address::Addr::Error = core::convert::Infallible
pub fn sb_core::outbound::address::Addr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::address::Addr where U: core::convert::TryFrom<T>
pub type sb_core::outbound::address::Addr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::address::Addr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::address::Addr where T: core::clone::Clone
pub type sb_core::outbound::address::Addr::Owned = T
pub fn sb_core::outbound::address::Addr::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::address::Addr::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::address::Addr where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::address::Addr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::address::Addr where T: ?core::marker::Sized
pub fn sb_core::outbound::address::Addr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::address::Addr where T: ?core::marker::Sized
pub fn sb_core::outbound::address::Addr::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::address::Addr where T: core::clone::Clone
pub unsafe fn sb_core::outbound::address::Addr::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::address::Addr
pub fn sb_core::outbound::address::Addr::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::address::Addr
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::address::Addr
impl<T> typenum::type_operators::Same for sb_core::outbound::address::Addr
pub type sb_core::outbound::address::Addr::Output = T
pub fn sb_core::outbound::address::encode_ss_addr(addr: &sb_core::outbound::address::Addr, port: u16, buf: &mut alloc::vec::Vec<u8>)
pub fn sb_core::outbound::address::get_port_from_target(target: &sb_core::net::udp_nat::TargetAddr) -> u16
pub mod sb_core::outbound::crypto_types
pub enum sb_core::outbound::crypto_types::OutboundKind
pub sb_core::outbound::crypto_types::OutboundKind::Block
pub sb_core::outbound::crypto_types::OutboundKind::Direct
pub sb_core::outbound::crypto_types::OutboundKind::Http
pub sb_core::outbound::crypto_types::OutboundKind::Socks
impl core::clone::Clone for sb_core::outbound::crypto_types::OutboundKind
pub fn sb_core::outbound::crypto_types::OutboundKind::clone(&self) -> sb_core::outbound::crypto_types::OutboundKind
impl core::cmp::Eq for sb_core::outbound::crypto_types::OutboundKind
impl core::cmp::PartialEq for sb_core::outbound::crypto_types::OutboundKind
pub fn sb_core::outbound::crypto_types::OutboundKind::eq(&self, other: &sb_core::outbound::crypto_types::OutboundKind) -> bool
impl core::fmt::Debug for sb_core::outbound::crypto_types::OutboundKind
pub fn sb_core::outbound::crypto_types::OutboundKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::outbound::crypto_types::OutboundKind
pub fn sb_core::outbound::crypto_types::OutboundKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::outbound::crypto_types::OutboundKind
impl core::marker::Freeze for sb_core::outbound::crypto_types::OutboundKind
impl core::marker::Send for sb_core::outbound::crypto_types::OutboundKind
impl core::marker::Sync for sb_core::outbound::crypto_types::OutboundKind
impl core::marker::Unpin for sb_core::outbound::crypto_types::OutboundKind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::crypto_types::OutboundKind
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::crypto_types::OutboundKind
impl<Q, K> equivalent::Equivalent<K> for sb_core::outbound::crypto_types::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::OutboundKind::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::crypto_types::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::crypto_types::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::OutboundKind::equivalent(&self, key: &K) -> bool
pub fn sb_core::outbound::crypto_types::OutboundKind::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::outbound::crypto_types::OutboundKind where U: core::convert::From<T>
pub fn sb_core::outbound::crypto_types::OutboundKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::crypto_types::OutboundKind where U: core::convert::Into<T>
pub type sb_core::outbound::crypto_types::OutboundKind::Error = core::convert::Infallible
pub fn sb_core::outbound::crypto_types::OutboundKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::crypto_types::OutboundKind where U: core::convert::TryFrom<T>
pub type sb_core::outbound::crypto_types::OutboundKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::crypto_types::OutboundKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::crypto_types::OutboundKind where T: core::clone::Clone
pub type sb_core::outbound::crypto_types::OutboundKind::Owned = T
pub fn sb_core::outbound::crypto_types::OutboundKind::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::crypto_types::OutboundKind::to_owned(&self) -> T
impl<T> alloc::string::ToString for sb_core::outbound::crypto_types::OutboundKind where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::OutboundKind::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::outbound::crypto_types::OutboundKind where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::OutboundKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::crypto_types::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::OutboundKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::crypto_types::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::OutboundKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::crypto_types::OutboundKind where T: core::clone::Clone
pub unsafe fn sb_core::outbound::crypto_types::OutboundKind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::crypto_types::OutboundKind
pub fn sb_core::outbound::crypto_types::OutboundKind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::crypto_types::OutboundKind
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::crypto_types::OutboundKind
impl<T> typenum::type_operators::Same for sb_core::outbound::crypto_types::OutboundKind
pub type sb_core::outbound::crypto_types::OutboundKind::Output = T
pub struct sb_core::outbound::crypto_types::HostPort
pub sb_core::outbound::crypto_types::HostPort::host: alloc::string::String
pub sb_core::outbound::crypto_types::HostPort::port: u16
impl sb_core::outbound::crypto_types::HostPort
pub fn sb_core::outbound::crypto_types::HostPort::from_domain(domain: &str, port: u16) -> Self
pub fn sb_core::outbound::crypto_types::HostPort::new(host: alloc::string::String, port: u16) -> Self
impl core::clone::Clone for sb_core::outbound::crypto_types::HostPort
pub fn sb_core::outbound::crypto_types::HostPort::clone(&self) -> sb_core::outbound::crypto_types::HostPort
impl core::fmt::Debug for sb_core::outbound::crypto_types::HostPort
pub fn sb_core::outbound::crypto_types::HostPort::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::outbound::crypto_types::HostPort
pub fn sb_core::outbound::crypto_types::HostPort::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::crypto_types::HostPort
impl core::marker::Send for sb_core::outbound::crypto_types::HostPort
impl core::marker::Sync for sb_core::outbound::crypto_types::HostPort
impl core::marker::Unpin for sb_core::outbound::crypto_types::HostPort
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::crypto_types::HostPort
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::crypto_types::HostPort
impl<T, U> core::convert::Into<U> for sb_core::outbound::crypto_types::HostPort where U: core::convert::From<T>
pub fn sb_core::outbound::crypto_types::HostPort::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::crypto_types::HostPort where U: core::convert::Into<T>
pub type sb_core::outbound::crypto_types::HostPort::Error = core::convert::Infallible
pub fn sb_core::outbound::crypto_types::HostPort::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::crypto_types::HostPort where U: core::convert::TryFrom<T>
pub type sb_core::outbound::crypto_types::HostPort::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::crypto_types::HostPort::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::crypto_types::HostPort where T: core::clone::Clone
pub type sb_core::outbound::crypto_types::HostPort::Owned = T
pub fn sb_core::outbound::crypto_types::HostPort::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::crypto_types::HostPort::to_owned(&self) -> T
impl<T> alloc::string::ToString for sb_core::outbound::crypto_types::HostPort where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::HostPort::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::outbound::crypto_types::HostPort where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::HostPort::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::crypto_types::HostPort where T: ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::HostPort::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::crypto_types::HostPort where T: ?core::marker::Sized
pub fn sb_core::outbound::crypto_types::HostPort::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::crypto_types::HostPort where T: core::clone::Clone
pub unsafe fn sb_core::outbound::crypto_types::HostPort::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::crypto_types::HostPort
pub fn sb_core::outbound::crypto_types::HostPort::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::crypto_types::HostPort
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::crypto_types::HostPort
impl<T> typenum::type_operators::Same for sb_core::outbound::crypto_types::HostPort
pub type sb_core::outbound::crypto_types::HostPort::Output = T
pub trait sb_core::outbound::crypto_types::OutboundTcp: core::marker::Send + core::marker::Sync
pub type sb_core::outbound::crypto_types::OutboundTcp::IO: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin + core::marker::Send + 'static
pub fn sb_core::outbound::crypto_types::OutboundTcp::connect<'life0, 'life1, 'async_trait>(&'life0 self, target: &'life1 sb_core::outbound::crypto_types::HostPort) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = std::io::error::Result<Self::IO>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::crypto_types::OutboundTcp::protocol_name(&self) -> &'static str
pub trait sb_core::outbound::crypto_types::OutboundUdp: core::marker::Send + core::marker::Sync
pub fn sb_core::outbound::crypto_types::OutboundUdp::bind<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = std::io::error::Result<tokio::net::udp::UdpSocket>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::outbound::crypto_types::OutboundUdp::connect_addr<'life0, 'life1, 'async_trait>(&'life0 self, _peer: &'life1 core::net::socket_addr::SocketAddr) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = std::io::error::Result<()>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::crypto_types::OutboundUdp::protocol_name(&self) -> &'static str
pub mod sb_core::outbound::direct_connector
pub struct sb_core::outbound::direct_connector::DirectConnector
impl sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::new() -> Self
pub fn sb_core::outbound::direct_connector::DirectConnector::with_timeout(connect_timeout: core::time::Duration) -> Self
impl core::clone::Clone for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::clone(&self) -> sb_core::outbound::direct_connector::DirectConnector
impl core::default::Default for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::default() -> Self
impl core::fmt::Debug for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl sb_core::outbound::traits::OutboundConnector for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_tcp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_udp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<alloc::boxed::Box<dyn sb_core::outbound::traits::UdpTransport>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::outbound::direct_connector::DirectConnector
impl core::marker::Send for sb_core::outbound::direct_connector::DirectConnector
impl core::marker::Sync for sb_core::outbound::direct_connector::DirectConnector
impl core::marker::Unpin for sb_core::outbound::direct_connector::DirectConnector
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::direct_connector::DirectConnector
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::direct_connector::DirectConnector
impl<T, U> core::convert::Into<U> for sb_core::outbound::direct_connector::DirectConnector where U: core::convert::From<T>
pub fn sb_core::outbound::direct_connector::DirectConnector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::direct_connector::DirectConnector where U: core::convert::Into<T>
pub type sb_core::outbound::direct_connector::DirectConnector::Error = core::convert::Infallible
pub fn sb_core::outbound::direct_connector::DirectConnector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::direct_connector::DirectConnector where U: core::convert::TryFrom<T>
pub type sb_core::outbound::direct_connector::DirectConnector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::direct_connector::DirectConnector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::direct_connector::DirectConnector where T: core::clone::Clone
pub type sb_core::outbound::direct_connector::DirectConnector::Owned = T
pub fn sb_core::outbound::direct_connector::DirectConnector::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::direct_connector::DirectConnector::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::direct_connector::DirectConnector where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectConnector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::direct_connector::DirectConnector where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectConnector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::direct_connector::DirectConnector where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectConnector::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::direct_connector::DirectConnector where T: core::clone::Clone
pub unsafe fn sb_core::outbound::direct_connector::DirectConnector::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::direct_connector::DirectConnector
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::direct_connector::DirectConnector
impl<T> typenum::type_operators::Same for sb_core::outbound::direct_connector::DirectConnector
pub type sb_core::outbound::direct_connector::DirectConnector::Output = T
pub struct sb_core::outbound::direct_connector::DirectUdpTransport
impl sb_core::outbound::traits::UdpTransport for sb_core::outbound::direct_connector::DirectUdpTransport
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::recv_from<'life0, 'life1, 'async_trait>(&'life0 self, buf: &'life1 mut [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<(usize, core::net::socket_addr::SocketAddr)>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::send_to<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, buf: &'life1 [u8], dst: &'life2 sb_core::types::Endpoint) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<usize>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait
impl !core::marker::Freeze for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::marker::Send for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::marker::Sync for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::marker::Unpin for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::direct_connector::DirectUdpTransport
impl<T, U> core::convert::Into<U> for sb_core::outbound::direct_connector::DirectUdpTransport where U: core::convert::From<T>
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::direct_connector::DirectUdpTransport where U: core::convert::Into<T>
pub type sb_core::outbound::direct_connector::DirectUdpTransport::Error = core::convert::Infallible
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::direct_connector::DirectUdpTransport where U: core::convert::TryFrom<T>
pub type sb_core::outbound::direct_connector::DirectUdpTransport::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::direct_connector::DirectUdpTransport where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::direct_connector::DirectUdpTransport where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::direct_connector::DirectUdpTransport where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::direct_connector::DirectUdpTransport
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::direct_connector::DirectUdpTransport
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::direct_connector::DirectUdpTransport
impl<T> typenum::type_operators::Same for sb_core::outbound::direct_connector::DirectUdpTransport
pub type sb_core::outbound::direct_connector::DirectUdpTransport::Output = T
pub mod sb_core::outbound::endpoint
pub enum sb_core::outbound::endpoint::ProxyKind
pub sb_core::outbound::endpoint::ProxyKind::Http
pub sb_core::outbound::endpoint::ProxyKind::Socks5
impl core::clone::Clone for sb_core::outbound::endpoint::ProxyKind
pub fn sb_core::outbound::endpoint::ProxyKind::clone(&self) -> sb_core::outbound::endpoint::ProxyKind
impl core::cmp::Eq for sb_core::outbound::endpoint::ProxyKind
impl core::cmp::PartialEq for sb_core::outbound::endpoint::ProxyKind
pub fn sb_core::outbound::endpoint::ProxyKind::eq(&self, other: &sb_core::outbound::endpoint::ProxyKind) -> bool
impl core::fmt::Debug for sb_core::outbound::endpoint::ProxyKind
pub fn sb_core::outbound::endpoint::ProxyKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for sb_core::outbound::endpoint::ProxyKind
impl core::marker::StructuralPartialEq for sb_core::outbound::endpoint::ProxyKind
impl core::marker::Freeze for sb_core::outbound::endpoint::ProxyKind
impl core::marker::Send for sb_core::outbound::endpoint::ProxyKind
impl core::marker::Sync for sb_core::outbound::endpoint::ProxyKind
impl core::marker::Unpin for sb_core::outbound::endpoint::ProxyKind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::endpoint::ProxyKind
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::endpoint::ProxyKind
impl<Q, K> equivalent::Equivalent<K> for sb_core::outbound::endpoint::ProxyKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyKind::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::endpoint::ProxyKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::endpoint::ProxyKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyKind::equivalent(&self, key: &K) -> bool
pub fn sb_core::outbound::endpoint::ProxyKind::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::outbound::endpoint::ProxyKind where U: core::convert::From<T>
pub fn sb_core::outbound::endpoint::ProxyKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::endpoint::ProxyKind where U: core::convert::Into<T>
pub type sb_core::outbound::endpoint::ProxyKind::Error = core::convert::Infallible
pub fn sb_core::outbound::endpoint::ProxyKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::endpoint::ProxyKind where U: core::convert::TryFrom<T>
pub type sb_core::outbound::endpoint::ProxyKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::endpoint::ProxyKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::endpoint::ProxyKind where T: core::clone::Clone
pub type sb_core::outbound::endpoint::ProxyKind::Owned = T
pub fn sb_core::outbound::endpoint::ProxyKind::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::endpoint::ProxyKind::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::endpoint::ProxyKind where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::endpoint::ProxyKind where T: ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::endpoint::ProxyKind where T: ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::endpoint::ProxyKind where T: core::clone::Clone
pub unsafe fn sb_core::outbound::endpoint::ProxyKind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::endpoint::ProxyKind
pub fn sb_core::outbound::endpoint::ProxyKind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::endpoint::ProxyKind
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::endpoint::ProxyKind
impl<T> typenum::type_operators::Same for sb_core::outbound::endpoint::ProxyKind
pub type sb_core::outbound::endpoint::ProxyKind::Output = T
pub struct sb_core::outbound::endpoint::ProxyEndpoint
pub sb_core::outbound::endpoint::ProxyEndpoint::addr: core::net::socket_addr::SocketAddr
pub sb_core::outbound::endpoint::ProxyEndpoint::auth: core::option::Option<(alloc::string::String, alloc::string::String)>
pub sb_core::outbound::endpoint::ProxyEndpoint::half_open_ms: u64
pub sb_core::outbound::endpoint::ProxyEndpoint::kind: sb_core::outbound::endpoint::ProxyKind
pub sb_core::outbound::endpoint::ProxyEndpoint::max_fail: u32
pub sb_core::outbound::endpoint::ProxyEndpoint::open_ms: u64
pub sb_core::outbound::endpoint::ProxyEndpoint::weight: u32
impl sb_core::outbound::endpoint::ProxyEndpoint
pub fn sb_core::outbound::endpoint::ProxyEndpoint::parse(s: &str) -> core::option::Option<Self>
impl core::clone::Clone for sb_core::outbound::endpoint::ProxyEndpoint
pub fn sb_core::outbound::endpoint::ProxyEndpoint::clone(&self) -> sb_core::outbound::endpoint::ProxyEndpoint
impl core::fmt::Debug for sb_core::outbound::endpoint::ProxyEndpoint
pub fn sb_core::outbound::endpoint::ProxyEndpoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::endpoint::ProxyEndpoint
impl core::marker::Send for sb_core::outbound::endpoint::ProxyEndpoint
impl core::marker::Sync for sb_core::outbound::endpoint::ProxyEndpoint
impl core::marker::Unpin for sb_core::outbound::endpoint::ProxyEndpoint
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::endpoint::ProxyEndpoint
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::endpoint::ProxyEndpoint
impl<T, U> core::convert::Into<U> for sb_core::outbound::endpoint::ProxyEndpoint where U: core::convert::From<T>
pub fn sb_core::outbound::endpoint::ProxyEndpoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::endpoint::ProxyEndpoint where U: core::convert::Into<T>
pub type sb_core::outbound::endpoint::ProxyEndpoint::Error = core::convert::Infallible
pub fn sb_core::outbound::endpoint::ProxyEndpoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::endpoint::ProxyEndpoint where U: core::convert::TryFrom<T>
pub type sb_core::outbound::endpoint::ProxyEndpoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::endpoint::ProxyEndpoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::endpoint::ProxyEndpoint where T: core::clone::Clone
pub type sb_core::outbound::endpoint::ProxyEndpoint::Owned = T
pub fn sb_core::outbound::endpoint::ProxyEndpoint::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::endpoint::ProxyEndpoint::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::endpoint::ProxyEndpoint where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyEndpoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::endpoint::ProxyEndpoint where T: ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyEndpoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::endpoint::ProxyEndpoint where T: ?core::marker::Sized
pub fn sb_core::outbound::endpoint::ProxyEndpoint::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::endpoint::ProxyEndpoint where T: core::clone::Clone
pub unsafe fn sb_core::outbound::endpoint::ProxyEndpoint::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::endpoint::ProxyEndpoint
pub fn sb_core::outbound::endpoint::ProxyEndpoint::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::endpoint::ProxyEndpoint
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::endpoint::ProxyEndpoint
impl<T> typenum::type_operators::Same for sb_core::outbound::endpoint::ProxyEndpoint
pub type sb_core::outbound::endpoint::ProxyEndpoint::Output = T
pub mod sb_core::outbound::health
pub struct sb_core::outbound::health::EpState
pub sb_core::outbound::health::EpState::consecutive_fail: parking_lot::mutex::Mutex<u32>
pub sb_core::outbound::health::EpState::last_rtt_ms: parking_lot::mutex::Mutex<core::option::Option<u64>>
pub sb_core::outbound::health::EpState::opened_at: parking_lot::mutex::Mutex<core::option::Option<std::time::Instant>>
pub sb_core::outbound::health::EpState::up: core::sync::atomic::AtomicBool
impl !core::marker::Freeze for sb_core::outbound::health::EpState
impl core::marker::Send for sb_core::outbound::health::EpState
impl core::marker::Sync for sb_core::outbound::health::EpState
impl core::marker::Unpin for sb_core::outbound::health::EpState
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::health::EpState
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::health::EpState
impl<T, U> core::convert::Into<U> for sb_core::outbound::health::EpState where U: core::convert::From<T>
pub fn sb_core::outbound::health::EpState::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::health::EpState where U: core::convert::Into<T>
pub type sb_core::outbound::health::EpState::Error = core::convert::Infallible
pub fn sb_core::outbound::health::EpState::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::health::EpState where U: core::convert::TryFrom<T>
pub type sb_core::outbound::health::EpState::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::health::EpState::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::health::EpState where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::health::EpState::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::health::EpState where T: ?core::marker::Sized
pub fn sb_core::outbound::health::EpState::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::health::EpState where T: ?core::marker::Sized
pub fn sb_core::outbound::health::EpState::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::health::EpState
pub fn sb_core::outbound::health::EpState::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::health::EpState
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::health::EpState
impl<T> typenum::type_operators::Same for sb_core::outbound::health::EpState
pub type sb_core::outbound::health::EpState::Output = T
pub struct sb_core::outbound::health::HealthStatus
pub sb_core::outbound::health::HealthStatus::consecutive_fail: alloc::sync::Arc<parking_lot::mutex::Mutex<u32>>
pub sb_core::outbound::health::HealthStatus::last_check: alloc::sync::Arc<parking_lot::mutex::Mutex<core::option::Option<std::time::Instant>>>
pub sb_core::outbound::health::HealthStatus::last_rtt_ms: alloc::sync::Arc<parking_lot::mutex::Mutex<core::option::Option<u64>>>
pub sb_core::outbound::health::HealthStatus::up: alloc::sync::Arc<core::sync::atomic::AtomicBool>
impl sb_core::outbound::health::HealthStatus
pub fn sb_core::outbound::health::HealthStatus::is_up(&self) -> bool
pub fn sb_core::outbound::health::HealthStatus::new() -> Self
impl core::clone::Clone for sb_core::outbound::health::HealthStatus
pub fn sb_core::outbound::health::HealthStatus::clone(&self) -> sb_core::outbound::health::HealthStatus
impl core::default::Default for sb_core::outbound::health::HealthStatus
pub fn sb_core::outbound::health::HealthStatus::default() -> Self
impl core::marker::Freeze for sb_core::outbound::health::HealthStatus
impl core::marker::Send for sb_core::outbound::health::HealthStatus
impl core::marker::Sync for sb_core::outbound::health::HealthStatus
impl core::marker::Unpin for sb_core::outbound::health::HealthStatus
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::health::HealthStatus
impl !core::panic::unwind_safe::UnwindSafe for sb_core::outbound::health::HealthStatus
impl<T, U> core::convert::Into<U> for sb_core::outbound::health::HealthStatus where U: core::convert::From<T>
pub fn sb_core::outbound::health::HealthStatus::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::health::HealthStatus where U: core::convert::Into<T>
pub type sb_core::outbound::health::HealthStatus::Error = core::convert::Infallible
pub fn sb_core::outbound::health::HealthStatus::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::health::HealthStatus where U: core::convert::TryFrom<T>
pub type sb_core::outbound::health::HealthStatus::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::health::HealthStatus::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::health::HealthStatus where T: core::clone::Clone
pub type sb_core::outbound::health::HealthStatus::Owned = T
pub fn sb_core::outbound::health::HealthStatus::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::health::HealthStatus::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::health::HealthStatus where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::health::HealthStatus::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::health::HealthStatus where T: ?core::marker::Sized
pub fn sb_core::outbound::health::HealthStatus::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::health::HealthStatus where T: ?core::marker::Sized
pub fn sb_core::outbound::health::HealthStatus::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::health::HealthStatus where T: core::clone::Clone
pub unsafe fn sb_core::outbound::health::HealthStatus::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::health::HealthStatus
pub fn sb_core::outbound::health::HealthStatus::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::health::HealthStatus
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::health::HealthStatus
impl<T> typenum::type_operators::Same for sb_core::outbound::health::HealthStatus
pub type sb_core::outbound::health::HealthStatus::Output = T
pub struct sb_core::outbound::health::MultiHealthView
impl core::marker::Freeze for sb_core::outbound::health::MultiHealthView
impl core::marker::Send for sb_core::outbound::health::MultiHealthView
impl core::marker::Sync for sb_core::outbound::health::MultiHealthView
impl core::marker::Unpin for sb_core::outbound::health::MultiHealthView
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::health::MultiHealthView
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::health::MultiHealthView
impl<T, U> core::convert::Into<U> for sb_core::outbound::health::MultiHealthView where U: core::convert::From<T>
pub fn sb_core::outbound::health::MultiHealthView::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::health::MultiHealthView where U: core::convert::Into<T>
pub type sb_core::outbound::health::MultiHealthView::Error = core::convert::Infallible
pub fn sb_core::outbound::health::MultiHealthView::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::health::MultiHealthView where U: core::convert::TryFrom<T>
pub type sb_core::outbound::health::MultiHealthView::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::health::MultiHealthView::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::health::MultiHealthView where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::health::MultiHealthView::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::health::MultiHealthView where T: ?core::marker::Sized
pub fn sb_core::outbound::health::MultiHealthView::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::health::MultiHealthView where T: ?core::marker::Sized
pub fn sb_core::outbound::health::MultiHealthView::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::health::MultiHealthView
pub fn sb_core::outbound::health::MultiHealthView::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::health::MultiHealthView
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::health::MultiHealthView
impl<T> typenum::type_operators::Same for sb_core::outbound::health::MultiHealthView
pub type sb_core::outbound::health::MultiHealthView::Output = T
pub fn sb_core::outbound::health::global_status() -> core::option::Option<&'static sb_core::outbound::health::HealthStatus>
pub async fn sb_core::outbound::health::spawn_if_enabled()
pub mod sb_core::outbound::manager
pub struct sb_core::outbound::manager::OutboundManager
impl sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::add_connector(&mut self, tag: alloc::string::String, connector: alloc::sync::Arc<dyn sb_core::outbound::traits::OutboundConnector>)
pub fn sb_core::outbound::manager::OutboundManager::clear(&mut self)
pub fn sb_core::outbound::manager::OutboundManager::contains(&self, tag: &str) -> bool
pub fn sb_core::outbound::manager::OutboundManager::get(&self, tag: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::outbound::traits::OutboundConnector>>
pub fn sb_core::outbound::manager::OutboundManager::is_empty(&self) -> bool
pub fn sb_core::outbound::manager::OutboundManager::len(&self) -> usize
pub fn sb_core::outbound::manager::OutboundManager::list_tags(&self) -> alloc::vec::Vec<&str>
pub fn sb_core::outbound::manager::OutboundManager::new() -> Self
pub fn sb_core::outbound::manager::OutboundManager::remove(&mut self, tag: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::outbound::traits::OutboundConnector>>
impl core::clone::Clone for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::clone(&self) -> sb_core::outbound::manager::OutboundManager
impl core::default::Default for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::default() -> Self
impl core::fmt::Debug for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::manager::OutboundManager
impl core::marker::Send for sb_core::outbound::manager::OutboundManager
impl core::marker::Sync for sb_core::outbound::manager::OutboundManager
impl core::marker::Unpin for sb_core::outbound::manager::OutboundManager
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::manager::OutboundManager
impl !core::panic::unwind_safe::UnwindSafe for sb_core::outbound::manager::OutboundManager
impl<T, U> core::convert::Into<U> for sb_core::outbound::manager::OutboundManager where U: core::convert::From<T>
pub fn sb_core::outbound::manager::OutboundManager::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::manager::OutboundManager where U: core::convert::Into<T>
pub type sb_core::outbound::manager::OutboundManager::Error = core::convert::Infallible
pub fn sb_core::outbound::manager::OutboundManager::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::manager::OutboundManager where U: core::convert::TryFrom<T>
pub type sb_core::outbound::manager::OutboundManager::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::manager::OutboundManager::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::manager::OutboundManager where T: core::clone::Clone
pub type sb_core::outbound::manager::OutboundManager::Owned = T
pub fn sb_core::outbound::manager::OutboundManager::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::manager::OutboundManager::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::manager::OutboundManager where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::manager::OutboundManager::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::manager::OutboundManager where T: ?core::marker::Sized
pub fn sb_core::outbound::manager::OutboundManager::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::manager::OutboundManager where T: ?core::marker::Sized
pub fn sb_core::outbound::manager::OutboundManager::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::manager::OutboundManager where T: core::clone::Clone
pub unsafe fn sb_core::outbound::manager::OutboundManager::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::manager::OutboundManager
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::manager::OutboundManager
impl<T> typenum::type_operators::Same for sb_core::outbound::manager::OutboundManager
pub type sb_core::outbound::manager::OutboundManager::Output = T
pub mod sb_core::outbound::observe
pub async fn sb_core::outbound::observe::with_observation<T, E, F, Fut>(selector: &sb_core::outbound::selector::Selector, pool_name: &str, endpoint_index: usize, f: F) -> core::result::Result<T, E> where F: core::ops::function::FnOnce() -> Fut, Fut: core::future::future::Future<Output = core::result::Result<T, E>>
pub async fn sb_core::outbound::observe::with_pool_observation<T, E, F, Fut>(_selector: &sb_core::outbound::selector::PoolSelector, pool_name: &str, endpoint_index: usize, f: F) -> core::result::Result<T, E> where F: core::ops::function::FnOnce() -> Fut, Fut: core::future::future::Future<Output = core::result::Result<T, E>>
pub mod sb_core::outbound::p3_selector
pub struct sb_core::outbound::p3_selector::P3Selector
impl sb_core::outbound::p3_selector::P3Selector
pub fn sb_core::outbound::p3_selector::P3Selector::new(outbounds: alloc::vec::Vec<alloc::string::String>, cfg: sb_core::outbound::p3_selector::PickerConfig) -> Self
pub fn sb_core::outbound::p3_selector::P3Selector::pick(&mut self) -> alloc::string::String
pub fn sb_core::outbound::p3_selector::P3Selector::record_result(&mut self, ob: &str, ok: bool)
pub fn sb_core::outbound::p3_selector::P3Selector::record_rtt(&mut self, ob: &str, ms: f64)
impl core::marker::Freeze for sb_core::outbound::p3_selector::P3Selector
impl core::marker::Send for sb_core::outbound::p3_selector::P3Selector
impl core::marker::Sync for sb_core::outbound::p3_selector::P3Selector
impl core::marker::Unpin for sb_core::outbound::p3_selector::P3Selector
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::p3_selector::P3Selector
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::p3_selector::P3Selector
impl<T, U> core::convert::Into<U> for sb_core::outbound::p3_selector::P3Selector where U: core::convert::From<T>
pub fn sb_core::outbound::p3_selector::P3Selector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::p3_selector::P3Selector where U: core::convert::Into<T>
pub type sb_core::outbound::p3_selector::P3Selector::Error = core::convert::Infallible
pub fn sb_core::outbound::p3_selector::P3Selector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::p3_selector::P3Selector where U: core::convert::TryFrom<T>
pub type sb_core::outbound::p3_selector::P3Selector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::p3_selector::P3Selector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::p3_selector::P3Selector where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::p3_selector::P3Selector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::p3_selector::P3Selector where T: ?core::marker::Sized
pub fn sb_core::outbound::p3_selector::P3Selector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::p3_selector::P3Selector where T: ?core::marker::Sized
pub fn sb_core::outbound::p3_selector::P3Selector::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::p3_selector::P3Selector
pub fn sb_core::outbound::p3_selector::P3Selector::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::p3_selector::P3Selector
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::p3_selector::P3Selector
impl<T> typenum::type_operators::Same for sb_core::outbound::p3_selector::P3Selector
pub type sb_core::outbound::p3_selector::P3Selector::Output = T
pub struct sb_core::outbound::p3_selector::PickerConfig
pub sb_core::outbound::p3_selector::PickerConfig::alpha_rtt: f64
pub sb_core::outbound::p3_selector::PickerConfig::cold_start_bias_ms: u64
pub sb_core::outbound::p3_selector::PickerConfig::fuse_penalty: f64
pub sb_core::outbound::p3_selector::PickerConfig::jitter_threshold: f64
pub sb_core::outbound::p3_selector::PickerConfig::window_err: usize
impl core::clone::Clone for sb_core::outbound::p3_selector::PickerConfig
pub fn sb_core::outbound::p3_selector::PickerConfig::clone(&self) -> sb_core::outbound::p3_selector::PickerConfig
impl core::default::Default for sb_core::outbound::p3_selector::PickerConfig
pub fn sb_core::outbound::p3_selector::PickerConfig::default() -> Self
impl core::fmt::Debug for sb_core::outbound::p3_selector::PickerConfig
pub fn sb_core::outbound::p3_selector::PickerConfig::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::p3_selector::PickerConfig
impl core::marker::Send for sb_core::outbound::p3_selector::PickerConfig
impl core::marker::Sync for sb_core::outbound::p3_selector::PickerConfig
impl core::marker::Unpin for sb_core::outbound::p3_selector::PickerConfig
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::p3_selector::PickerConfig
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::p3_selector::PickerConfig
impl<T, U> core::convert::Into<U> for sb_core::outbound::p3_selector::PickerConfig where U: core::convert::From<T>
pub fn sb_core::outbound::p3_selector::PickerConfig::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::p3_selector::PickerConfig where U: core::convert::Into<T>
pub type sb_core::outbound::p3_selector::PickerConfig::Error = core::convert::Infallible
pub fn sb_core::outbound::p3_selector::PickerConfig::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::p3_selector::PickerConfig where U: core::convert::TryFrom<T>
pub type sb_core::outbound::p3_selector::PickerConfig::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::p3_selector::PickerConfig::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::p3_selector::PickerConfig where T: core::clone::Clone
pub type sb_core::outbound::p3_selector::PickerConfig::Owned = T
pub fn sb_core::outbound::p3_selector::PickerConfig::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::p3_selector::PickerConfig::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::p3_selector::PickerConfig where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::p3_selector::PickerConfig::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::p3_selector::PickerConfig where T: ?core::marker::Sized
pub fn sb_core::outbound::p3_selector::PickerConfig::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::p3_selector::PickerConfig where T: ?core::marker::Sized
pub fn sb_core::outbound::p3_selector::PickerConfig::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::p3_selector::PickerConfig where T: core::clone::Clone
pub unsafe fn sb_core::outbound::p3_selector::PickerConfig::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::p3_selector::PickerConfig
pub fn sb_core::outbound::p3_selector::PickerConfig::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::p3_selector::PickerConfig
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::p3_selector::PickerConfig
impl<T> typenum::type_operators::Same for sb_core::outbound::p3_selector::PickerConfig
pub type sb_core::outbound::p3_selector::PickerConfig::Output = T
pub mod sb_core::outbound::registry
pub enum sb_core::outbound::registry::PoolPolicy
pub sb_core::outbound::registry::PoolPolicy::WeightedRR
pub sb_core::outbound::registry::PoolPolicy::WeightedRRWithLatencyBias
impl core::clone::Clone for sb_core::outbound::registry::PoolPolicy
pub fn sb_core::outbound::registry::PoolPolicy::clone(&self) -> sb_core::outbound::registry::PoolPolicy
impl core::marker::Copy for sb_core::outbound::registry::PoolPolicy
impl core::marker::Freeze for sb_core::outbound::registry::PoolPolicy
impl core::marker::Send for sb_core::outbound::registry::PoolPolicy
impl core::marker::Sync for sb_core::outbound::registry::PoolPolicy
impl core::marker::Unpin for sb_core::outbound::registry::PoolPolicy
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::registry::PoolPolicy
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::registry::PoolPolicy
impl<T, U> core::convert::Into<U> for sb_core::outbound::registry::PoolPolicy where U: core::convert::From<T>
pub fn sb_core::outbound::registry::PoolPolicy::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::registry::PoolPolicy where U: core::convert::Into<T>
pub type sb_core::outbound::registry::PoolPolicy::Error = core::convert::Infallible
pub fn sb_core::outbound::registry::PoolPolicy::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::registry::PoolPolicy where U: core::convert::TryFrom<T>
pub type sb_core::outbound::registry::PoolPolicy::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::registry::PoolPolicy::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::registry::PoolPolicy where T: core::clone::Clone
pub type sb_core::outbound::registry::PoolPolicy::Owned = T
pub fn sb_core::outbound::registry::PoolPolicy::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::registry::PoolPolicy::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::registry::PoolPolicy where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::registry::PoolPolicy::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::registry::PoolPolicy where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::PoolPolicy::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::registry::PoolPolicy where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::PoolPolicy::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::registry::PoolPolicy where T: core::clone::Clone
pub unsafe fn sb_core::outbound::registry::PoolPolicy::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::registry::PoolPolicy
pub fn sb_core::outbound::registry::PoolPolicy::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::registry::PoolPolicy
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::registry::PoolPolicy
impl<T> typenum::type_operators::Same for sb_core::outbound::registry::PoolPolicy
pub type sb_core::outbound::registry::PoolPolicy::Output = T
pub struct sb_core::outbound::registry::ProxyPool
pub sb_core::outbound::registry::ProxyPool::endpoints: alloc::vec::Vec<sb_core::outbound::endpoint::ProxyEndpoint>
pub sb_core::outbound::registry::ProxyPool::name: alloc::string::String
pub sb_core::outbound::registry::ProxyPool::policy: sb_core::outbound::registry::PoolPolicy
pub sb_core::outbound::registry::ProxyPool::sticky: sb_core::outbound::registry::StickyCfg
impl core::clone::Clone for sb_core::outbound::registry::ProxyPool
pub fn sb_core::outbound::registry::ProxyPool::clone(&self) -> sb_core::outbound::registry::ProxyPool
impl core::marker::Freeze for sb_core::outbound::registry::ProxyPool
impl core::marker::Send for sb_core::outbound::registry::ProxyPool
impl core::marker::Sync for sb_core::outbound::registry::ProxyPool
impl core::marker::Unpin for sb_core::outbound::registry::ProxyPool
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::registry::ProxyPool
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::registry::ProxyPool
impl<T, U> core::convert::Into<U> for sb_core::outbound::registry::ProxyPool where U: core::convert::From<T>
pub fn sb_core::outbound::registry::ProxyPool::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::registry::ProxyPool where U: core::convert::Into<T>
pub type sb_core::outbound::registry::ProxyPool::Error = core::convert::Infallible
pub fn sb_core::outbound::registry::ProxyPool::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::registry::ProxyPool where U: core::convert::TryFrom<T>
pub type sb_core::outbound::registry::ProxyPool::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::registry::ProxyPool::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::registry::ProxyPool where T: core::clone::Clone
pub type sb_core::outbound::registry::ProxyPool::Owned = T
pub fn sb_core::outbound::registry::ProxyPool::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::registry::ProxyPool::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::registry::ProxyPool where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::registry::ProxyPool::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::registry::ProxyPool where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::ProxyPool::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::registry::ProxyPool where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::ProxyPool::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::registry::ProxyPool where T: core::clone::Clone
pub unsafe fn sb_core::outbound::registry::ProxyPool::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::registry::ProxyPool
pub fn sb_core::outbound::registry::ProxyPool::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::registry::ProxyPool
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::registry::ProxyPool
impl<T> typenum::type_operators::Same for sb_core::outbound::registry::ProxyPool
pub type sb_core::outbound::registry::ProxyPool::Output = T
pub struct sb_core::outbound::registry::Registry
pub sb_core::outbound::registry::Registry::default: core::option::Option<sb_core::outbound::endpoint::ProxyEndpoint>
pub sb_core::outbound::registry::Registry::pools: std::collections::hash::map::HashMap<alloc::string::String, sb_core::outbound::registry::ProxyPool>
impl core::default::Default for sb_core::outbound::registry::Registry
pub fn sb_core::outbound::registry::Registry::default() -> sb_core::outbound::registry::Registry
impl core::marker::Freeze for sb_core::outbound::registry::Registry
impl core::marker::Send for sb_core::outbound::registry::Registry
impl core::marker::Sync for sb_core::outbound::registry::Registry
impl core::marker::Unpin for sb_core::outbound::registry::Registry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::registry::Registry
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::registry::Registry
impl<T, U> core::convert::Into<U> for sb_core::outbound::registry::Registry where U: core::convert::From<T>
pub fn sb_core::outbound::registry::Registry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::registry::Registry where U: core::convert::Into<T>
pub type sb_core::outbound::registry::Registry::Error = core::convert::Infallible
pub fn sb_core::outbound::registry::Registry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::registry::Registry where U: core::convert::TryFrom<T>
pub type sb_core::outbound::registry::Registry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::registry::Registry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::registry::Registry where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::registry::Registry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::registry::Registry where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::Registry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::registry::Registry where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::Registry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::registry::Registry
pub fn sb_core::outbound::registry::Registry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::registry::Registry
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::registry::Registry
impl<T> typenum::type_operators::Same for sb_core::outbound::registry::Registry
pub type sb_core::outbound::registry::Registry::Output = T
pub struct sb_core::outbound::registry::StickyCfg
pub sb_core::outbound::registry::StickyCfg::cap: usize
pub sb_core::outbound::registry::StickyCfg::ttl_ms: u64
impl core::clone::Clone for sb_core::outbound::registry::StickyCfg
pub fn sb_core::outbound::registry::StickyCfg::clone(&self) -> sb_core::outbound::registry::StickyCfg
impl core::marker::Copy for sb_core::outbound::registry::StickyCfg
impl core::marker::Freeze for sb_core::outbound::registry::StickyCfg
impl core::marker::Send for sb_core::outbound::registry::StickyCfg
impl core::marker::Sync for sb_core::outbound::registry::StickyCfg
impl core::marker::Unpin for sb_core::outbound::registry::StickyCfg
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::registry::StickyCfg
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::registry::StickyCfg
impl<T, U> core::convert::Into<U> for sb_core::outbound::registry::StickyCfg where U: core::convert::From<T>
pub fn sb_core::outbound::registry::StickyCfg::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::registry::StickyCfg where U: core::convert::Into<T>
pub type sb_core::outbound::registry::StickyCfg::Error = core::convert::Infallible
pub fn sb_core::outbound::registry::StickyCfg::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::registry::StickyCfg where U: core::convert::TryFrom<T>
pub type sb_core::outbound::registry::StickyCfg::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::registry::StickyCfg::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::registry::StickyCfg where T: core::clone::Clone
pub type sb_core::outbound::registry::StickyCfg::Owned = T
pub fn sb_core::outbound::registry::StickyCfg::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::registry::StickyCfg::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::registry::StickyCfg where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::registry::StickyCfg::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::registry::StickyCfg where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::StickyCfg::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::registry::StickyCfg where T: ?core::marker::Sized
pub fn sb_core::outbound::registry::StickyCfg::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::registry::StickyCfg where T: core::clone::Clone
pub unsafe fn sb_core::outbound::registry::StickyCfg::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::registry::StickyCfg
pub fn sb_core::outbound::registry::StickyCfg::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::registry::StickyCfg
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::registry::StickyCfg
impl<T> typenum::type_operators::Same for sb_core::outbound::registry::StickyCfg
pub type sb_core::outbound::registry::StickyCfg::Output = T
pub fn sb_core::outbound::registry::global() -> core::option::Option<alloc::sync::Arc<sb_core::outbound::registry::Registry>>
pub fn sb_core::outbound::registry::install_global(r: sb_core::outbound::registry::Registry)
pub mod sb_core::outbound::selector
pub struct sb_core::outbound::selector::EndpointHealth
pub sb_core::outbound::selector::EndpointHealth::avg_rtt_ms: core::option::Option<f64>
pub sb_core::outbound::selector::EndpointHealth::endpoint: sb_core::outbound::endpoint::ProxyEndpoint
pub sb_core::outbound::selector::EndpointHealth::index: usize
pub sb_core::outbound::selector::EndpointHealth::is_healthy: bool
pub sb_core::outbound::selector::EndpointHealth::last_check: core::option::Option<std::time::SystemTime>
pub sb_core::outbound::selector::EndpointHealth::success_rate: f64
impl core::clone::Clone for sb_core::outbound::selector::EndpointHealth
pub fn sb_core::outbound::selector::EndpointHealth::clone(&self) -> sb_core::outbound::selector::EndpointHealth
impl core::fmt::Debug for sb_core::outbound::selector::EndpointHealth
pub fn sb_core::outbound::selector::EndpointHealth::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::selector::EndpointHealth
impl core::marker::Send for sb_core::outbound::selector::EndpointHealth
impl core::marker::Sync for sb_core::outbound::selector::EndpointHealth
impl core::marker::Unpin for sb_core::outbound::selector::EndpointHealth
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::selector::EndpointHealth
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::selector::EndpointHealth
impl<T, U> core::convert::Into<U> for sb_core::outbound::selector::EndpointHealth where U: core::convert::From<T>
pub fn sb_core::outbound::selector::EndpointHealth::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::selector::EndpointHealth where U: core::convert::Into<T>
pub type sb_core::outbound::selector::EndpointHealth::Error = core::convert::Infallible
pub fn sb_core::outbound::selector::EndpointHealth::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::selector::EndpointHealth where U: core::convert::TryFrom<T>
pub type sb_core::outbound::selector::EndpointHealth::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::selector::EndpointHealth::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::selector::EndpointHealth where T: core::clone::Clone
pub type sb_core::outbound::selector::EndpointHealth::Owned = T
pub fn sb_core::outbound::selector::EndpointHealth::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::selector::EndpointHealth::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::selector::EndpointHealth where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::selector::EndpointHealth::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::selector::EndpointHealth where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::EndpointHealth::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::selector::EndpointHealth where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::EndpointHealth::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::selector::EndpointHealth where T: core::clone::Clone
pub unsafe fn sb_core::outbound::selector::EndpointHealth::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::selector::EndpointHealth
pub fn sb_core::outbound::selector::EndpointHealth::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::selector::EndpointHealth
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::selector::EndpointHealth
impl<T> typenum::type_operators::Same for sb_core::outbound::selector::EndpointHealth
pub type sb_core::outbound::selector::EndpointHealth::Output = T
pub struct sb_core::outbound::selector::HealthView
pub sb_core::outbound::selector::HealthView::endpoints: alloc::vec::Vec<sb_core::outbound::selector::EndpointHealth>
pub sb_core::outbound::selector::HealthView::pool_name: alloc::string::String
impl sb_core::outbound::selector::HealthView
pub fn sb_core::outbound::selector::HealthView::add_endpoint(&mut self, proxy_endpoint: sb_core::outbound::endpoint::ProxyEndpoint)
pub fn sb_core::outbound::selector::HealthView::add_endpoint_from_string(&mut self, address: alloc::string::String)
pub fn sb_core::outbound::selector::HealthView::new(pool_name: alloc::string::String) -> Self
pub fn sb_core::outbound::selector::HealthView::update_endpoint_health(&mut self, index: usize, is_healthy: bool, rtt_ms: core::option::Option<f64>)
impl core::clone::Clone for sb_core::outbound::selector::HealthView
pub fn sb_core::outbound::selector::HealthView::clone(&self) -> sb_core::outbound::selector::HealthView
impl core::fmt::Debug for sb_core::outbound::selector::HealthView
pub fn sb_core::outbound::selector::HealthView::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::selector::HealthView
impl core::marker::Send for sb_core::outbound::selector::HealthView
impl core::marker::Sync for sb_core::outbound::selector::HealthView
impl core::marker::Unpin for sb_core::outbound::selector::HealthView
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::selector::HealthView
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::selector::HealthView
impl<T, U> core::convert::Into<U> for sb_core::outbound::selector::HealthView where U: core::convert::From<T>
pub fn sb_core::outbound::selector::HealthView::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::selector::HealthView where U: core::convert::Into<T>
pub type sb_core::outbound::selector::HealthView::Error = core::convert::Infallible
pub fn sb_core::outbound::selector::HealthView::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::selector::HealthView where U: core::convert::TryFrom<T>
pub type sb_core::outbound::selector::HealthView::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::selector::HealthView::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::selector::HealthView where T: core::clone::Clone
pub type sb_core::outbound::selector::HealthView::Owned = T
pub fn sb_core::outbound::selector::HealthView::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::selector::HealthView::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::selector::HealthView where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::selector::HealthView::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::selector::HealthView where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::HealthView::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::selector::HealthView where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::HealthView::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::selector::HealthView where T: core::clone::Clone
pub unsafe fn sb_core::outbound::selector::HealthView::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::selector::HealthView
pub fn sb_core::outbound::selector::HealthView::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::selector::HealthView
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::selector::HealthView
impl<T> typenum::type_operators::Same for sb_core::outbound::selector::HealthView
pub type sb_core::outbound::selector::HealthView::Output = T
pub struct sb_core::outbound::selector::Member
pub sb_core::outbound::selector::Member::conn: alloc::sync::Arc<dyn sb_core::OutboundConnector>
pub sb_core::outbound::selector::Member::name: alloc::string::String
impl core::clone::Clone for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::clone(&self) -> sb_core::outbound::selector::Member
impl core::fmt::Debug for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::selector::Member
impl core::marker::Send for sb_core::outbound::selector::Member
impl core::marker::Sync for sb_core::outbound::selector::Member
impl core::marker::Unpin for sb_core::outbound::selector::Member
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::selector::Member
impl !core::panic::unwind_safe::UnwindSafe for sb_core::outbound::selector::Member
impl<T, U> core::convert::Into<U> for sb_core::outbound::selector::Member where U: core::convert::From<T>
pub fn sb_core::outbound::selector::Member::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::selector::Member where U: core::convert::Into<T>
pub type sb_core::outbound::selector::Member::Error = core::convert::Infallible
pub fn sb_core::outbound::selector::Member::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::selector::Member where U: core::convert::TryFrom<T>
pub type sb_core::outbound::selector::Member::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::selector::Member::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::selector::Member where T: core::clone::Clone
pub type sb_core::outbound::selector::Member::Owned = T
pub fn sb_core::outbound::selector::Member::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::selector::Member::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::selector::Member where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::selector::Member where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::selector::Member where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::selector::Member where T: core::clone::Clone
pub unsafe fn sb_core::outbound::selector::Member::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::selector::Member
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::selector::Member
impl<T> typenum::type_operators::Same for sb_core::outbound::selector::Member
pub type sb_core::outbound::selector::Member::Output = T
pub struct sb_core::outbound::selector::PoolSelector
pub sb_core::outbound::selector::PoolSelector::default_pool: alloc::string::String
pub sb_core::outbound::selector::PoolSelector::name: alloc::string::String
pub sb_core::outbound::selector::PoolSelector::pools: std::collections::hash::map::HashMap<alloc::string::String, sb_core::outbound::selector::HealthView>
impl sb_core::outbound::selector::PoolSelector
pub fn sb_core::outbound::selector::PoolSelector::add_pool(&mut self, pool_name: alloc::string::String, endpoints: alloc::vec::Vec<alloc::string::String>)
pub fn sb_core::outbound::selector::PoolSelector::get_pool(&self, pool_name: &str) -> core::option::Option<&sb_core::outbound::selector::HealthView>
pub fn sb_core::outbound::selector::PoolSelector::get_pool_mut(&mut self, pool_name: &str) -> core::option::Option<&mut sb_core::outbound::selector::HealthView>
pub fn sb_core::outbound::selector::PoolSelector::has_healthy_endpoints(&self, pool_name: &str) -> bool
pub fn sb_core::outbound::selector::PoolSelector::new(name: alloc::string::String, default_pool: alloc::string::String) -> Self
pub fn sb_core::outbound::selector::PoolSelector::new_with_capacity(capacity: usize, _ttl: core::time::Duration) -> Self
pub fn sb_core::outbound::selector::PoolSelector::pool_names(&self) -> alloc::vec::Vec<&alloc::string::String>
pub fn sb_core::outbound::selector::PoolSelector::record_observation(&mut self, pool_name: &str, endpoint_index: usize, dur_ms: u64, success: bool)
pub fn sb_core::outbound::selector::PoolSelector::select(&self, pool_name: &str, _peer_addr: core::net::socket_addr::SocketAddr, _target: &str, _health: &()) -> core::option::Option<&sb_core::outbound::endpoint::ProxyEndpoint>
pub fn sb_core::outbound::selector::PoolSelector::select_healthy_endpoint(&self, pool_name: &str) -> core::option::Option<&sb_core::outbound::selector::EndpointHealth>
impl core::fmt::Debug for sb_core::outbound::selector::PoolSelector
pub fn sb_core::outbound::selector::PoolSelector::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::selector::PoolSelector
impl core::marker::Send for sb_core::outbound::selector::PoolSelector
impl core::marker::Sync for sb_core::outbound::selector::PoolSelector
impl core::marker::Unpin for sb_core::outbound::selector::PoolSelector
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::selector::PoolSelector
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::selector::PoolSelector
impl<T, U> core::convert::Into<U> for sb_core::outbound::selector::PoolSelector where U: core::convert::From<T>
pub fn sb_core::outbound::selector::PoolSelector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::selector::PoolSelector where U: core::convert::Into<T>
pub type sb_core::outbound::selector::PoolSelector::Error = core::convert::Infallible
pub fn sb_core::outbound::selector::PoolSelector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::selector::PoolSelector where U: core::convert::TryFrom<T>
pub type sb_core::outbound::selector::PoolSelector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::selector::PoolSelector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::selector::PoolSelector where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::selector::PoolSelector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::selector::PoolSelector where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::PoolSelector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::selector::PoolSelector where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::PoolSelector::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::selector::PoolSelector
pub fn sb_core::outbound::selector::PoolSelector::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::selector::PoolSelector
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::selector::PoolSelector
impl<T> typenum::type_operators::Same for sb_core::outbound::selector::PoolSelector
pub type sb_core::outbound::selector::PoolSelector::Output = T
pub struct sb_core::outbound::selector::Selector
pub sb_core::outbound::selector::Selector::members: alloc::vec::Vec<sb_core::outbound::selector::Member>
pub sb_core::outbound::selector::Selector::name: alloc::string::String
impl sb_core::outbound::selector::Selector
pub fn sb_core::outbound::selector::Selector::new(name: alloc::string::String, members: alloc::vec::Vec<sb_core::outbound::selector::Member>) -> Self
pub fn sb_core::outbound::selector::Selector::on_observation(&self, pool_name: &str, endpoint_index: usize, dur_ms: u64, success: bool)
impl core::fmt::Debug for sb_core::outbound::selector::Selector
pub fn sb_core::outbound::selector::Selector::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl sb_core::OutboundConnector for sb_core::outbound::selector::Selector
pub fn sb_core::outbound::selector::Selector::connect(&self, host: &str, port: u16) -> std::io::error::Result<std::net::tcp::TcpStream>
impl core::marker::Freeze for sb_core::outbound::selector::Selector
impl core::marker::Send for sb_core::outbound::selector::Selector
impl core::marker::Sync for sb_core::outbound::selector::Selector
impl core::marker::Unpin for sb_core::outbound::selector::Selector
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::selector::Selector
impl !core::panic::unwind_safe::UnwindSafe for sb_core::outbound::selector::Selector
impl<T, U> core::convert::Into<U> for sb_core::outbound::selector::Selector where U: core::convert::From<T>
pub fn sb_core::outbound::selector::Selector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::selector::Selector where U: core::convert::Into<T>
pub type sb_core::outbound::selector::Selector::Error = core::convert::Infallible
pub fn sb_core::outbound::selector::Selector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::selector::Selector where U: core::convert::TryFrom<T>
pub type sb_core::outbound::selector::Selector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::selector::Selector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::selector::Selector where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::selector::Selector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::selector::Selector where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Selector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::selector::Selector where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Selector::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::selector::Selector
pub fn sb_core::outbound::selector::Selector::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::selector::Selector
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::selector::Selector
impl<T> typenum::type_operators::Same for sb_core::outbound::selector::Selector
pub type sb_core::outbound::selector::Selector::Output = T
pub mod sb_core::outbound::ss
pub mod sb_core::outbound::ss::hkdf
pub enum sb_core::outbound::ss::hkdf::HashAlgorithm
pub sb_core::outbound::ss::hkdf::HashAlgorithm::Sha1
pub sb_core::outbound::ss::hkdf::HashAlgorithm::Sha256
impl core::default::Default for sb_core::outbound::ss::hkdf::HashAlgorithm
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::default() -> sb_core::outbound::ss::hkdf::HashAlgorithm
impl core::marker::Freeze for sb_core::outbound::ss::hkdf::HashAlgorithm
impl core::marker::Send for sb_core::outbound::ss::hkdf::HashAlgorithm
impl core::marker::Sync for sb_core::outbound::ss::hkdf::HashAlgorithm
impl core::marker::Unpin for sb_core::outbound::ss::hkdf::HashAlgorithm
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::ss::hkdf::HashAlgorithm
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::ss::hkdf::HashAlgorithm
impl<T, U> core::convert::Into<U> for sb_core::outbound::ss::hkdf::HashAlgorithm where U: core::convert::From<T>
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::ss::hkdf::HashAlgorithm where U: core::convert::Into<T>
pub type sb_core::outbound::ss::hkdf::HashAlgorithm::Error = core::convert::Infallible
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::ss::hkdf::HashAlgorithm where U: core::convert::TryFrom<T>
pub type sb_core::outbound::ss::hkdf::HashAlgorithm::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::ss::hkdf::HashAlgorithm where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::ss::hkdf::HashAlgorithm where T: ?core::marker::Sized
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::ss::hkdf::HashAlgorithm where T: ?core::marker::Sized
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::ss::hkdf::HashAlgorithm
pub fn sb_core::outbound::ss::hkdf::HashAlgorithm::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::ss::hkdf::HashAlgorithm
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::ss::hkdf::HashAlgorithm
impl<T> typenum::type_operators::Same for sb_core::outbound::ss::hkdf::HashAlgorithm
pub type sb_core::outbound::ss::hkdf::HashAlgorithm::Output = T
pub fn sb_core::outbound::ss::hkdf::derive_subkey(_master_key: &[u8], _salt: &[u8], _hash_alg: sb_core::outbound::ss::hkdf::HashAlgorithm) -> [u8; 32]
pub fn sb_core::outbound::ss::hkdf::generate_salt(_size: usize) -> alloc::vec::Vec<u8>
pub mod sb_core::outbound::tcp
pub async fn sb_core::outbound::tcp::connect_auto(authority: &str, decision: &str) -> anyhow::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::outbound::tcp::connect_direct(authority: &str) -> anyhow::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::outbound::tcp::connect_via_http_proxy(authority: &str) -> anyhow::Result<tokio::net::tcp::stream::TcpStream>
pub mod sb_core::outbound::traits
pub trait sb_core::outbound::traits::OutboundConnector: core::marker::Send + core::marker::Sync + core::fmt::Debug
pub fn sb_core::outbound::traits::OutboundConnector::connect_tcp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::traits::OutboundConnector::connect_udp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<alloc::boxed::Box<dyn sb_core::outbound::traits::UdpTransport>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::outbound::traits::OutboundConnector for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_tcp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_udp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<alloc::boxed::Box<dyn sb_core::outbound::traits::UdpTransport>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub trait sb_core::outbound::traits::UdpTransport: core::marker::Send + core::marker::Sync
pub fn sb_core::outbound::traits::UdpTransport::recv_from<'life0, 'life1, 'async_trait>(&'life0 self, buf: &'life1 mut [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<(usize, core::net::socket_addr::SocketAddr)>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::traits::UdpTransport::send_to<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, buf: &'life1 [u8], dst: &'life2 sb_core::types::Endpoint) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<usize>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait
impl sb_core::outbound::traits::UdpTransport for sb_core::outbound::direct_connector::DirectUdpTransport
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::recv_from<'life0, 'life1, 'async_trait>(&'life0 self, buf: &'life1 mut [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<(usize, core::net::socket_addr::SocketAddr)>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::send_to<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, buf: &'life1 [u8], dst: &'life2 sb_core::types::Endpoint) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<usize>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait
pub mod sb_core::outbound::types
pub enum sb_core::outbound::types::Addr
pub sb_core::outbound::types::Addr::Domain(alloc::string::String)
pub sb_core::outbound::types::Addr::V4(core::net::ip_addr::Ipv4Addr)
pub sb_core::outbound::types::Addr::V6(core::net::ip_addr::Ipv6Addr)
impl core::clone::Clone for sb_core::outbound::types::Addr
pub fn sb_core::outbound::types::Addr::clone(&self) -> sb_core::outbound::types::Addr
impl core::convert::From<&sb_core::outbound::types::HostPort> for sb_core::outbound::types::Addr
pub fn sb_core::outbound::types::Addr::from(h: &sb_core::outbound::types::HostPort) -> Self
impl core::fmt::Debug for sb_core::outbound::types::Addr
pub fn sb_core::outbound::types::Addr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::types::Addr
impl core::marker::Send for sb_core::outbound::types::Addr
impl core::marker::Sync for sb_core::outbound::types::Addr
impl core::marker::Unpin for sb_core::outbound::types::Addr
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::types::Addr
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::types::Addr
impl<T, U> core::convert::Into<U> for sb_core::outbound::types::Addr where U: core::convert::From<T>
pub fn sb_core::outbound::types::Addr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::types::Addr where U: core::convert::Into<T>
pub type sb_core::outbound::types::Addr::Error = core::convert::Infallible
pub fn sb_core::outbound::types::Addr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::types::Addr where U: core::convert::TryFrom<T>
pub type sb_core::outbound::types::Addr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::types::Addr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::types::Addr where T: core::clone::Clone
pub type sb_core::outbound::types::Addr::Owned = T
pub fn sb_core::outbound::types::Addr::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::types::Addr::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::types::Addr where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::types::Addr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::types::Addr where T: ?core::marker::Sized
pub fn sb_core::outbound::types::Addr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::types::Addr where T: ?core::marker::Sized
pub fn sb_core::outbound::types::Addr::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::types::Addr where T: core::clone::Clone
pub unsafe fn sb_core::outbound::types::Addr::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::types::Addr
pub fn sb_core::outbound::types::Addr::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::types::Addr
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::types::Addr
impl<T> typenum::type_operators::Same for sb_core::outbound::types::Addr
pub type sb_core::outbound::types::Addr::Output = T
pub enum sb_core::outbound::types::TargetAddr
pub sb_core::outbound::types::TargetAddr::Domain(alloc::string::String, u16)
pub sb_core::outbound::types::TargetAddr::Ip(core::net::socket_addr::SocketAddr)
impl core::clone::Clone for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::clone(&self) -> sb_core::net::udp_nat::TargetAddr
impl core::cmp::Eq for sb_core::net::udp_nat::TargetAddr
impl core::cmp::PartialEq for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::eq(&self, other: &sb_core::net::udp_nat::TargetAddr) -> bool
impl core::fmt::Debug for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::net::udp_nat::TargetAddr
impl core::marker::Freeze for sb_core::net::udp_nat::TargetAddr
impl core::marker::Send for sb_core::net::udp_nat::TargetAddr
impl core::marker::Sync for sb_core::net::udp_nat::TargetAddr
impl core::marker::Unpin for sb_core::net::udp_nat::TargetAddr
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::net::udp_nat::TargetAddr
impl core::panic::unwind_safe::UnwindSafe for sb_core::net::udp_nat::TargetAddr
impl<Q, K> equivalent::Equivalent<K> for sb_core::net::udp_nat::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::net::udp_nat::TargetAddr where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::equivalent(&self, key: &K) -> bool
pub fn sb_core::net::udp_nat::TargetAddr::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::net::udp_nat::TargetAddr where U: core::convert::From<T>
pub fn sb_core::net::udp_nat::TargetAddr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::net::udp_nat::TargetAddr where U: core::convert::Into<T>
pub type sb_core::net::udp_nat::TargetAddr::Error = core::convert::Infallible
pub fn sb_core::net::udp_nat::TargetAddr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::net::udp_nat::TargetAddr where U: core::convert::TryFrom<T>
pub type sb_core::net::udp_nat::TargetAddr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::net::udp_nat::TargetAddr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::net::udp_nat::TargetAddr where T: core::clone::Clone
pub type sb_core::net::udp_nat::TargetAddr::Owned = T
pub fn sb_core::net::udp_nat::TargetAddr::clone_into(&self, target: &mut T)
pub fn sb_core::net::udp_nat::TargetAddr::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::net::udp_nat::TargetAddr where T: 'static + ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::net::udp_nat::TargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::net::udp_nat::TargetAddr where T: ?core::marker::Sized
pub fn sb_core::net::udp_nat::TargetAddr::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::net::udp_nat::TargetAddr where T: core::clone::Clone
pub unsafe fn sb_core::net::udp_nat::TargetAddr::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::net::udp_nat::TargetAddr
pub fn sb_core::net::udp_nat::TargetAddr::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::net::udp_nat::TargetAddr
impl<T> tracing::instrument::WithSubscriber for sb_core::net::udp_nat::TargetAddr
impl<T> typenum::type_operators::Same for sb_core::net::udp_nat::TargetAddr
pub type sb_core::net::udp_nat::TargetAddr::Output = T
pub struct sb_core::outbound::types::HostPort
pub sb_core::outbound::types::HostPort::host: alloc::string::String
pub sb_core::outbound::types::HostPort::port: u16
impl sb_core::outbound::types::HostPort
pub fn sb_core::outbound::types::HostPort::new(host: alloc::string::String, port: u16) -> Self
impl core::clone::Clone for sb_core::outbound::types::HostPort
pub fn sb_core::outbound::types::HostPort::clone(&self) -> sb_core::outbound::types::HostPort
impl core::convert::From<&sb_core::outbound::types::HostPort> for sb_core::outbound::types::Addr
pub fn sb_core::outbound::types::Addr::from(h: &sb_core::outbound::types::HostPort) -> Self
impl core::fmt::Debug for sb_core::outbound::types::HostPort
pub fn sb_core::outbound::types::HostPort::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::types::HostPort
impl core::marker::Send for sb_core::outbound::types::HostPort
impl core::marker::Sync for sb_core::outbound::types::HostPort
impl core::marker::Unpin for sb_core::outbound::types::HostPort
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::types::HostPort
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::types::HostPort
impl<T, U> core::convert::Into<U> for sb_core::outbound::types::HostPort where U: core::convert::From<T>
pub fn sb_core::outbound::types::HostPort::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::types::HostPort where U: core::convert::Into<T>
pub type sb_core::outbound::types::HostPort::Error = core::convert::Infallible
pub fn sb_core::outbound::types::HostPort::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::types::HostPort where U: core::convert::TryFrom<T>
pub type sb_core::outbound::types::HostPort::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::types::HostPort::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::types::HostPort where T: core::clone::Clone
pub type sb_core::outbound::types::HostPort::Owned = T
pub fn sb_core::outbound::types::HostPort::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::types::HostPort::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::types::HostPort where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::types::HostPort::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::types::HostPort where T: ?core::marker::Sized
pub fn sb_core::outbound::types::HostPort::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::types::HostPort where T: ?core::marker::Sized
pub fn sb_core::outbound::types::HostPort::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::types::HostPort where T: core::clone::Clone
pub unsafe fn sb_core::outbound::types::HostPort::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::types::HostPort
pub fn sb_core::outbound::types::HostPort::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::types::HostPort
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::types::HostPort
impl<T> typenum::type_operators::Same for sb_core::outbound::types::HostPort
pub type sb_core::outbound::types::HostPort::Output = T
pub struct sb_core::outbound::types::TcpConnectRequest
pub sb_core::outbound::types::TcpConnectRequest::target: sb_core::net::udp_nat::TargetAddr
pub sb_core::outbound::types::TcpConnectRequest::timeout_ms: core::option::Option<u64>
impl sb_core::outbound::types::TcpConnectRequest
pub fn sb_core::outbound::types::TcpConnectRequest::new(target: sb_core::net::udp_nat::TargetAddr) -> Self
pub fn sb_core::outbound::types::TcpConnectRequest::with_timeout(self, timeout_ms: u64) -> Self
impl core::clone::Clone for sb_core::outbound::types::TcpConnectRequest
pub fn sb_core::outbound::types::TcpConnectRequest::clone(&self) -> sb_core::outbound::types::TcpConnectRequest
impl core::fmt::Debug for sb_core::outbound::types::TcpConnectRequest
pub fn sb_core::outbound::types::TcpConnectRequest::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::types::TcpConnectRequest
impl core::marker::Send for sb_core::outbound::types::TcpConnectRequest
impl core::marker::Sync for sb_core::outbound::types::TcpConnectRequest
impl core::marker::Unpin for sb_core::outbound::types::TcpConnectRequest
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::types::TcpConnectRequest
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::types::TcpConnectRequest
impl<T, U> core::convert::Into<U> for sb_core::outbound::types::TcpConnectRequest where U: core::convert::From<T>
pub fn sb_core::outbound::types::TcpConnectRequest::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::types::TcpConnectRequest where U: core::convert::Into<T>
pub type sb_core::outbound::types::TcpConnectRequest::Error = core::convert::Infallible
pub fn sb_core::outbound::types::TcpConnectRequest::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::types::TcpConnectRequest where U: core::convert::TryFrom<T>
pub type sb_core::outbound::types::TcpConnectRequest::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::types::TcpConnectRequest::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::types::TcpConnectRequest where T: core::clone::Clone
pub type sb_core::outbound::types::TcpConnectRequest::Owned = T
pub fn sb_core::outbound::types::TcpConnectRequest::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::types::TcpConnectRequest::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::types::TcpConnectRequest where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::types::TcpConnectRequest::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::types::TcpConnectRequest where T: ?core::marker::Sized
pub fn sb_core::outbound::types::TcpConnectRequest::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::types::TcpConnectRequest where T: ?core::marker::Sized
pub fn sb_core::outbound::types::TcpConnectRequest::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::types::TcpConnectRequest where T: core::clone::Clone
pub unsafe fn sb_core::outbound::types::TcpConnectRequest::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::types::TcpConnectRequest
pub fn sb_core::outbound::types::TcpConnectRequest::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::types::TcpConnectRequest
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::types::TcpConnectRequest
impl<T> typenum::type_operators::Same for sb_core::outbound::types::TcpConnectRequest
pub type sb_core::outbound::types::TcpConnectRequest::Output = T
pub struct sb_core::outbound::types::UdpBindRequest
pub sb_core::outbound::types::UdpBindRequest::bind: core::net::socket_addr::SocketAddr
pub sb_core::outbound::types::UdpBindRequest::target: core::option::Option<sb_core::net::udp_nat::TargetAddr>
impl sb_core::outbound::types::UdpBindRequest
pub fn sb_core::outbound::types::UdpBindRequest::new(bind: core::net::socket_addr::SocketAddr) -> Self
pub fn sb_core::outbound::types::UdpBindRequest::with_target(self, target: sb_core::net::udp_nat::TargetAddr) -> Self
impl core::clone::Clone for sb_core::outbound::types::UdpBindRequest
pub fn sb_core::outbound::types::UdpBindRequest::clone(&self) -> sb_core::outbound::types::UdpBindRequest
impl core::default::Default for sb_core::outbound::types::UdpBindRequest
pub fn sb_core::outbound::types::UdpBindRequest::default() -> Self
impl core::fmt::Debug for sb_core::outbound::types::UdpBindRequest
pub fn sb_core::outbound::types::UdpBindRequest::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::types::UdpBindRequest
impl core::marker::Send for sb_core::outbound::types::UdpBindRequest
impl core::marker::Sync for sb_core::outbound::types::UdpBindRequest
impl core::marker::Unpin for sb_core::outbound::types::UdpBindRequest
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::types::UdpBindRequest
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::types::UdpBindRequest
impl<T, U> core::convert::Into<U> for sb_core::outbound::types::UdpBindRequest where U: core::convert::From<T>
pub fn sb_core::outbound::types::UdpBindRequest::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::types::UdpBindRequest where U: core::convert::Into<T>
pub type sb_core::outbound::types::UdpBindRequest::Error = core::convert::Infallible
pub fn sb_core::outbound::types::UdpBindRequest::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::types::UdpBindRequest where U: core::convert::TryFrom<T>
pub type sb_core::outbound::types::UdpBindRequest::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::types::UdpBindRequest::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::types::UdpBindRequest where T: core::clone::Clone
pub type sb_core::outbound::types::UdpBindRequest::Owned = T
pub fn sb_core::outbound::types::UdpBindRequest::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::types::UdpBindRequest::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::types::UdpBindRequest where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::types::UdpBindRequest::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::types::UdpBindRequest where T: ?core::marker::Sized
pub fn sb_core::outbound::types::UdpBindRequest::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::types::UdpBindRequest where T: ?core::marker::Sized
pub fn sb_core::outbound::types::UdpBindRequest::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::types::UdpBindRequest where T: core::clone::Clone
pub unsafe fn sb_core::outbound::types::UdpBindRequest::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::types::UdpBindRequest
pub fn sb_core::outbound::types::UdpBindRequest::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::types::UdpBindRequest
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::types::UdpBindRequest
impl<T> typenum::type_operators::Same for sb_core::outbound::types::UdpBindRequest
pub type sb_core::outbound::types::UdpBindRequest::Output = T
pub trait sb_core::outbound::types::Outbound: core::marker::Send + core::marker::Sync
pub fn sb_core::outbound::types::Outbound::name(&self) -> &'static str
pub fn sb_core::outbound::types::Outbound::tcp_connect<'life0, 'async_trait>(&'life0 self, req: sb_core::outbound::types::TcpConnectRequest) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::outbound::types::Outbound::tcp_connect_tls<'life0, 'async_trait>(&'life0 self, req: sb_core::outbound::types::TcpConnectRequest) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<sb_core::transport::TlsStream<tokio::net::tcp::stream::TcpStream>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::outbound::types::Outbound::udp_bind<'life0, 'async_trait>(&'life0 self, req: sb_core::outbound::types::UdpBindRequest) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<tokio::net::udp::UdpSocket>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub trait sb_core::outbound::types::OutboundTcp: core::marker::Send + core::marker::Sync
pub type sb_core::outbound::types::OutboundTcp::IO: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin + core::marker::Send + 'static
pub fn sb_core::outbound::types::OutboundTcp::connect<'life0, 'life1, 'async_trait>(&'life0 self, target: &'life1 sb_core::outbound::types::HostPort) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = std::io::error::Result<Self::IO>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::types::OutboundTcp::protocol_name(&self) -> &'static str
pub fn sb_core::outbound::types::encode_ss_addr(addr: &sb_core::outbound::types::Addr, port: u16, buf: &mut alloc::vec::Vec<u8>)
pub mod sb_core::outbound::udp
pub async fn sb_core::outbound::udp::direct_sendto(sock: &tokio::net::udp::UdpSocket, dst: &sb_core::net::datagram::UdpTargetAddr, payload: &[u8]) -> anyhow::Result<usize>
pub async fn sb_core::outbound::udp::direct_udp_socket_for(dst: &sb_core::net::datagram::UdpTargetAddr) -> anyhow::Result<tokio::net::udp::UdpSocket>
pub async fn sb_core::outbound::udp::resolve_target_socketaddr(dst: &sb_core::net::datagram::UdpTargetAddr) -> anyhow::Result<core::net::socket_addr::SocketAddr>
pub mod sb_core::outbound::udp_balancer
pub async fn sb_core::outbound::udp_balancer::send_balanced(payload: &[u8], dst: &sb_core::net::datagram::UdpTargetAddr, decision: &str) -> anyhow::Result<usize>
pub mod sb_core::outbound::udp_direct
pub async fn sb_core::outbound::udp_direct::connect_udp(dst: core::net::socket_addr::SocketAddr) -> anyhow::Result<tokio::net::udp::UdpSocket>
pub enum sb_core::outbound::Endpoint
pub sb_core::outbound::Endpoint::Domain(alloc::string::String, u16)
pub sb_core::outbound::Endpoint::Ip(core::net::socket_addr::SocketAddr)
impl core::clone::Clone for sb_core::outbound::Endpoint
pub fn sb_core::outbound::Endpoint::clone(&self) -> sb_core::outbound::Endpoint
impl core::cmp::Eq for sb_core::outbound::Endpoint
impl core::cmp::PartialEq for sb_core::outbound::Endpoint
pub fn sb_core::outbound::Endpoint::eq(&self, other: &sb_core::outbound::Endpoint) -> bool
impl core::fmt::Debug for sb_core::outbound::Endpoint
pub fn sb_core::outbound::Endpoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::outbound::Endpoint
impl core::marker::Freeze for sb_core::outbound::Endpoint
impl core::marker::Send for sb_core::outbound::Endpoint
impl core::marker::Sync for sb_core::outbound::Endpoint
impl core::marker::Unpin for sb_core::outbound::Endpoint
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::Endpoint
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::Endpoint
impl<Q, K> equivalent::Equivalent<K> for sb_core::outbound::Endpoint where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::Endpoint::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::Endpoint where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::Endpoint where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::Endpoint::equivalent(&self, key: &K) -> bool
pub fn sb_core::outbound::Endpoint::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::outbound::Endpoint where U: core::convert::From<T>
pub fn sb_core::outbound::Endpoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::Endpoint where U: core::convert::Into<T>
pub type sb_core::outbound::Endpoint::Error = core::convert::Infallible
pub fn sb_core::outbound::Endpoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::Endpoint where U: core::convert::TryFrom<T>
pub type sb_core::outbound::Endpoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::Endpoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::Endpoint where T: core::clone::Clone
pub type sb_core::outbound::Endpoint::Owned = T
pub fn sb_core::outbound::Endpoint::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::Endpoint::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::Endpoint where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::Endpoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::Endpoint where T: ?core::marker::Sized
pub fn sb_core::outbound::Endpoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::Endpoint where T: ?core::marker::Sized
pub fn sb_core::outbound::Endpoint::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::Endpoint where T: core::clone::Clone
pub unsafe fn sb_core::outbound::Endpoint::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::Endpoint
pub fn sb_core::outbound::Endpoint::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::Endpoint
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::Endpoint
impl<T> typenum::type_operators::Same for sb_core::outbound::Endpoint
pub type sb_core::outbound::Endpoint::Output = T
pub enum sb_core::outbound::OutboundImpl
pub sb_core::outbound::OutboundImpl::Block
pub sb_core::outbound::OutboundImpl::Direct
pub sb_core::outbound::OutboundImpl::HttpProxy(sb_core::outbound::HttpProxyConfig)
pub sb_core::outbound::OutboundImpl::Socks5(sb_core::outbound::Socks5Config)
impl core::clone::Clone for sb_core::outbound::OutboundImpl
pub fn sb_core::outbound::OutboundImpl::clone(&self) -> sb_core::outbound::OutboundImpl
impl core::fmt::Debug for sb_core::outbound::OutboundImpl
pub fn sb_core::outbound::OutboundImpl::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::OutboundImpl
impl core::marker::Send for sb_core::outbound::OutboundImpl
impl core::marker::Sync for sb_core::outbound::OutboundImpl
impl core::marker::Unpin for sb_core::outbound::OutboundImpl
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::OutboundImpl
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::OutboundImpl
impl<T, U> core::convert::Into<U> for sb_core::outbound::OutboundImpl where U: core::convert::From<T>
pub fn sb_core::outbound::OutboundImpl::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::OutboundImpl where U: core::convert::Into<T>
pub type sb_core::outbound::OutboundImpl::Error = core::convert::Infallible
pub fn sb_core::outbound::OutboundImpl::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::OutboundImpl where U: core::convert::TryFrom<T>
pub type sb_core::outbound::OutboundImpl::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::OutboundImpl::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::OutboundImpl where T: core::clone::Clone
pub type sb_core::outbound::OutboundImpl::Owned = T
pub fn sb_core::outbound::OutboundImpl::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::OutboundImpl::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::OutboundImpl where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::OutboundImpl::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::OutboundImpl where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundImpl::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::OutboundImpl where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundImpl::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::OutboundImpl where T: core::clone::Clone
pub unsafe fn sb_core::outbound::OutboundImpl::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::OutboundImpl
pub fn sb_core::outbound::OutboundImpl::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::OutboundImpl
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::OutboundImpl
impl<T> typenum::type_operators::Same for sb_core::outbound::OutboundImpl
pub type sb_core::outbound::OutboundImpl::Output = T
pub enum sb_core::outbound::OutboundKind
pub sb_core::outbound::OutboundKind::Block
pub sb_core::outbound::OutboundKind::Direct
pub sb_core::outbound::OutboundKind::Http
pub sb_core::outbound::OutboundKind::Socks
impl core::clone::Clone for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::clone(&self) -> sb_core::outbound::OutboundKind
impl core::cmp::Eq for sb_core::outbound::OutboundKind
impl core::cmp::PartialEq for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::eq(&self, other: &sb_core::outbound::OutboundKind) -> bool
impl core::default::Default for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::default() -> sb_core::outbound::OutboundKind
impl core::fmt::Debug for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::outbound::OutboundKind
impl core::marker::Freeze for sb_core::outbound::OutboundKind
impl core::marker::Send for sb_core::outbound::OutboundKind
impl core::marker::Sync for sb_core::outbound::OutboundKind
impl core::marker::Unpin for sb_core::outbound::OutboundKind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::OutboundKind
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::OutboundKind
impl<Q, K> equivalent::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::OutboundKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
pub fn sb_core::outbound::OutboundKind::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::outbound::OutboundKind where U: core::convert::From<T>
pub fn sb_core::outbound::OutboundKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::OutboundKind where U: core::convert::Into<T>
pub type sb_core::outbound::OutboundKind::Error = core::convert::Infallible
pub fn sb_core::outbound::OutboundKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::OutboundKind where U: core::convert::TryFrom<T>
pub type sb_core::outbound::OutboundKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::OutboundKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::OutboundKind where T: core::clone::Clone
pub type sb_core::outbound::OutboundKind::Owned = T
pub fn sb_core::outbound::OutboundKind::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::OutboundKind::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::OutboundKind where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::OutboundKind where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::OutboundKind where T: core::clone::Clone
pub unsafe fn sb_core::outbound::OutboundKind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::OutboundKind
pub fn sb_core::outbound::OutboundKind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::OutboundKind
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::OutboundKind
impl<T> typenum::type_operators::Same for sb_core::outbound::OutboundKind
pub type sb_core::outbound::OutboundKind::Output = T
pub enum sb_core::outbound::RouteTarget
pub sb_core::outbound::RouteTarget::Kind(sb_core::outbound::OutboundKind)
pub sb_core::outbound::RouteTarget::Named(alloc::string::String)
impl sb_core::outbound::RouteTarget
pub fn sb_core::outbound::RouteTarget::block() -> Self
pub fn sb_core::outbound::RouteTarget::direct() -> Self
impl core::clone::Clone for sb_core::outbound::RouteTarget
pub fn sb_core::outbound::RouteTarget::clone(&self) -> sb_core::outbound::RouteTarget
impl core::cmp::Eq for sb_core::outbound::RouteTarget
impl core::cmp::PartialEq for sb_core::outbound::RouteTarget
pub fn sb_core::outbound::RouteTarget::eq(&self, other: &sb_core::outbound::RouteTarget) -> bool
impl core::fmt::Debug for sb_core::outbound::RouteTarget
pub fn sb_core::outbound::RouteTarget::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::outbound::RouteTarget
impl core::marker::Freeze for sb_core::outbound::RouteTarget
impl core::marker::Send for sb_core::outbound::RouteTarget
impl core::marker::Sync for sb_core::outbound::RouteTarget
impl core::marker::Unpin for sb_core::outbound::RouteTarget
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::RouteTarget
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::RouteTarget
impl<Q, K> equivalent::Equivalent<K> for sb_core::outbound::RouteTarget where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::RouteTarget::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::RouteTarget where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::outbound::RouteTarget where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::outbound::RouteTarget::equivalent(&self, key: &K) -> bool
pub fn sb_core::outbound::RouteTarget::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::outbound::RouteTarget where U: core::convert::From<T>
pub fn sb_core::outbound::RouteTarget::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::RouteTarget where U: core::convert::Into<T>
pub type sb_core::outbound::RouteTarget::Error = core::convert::Infallible
pub fn sb_core::outbound::RouteTarget::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::RouteTarget where U: core::convert::TryFrom<T>
pub type sb_core::outbound::RouteTarget::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::RouteTarget::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::RouteTarget where T: core::clone::Clone
pub type sb_core::outbound::RouteTarget::Owned = T
pub fn sb_core::outbound::RouteTarget::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::RouteTarget::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::RouteTarget where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::RouteTarget::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::RouteTarget where T: ?core::marker::Sized
pub fn sb_core::outbound::RouteTarget::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::RouteTarget where T: ?core::marker::Sized
pub fn sb_core::outbound::RouteTarget::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::RouteTarget where T: core::clone::Clone
pub unsafe fn sb_core::outbound::RouteTarget::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::RouteTarget
pub fn sb_core::outbound::RouteTarget::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::RouteTarget
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::RouteTarget
impl<T> typenum::type_operators::Same for sb_core::outbound::RouteTarget
pub type sb_core::outbound::RouteTarget::Output = T
pub struct sb_core::outbound::ConnectOpts
impl core::clone::Clone for sb_core::outbound::ConnectOpts
pub fn sb_core::outbound::ConnectOpts::clone(&self) -> sb_core::outbound::ConnectOpts
impl core::default::Default for sb_core::outbound::ConnectOpts
pub fn sb_core::outbound::ConnectOpts::default() -> sb_core::outbound::ConnectOpts
impl core::fmt::Debug for sb_core::outbound::ConnectOpts
pub fn sb_core::outbound::ConnectOpts::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::ConnectOpts
impl core::marker::Send for sb_core::outbound::ConnectOpts
impl core::marker::Sync for sb_core::outbound::ConnectOpts
impl core::marker::Unpin for sb_core::outbound::ConnectOpts
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::ConnectOpts
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::ConnectOpts
impl<T, U> core::convert::Into<U> for sb_core::outbound::ConnectOpts where U: core::convert::From<T>
pub fn sb_core::outbound::ConnectOpts::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::ConnectOpts where U: core::convert::Into<T>
pub type sb_core::outbound::ConnectOpts::Error = core::convert::Infallible
pub fn sb_core::outbound::ConnectOpts::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::ConnectOpts where U: core::convert::TryFrom<T>
pub type sb_core::outbound::ConnectOpts::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::ConnectOpts::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::ConnectOpts where T: core::clone::Clone
pub type sb_core::outbound::ConnectOpts::Owned = T
pub fn sb_core::outbound::ConnectOpts::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::ConnectOpts::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::ConnectOpts where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::ConnectOpts::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::ConnectOpts where T: ?core::marker::Sized
pub fn sb_core::outbound::ConnectOpts::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::ConnectOpts where T: ?core::marker::Sized
pub fn sb_core::outbound::ConnectOpts::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::ConnectOpts where T: core::clone::Clone
pub unsafe fn sb_core::outbound::ConnectOpts::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::ConnectOpts
pub fn sb_core::outbound::ConnectOpts::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::ConnectOpts
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::ConnectOpts
impl<T> typenum::type_operators::Same for sb_core::outbound::ConnectOpts
pub type sb_core::outbound::ConnectOpts::Output = T
pub struct sb_core::outbound::DirectConnector
impl sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::new() -> Self
pub fn sb_core::outbound::direct_connector::DirectConnector::with_timeout(connect_timeout: core::time::Duration) -> Self
impl core::clone::Clone for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::clone(&self) -> sb_core::outbound::direct_connector::DirectConnector
impl core::default::Default for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::default() -> Self
impl core::fmt::Debug for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl sb_core::outbound::traits::OutboundConnector for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_tcp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_udp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<alloc::boxed::Box<dyn sb_core::outbound::traits::UdpTransport>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl core::marker::Freeze for sb_core::outbound::direct_connector::DirectConnector
impl core::marker::Send for sb_core::outbound::direct_connector::DirectConnector
impl core::marker::Sync for sb_core::outbound::direct_connector::DirectConnector
impl core::marker::Unpin for sb_core::outbound::direct_connector::DirectConnector
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::direct_connector::DirectConnector
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::direct_connector::DirectConnector
impl<T, U> core::convert::Into<U> for sb_core::outbound::direct_connector::DirectConnector where U: core::convert::From<T>
pub fn sb_core::outbound::direct_connector::DirectConnector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::direct_connector::DirectConnector where U: core::convert::Into<T>
pub type sb_core::outbound::direct_connector::DirectConnector::Error = core::convert::Infallible
pub fn sb_core::outbound::direct_connector::DirectConnector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::direct_connector::DirectConnector where U: core::convert::TryFrom<T>
pub type sb_core::outbound::direct_connector::DirectConnector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::direct_connector::DirectConnector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::direct_connector::DirectConnector where T: core::clone::Clone
pub type sb_core::outbound::direct_connector::DirectConnector::Owned = T
pub fn sb_core::outbound::direct_connector::DirectConnector::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::direct_connector::DirectConnector::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::direct_connector::DirectConnector where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectConnector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::direct_connector::DirectConnector where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectConnector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::direct_connector::DirectConnector where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectConnector::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::direct_connector::DirectConnector where T: core::clone::Clone
pub unsafe fn sb_core::outbound::direct_connector::DirectConnector::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::direct_connector::DirectConnector
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::direct_connector::DirectConnector
impl<T> typenum::type_operators::Same for sb_core::outbound::direct_connector::DirectConnector
pub type sb_core::outbound::direct_connector::DirectConnector::Output = T
pub struct sb_core::outbound::DirectUdpTransport
impl sb_core::outbound::traits::UdpTransport for sb_core::outbound::direct_connector::DirectUdpTransport
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::recv_from<'life0, 'life1, 'async_trait>(&'life0 self, buf: &'life1 mut [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<(usize, core::net::socket_addr::SocketAddr)>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::send_to<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, buf: &'life1 [u8], dst: &'life2 sb_core::types::Endpoint) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<usize>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait
impl !core::marker::Freeze for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::marker::Send for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::marker::Sync for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::marker::Unpin for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::direct_connector::DirectUdpTransport
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::direct_connector::DirectUdpTransport
impl<T, U> core::convert::Into<U> for sb_core::outbound::direct_connector::DirectUdpTransport where U: core::convert::From<T>
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::direct_connector::DirectUdpTransport where U: core::convert::Into<T>
pub type sb_core::outbound::direct_connector::DirectUdpTransport::Error = core::convert::Infallible
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::direct_connector::DirectUdpTransport where U: core::convert::TryFrom<T>
pub type sb_core::outbound::direct_connector::DirectUdpTransport::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::outbound::direct_connector::DirectUdpTransport where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::direct_connector::DirectUdpTransport where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::direct_connector::DirectUdpTransport where T: ?core::marker::Sized
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::outbound::direct_connector::DirectUdpTransport
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::direct_connector::DirectUdpTransport
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::direct_connector::DirectUdpTransport
impl<T> typenum::type_operators::Same for sb_core::outbound::direct_connector::DirectUdpTransport
pub type sb_core::outbound::direct_connector::DirectUdpTransport::Output = T
pub struct sb_core::outbound::HttpProxyConfig
pub sb_core::outbound::HttpProxyConfig::password: core::option::Option<alloc::string::String>
pub sb_core::outbound::HttpProxyConfig::proxy_addr: core::net::socket_addr::SocketAddr
pub sb_core::outbound::HttpProxyConfig::username: core::option::Option<alloc::string::String>
impl core::clone::Clone for sb_core::outbound::HttpProxyConfig
pub fn sb_core::outbound::HttpProxyConfig::clone(&self) -> sb_core::outbound::HttpProxyConfig
impl core::fmt::Debug for sb_core::outbound::HttpProxyConfig
pub fn sb_core::outbound::HttpProxyConfig::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::HttpProxyConfig
impl core::marker::Send for sb_core::outbound::HttpProxyConfig
impl core::marker::Sync for sb_core::outbound::HttpProxyConfig
impl core::marker::Unpin for sb_core::outbound::HttpProxyConfig
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::HttpProxyConfig
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::HttpProxyConfig
impl<T, U> core::convert::Into<U> for sb_core::outbound::HttpProxyConfig where U: core::convert::From<T>
pub fn sb_core::outbound::HttpProxyConfig::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::HttpProxyConfig where U: core::convert::Into<T>
pub type sb_core::outbound::HttpProxyConfig::Error = core::convert::Infallible
pub fn sb_core::outbound::HttpProxyConfig::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::HttpProxyConfig where U: core::convert::TryFrom<T>
pub type sb_core::outbound::HttpProxyConfig::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::HttpProxyConfig::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::HttpProxyConfig where T: core::clone::Clone
pub type sb_core::outbound::HttpProxyConfig::Owned = T
pub fn sb_core::outbound::HttpProxyConfig::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::HttpProxyConfig::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::HttpProxyConfig where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::HttpProxyConfig::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::HttpProxyConfig where T: ?core::marker::Sized
pub fn sb_core::outbound::HttpProxyConfig::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::HttpProxyConfig where T: ?core::marker::Sized
pub fn sb_core::outbound::HttpProxyConfig::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::HttpProxyConfig where T: core::clone::Clone
pub unsafe fn sb_core::outbound::HttpProxyConfig::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::HttpProxyConfig
pub fn sb_core::outbound::HttpProxyConfig::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::HttpProxyConfig
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::HttpProxyConfig
impl<T> typenum::type_operators::Same for sb_core::outbound::HttpProxyConfig
pub type sb_core::outbound::HttpProxyConfig::Output = T
pub struct sb_core::outbound::OutboundManager
impl sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::add_connector(&mut self, tag: alloc::string::String, connector: alloc::sync::Arc<dyn sb_core::outbound::traits::OutboundConnector>)
pub fn sb_core::outbound::manager::OutboundManager::clear(&mut self)
pub fn sb_core::outbound::manager::OutboundManager::contains(&self, tag: &str) -> bool
pub fn sb_core::outbound::manager::OutboundManager::get(&self, tag: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::outbound::traits::OutboundConnector>>
pub fn sb_core::outbound::manager::OutboundManager::is_empty(&self) -> bool
pub fn sb_core::outbound::manager::OutboundManager::len(&self) -> usize
pub fn sb_core::outbound::manager::OutboundManager::list_tags(&self) -> alloc::vec::Vec<&str>
pub fn sb_core::outbound::manager::OutboundManager::new() -> Self
pub fn sb_core::outbound::manager::OutboundManager::remove(&mut self, tag: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::outbound::traits::OutboundConnector>>
impl core::clone::Clone for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::clone(&self) -> sb_core::outbound::manager::OutboundManager
impl core::default::Default for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::default() -> Self
impl core::fmt::Debug for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::manager::OutboundManager
impl core::marker::Send for sb_core::outbound::manager::OutboundManager
impl core::marker::Sync for sb_core::outbound::manager::OutboundManager
impl core::marker::Unpin for sb_core::outbound::manager::OutboundManager
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::manager::OutboundManager
impl !core::panic::unwind_safe::UnwindSafe for sb_core::outbound::manager::OutboundManager
impl<T, U> core::convert::Into<U> for sb_core::outbound::manager::OutboundManager where U: core::convert::From<T>
pub fn sb_core::outbound::manager::OutboundManager::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::manager::OutboundManager where U: core::convert::Into<T>
pub type sb_core::outbound::manager::OutboundManager::Error = core::convert::Infallible
pub fn sb_core::outbound::manager::OutboundManager::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::manager::OutboundManager where U: core::convert::TryFrom<T>
pub type sb_core::outbound::manager::OutboundManager::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::manager::OutboundManager::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::manager::OutboundManager where T: core::clone::Clone
pub type sb_core::outbound::manager::OutboundManager::Owned = T
pub fn sb_core::outbound::manager::OutboundManager::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::manager::OutboundManager::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::manager::OutboundManager where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::manager::OutboundManager::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::manager::OutboundManager where T: ?core::marker::Sized
pub fn sb_core::outbound::manager::OutboundManager::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::manager::OutboundManager where T: ?core::marker::Sized
pub fn sb_core::outbound::manager::OutboundManager::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::manager::OutboundManager where T: core::clone::Clone
pub unsafe fn sb_core::outbound::manager::OutboundManager::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::manager::OutboundManager
pub fn sb_core::outbound::manager::OutboundManager::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::manager::OutboundManager
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::manager::OutboundManager
impl<T> typenum::type_operators::Same for sb_core::outbound::manager::OutboundManager
pub type sb_core::outbound::manager::OutboundManager::Output = T
pub struct sb_core::outbound::OutboundRegistry
impl sb_core::outbound::OutboundRegistry
pub fn sb_core::outbound::OutboundRegistry::get(&self, name: &str) -> core::option::Option<&sb_core::outbound::OutboundImpl>
pub fn sb_core::outbound::OutboundRegistry::insert(&mut self, name: alloc::string::String, v: sb_core::outbound::OutboundImpl)
pub fn sb_core::outbound::OutboundRegistry::new(map: std::collections::hash::map::HashMap<alloc::string::String, sb_core::outbound::OutboundImpl>) -> Self
impl core::clone::Clone for sb_core::outbound::OutboundRegistry
pub fn sb_core::outbound::OutboundRegistry::clone(&self) -> sb_core::outbound::OutboundRegistry
impl core::default::Default for sb_core::outbound::OutboundRegistry
pub fn sb_core::outbound::OutboundRegistry::default() -> sb_core::outbound::OutboundRegistry
impl core::fmt::Debug for sb_core::outbound::OutboundRegistry
pub fn sb_core::outbound::OutboundRegistry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::OutboundRegistry
impl core::marker::Send for sb_core::outbound::OutboundRegistry
impl core::marker::Sync for sb_core::outbound::OutboundRegistry
impl core::marker::Unpin for sb_core::outbound::OutboundRegistry
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::OutboundRegistry
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::OutboundRegistry
impl<T, U> core::convert::Into<U> for sb_core::outbound::OutboundRegistry where U: core::convert::From<T>
pub fn sb_core::outbound::OutboundRegistry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::OutboundRegistry where U: core::convert::Into<T>
pub type sb_core::outbound::OutboundRegistry::Error = core::convert::Infallible
pub fn sb_core::outbound::OutboundRegistry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::OutboundRegistry where U: core::convert::TryFrom<T>
pub type sb_core::outbound::OutboundRegistry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::OutboundRegistry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::OutboundRegistry where T: core::clone::Clone
pub type sb_core::outbound::OutboundRegistry::Owned = T
pub fn sb_core::outbound::OutboundRegistry::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::OutboundRegistry::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::OutboundRegistry where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::OutboundRegistry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::OutboundRegistry where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundRegistry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::OutboundRegistry where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundRegistry::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::OutboundRegistry where T: core::clone::Clone
pub unsafe fn sb_core::outbound::OutboundRegistry::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::OutboundRegistry
pub fn sb_core::outbound::OutboundRegistry::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::OutboundRegistry
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::OutboundRegistry
impl<T> typenum::type_operators::Same for sb_core::outbound::OutboundRegistry
pub type sb_core::outbound::OutboundRegistry::Output = T
pub struct sb_core::outbound::OutboundRegistryHandle
impl sb_core::outbound::OutboundRegistryHandle
pub async fn sb_core::outbound::OutboundRegistryHandle::connect_tcp(&self, target: &sb_core::outbound::RouteTarget, ep: sb_core::outbound::Endpoint) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub fn sb_core::outbound::OutboundRegistryHandle::new(reg: sb_core::outbound::OutboundRegistry) -> Self
pub fn sb_core::outbound::OutboundRegistryHandle::replace(&self, reg: sb_core::outbound::OutboundRegistry)
impl core::clone::Clone for sb_core::outbound::OutboundRegistryHandle
pub fn sb_core::outbound::OutboundRegistryHandle::clone(&self) -> sb_core::outbound::OutboundRegistryHandle
impl core::default::Default for sb_core::outbound::OutboundRegistryHandle
pub fn sb_core::outbound::OutboundRegistryHandle::default() -> Self
impl core::fmt::Debug for sb_core::outbound::OutboundRegistryHandle
pub fn sb_core::outbound::OutboundRegistryHandle::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::OutboundRegistryHandle
impl core::marker::Send for sb_core::outbound::OutboundRegistryHandle
impl core::marker::Sync for sb_core::outbound::OutboundRegistryHandle
impl core::marker::Unpin for sb_core::outbound::OutboundRegistryHandle
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::OutboundRegistryHandle
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::OutboundRegistryHandle
impl<T, U> core::convert::Into<U> for sb_core::outbound::OutboundRegistryHandle where U: core::convert::From<T>
pub fn sb_core::outbound::OutboundRegistryHandle::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::OutboundRegistryHandle where U: core::convert::Into<T>
pub type sb_core::outbound::OutboundRegistryHandle::Error = core::convert::Infallible
pub fn sb_core::outbound::OutboundRegistryHandle::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::OutboundRegistryHandle where U: core::convert::TryFrom<T>
pub type sb_core::outbound::OutboundRegistryHandle::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::OutboundRegistryHandle::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::OutboundRegistryHandle where T: core::clone::Clone
pub type sb_core::outbound::OutboundRegistryHandle::Owned = T
pub fn sb_core::outbound::OutboundRegistryHandle::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::OutboundRegistryHandle::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::OutboundRegistryHandle where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::OutboundRegistryHandle::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::OutboundRegistryHandle where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundRegistryHandle::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::OutboundRegistryHandle where T: ?core::marker::Sized
pub fn sb_core::outbound::OutboundRegistryHandle::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::OutboundRegistryHandle where T: core::clone::Clone
pub unsafe fn sb_core::outbound::OutboundRegistryHandle::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::OutboundRegistryHandle
pub fn sb_core::outbound::OutboundRegistryHandle::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::OutboundRegistryHandle
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::OutboundRegistryHandle
impl<T> typenum::type_operators::Same for sb_core::outbound::OutboundRegistryHandle
pub type sb_core::outbound::OutboundRegistryHandle::Output = T
pub struct sb_core::outbound::Socks5Config
pub sb_core::outbound::Socks5Config::password: core::option::Option<alloc::string::String>
pub sb_core::outbound::Socks5Config::proxy_addr: core::net::socket_addr::SocketAddr
pub sb_core::outbound::Socks5Config::username: core::option::Option<alloc::string::String>
impl core::clone::Clone for sb_core::outbound::Socks5Config
pub fn sb_core::outbound::Socks5Config::clone(&self) -> sb_core::outbound::Socks5Config
impl core::fmt::Debug for sb_core::outbound::Socks5Config
pub fn sb_core::outbound::Socks5Config::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::Socks5Config
impl core::marker::Send for sb_core::outbound::Socks5Config
impl core::marker::Sync for sb_core::outbound::Socks5Config
impl core::marker::Unpin for sb_core::outbound::Socks5Config
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::Socks5Config
impl core::panic::unwind_safe::UnwindSafe for sb_core::outbound::Socks5Config
impl<T, U> core::convert::Into<U> for sb_core::outbound::Socks5Config where U: core::convert::From<T>
pub fn sb_core::outbound::Socks5Config::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::Socks5Config where U: core::convert::Into<T>
pub type sb_core::outbound::Socks5Config::Error = core::convert::Infallible
pub fn sb_core::outbound::Socks5Config::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::Socks5Config where U: core::convert::TryFrom<T>
pub type sb_core::outbound::Socks5Config::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::Socks5Config::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::Socks5Config where T: core::clone::Clone
pub type sb_core::outbound::Socks5Config::Owned = T
pub fn sb_core::outbound::Socks5Config::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::Socks5Config::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::Socks5Config where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::Socks5Config::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::Socks5Config where T: ?core::marker::Sized
pub fn sb_core::outbound::Socks5Config::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::Socks5Config where T: ?core::marker::Sized
pub fn sb_core::outbound::Socks5Config::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::Socks5Config where T: core::clone::Clone
pub unsafe fn sb_core::outbound::Socks5Config::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::Socks5Config
pub fn sb_core::outbound::Socks5Config::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::Socks5Config
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::Socks5Config
impl<T> typenum::type_operators::Same for sb_core::outbound::Socks5Config
pub type sb_core::outbound::Socks5Config::Output = T
pub trait sb_core::outbound::OutboundConnector: core::marker::Send + core::marker::Sync + core::fmt::Debug
pub fn sb_core::outbound::OutboundConnector::connect_tcp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::OutboundConnector::connect_udp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<alloc::boxed::Box<dyn sb_core::outbound::traits::UdpTransport>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
impl sb_core::outbound::traits::OutboundConnector for sb_core::outbound::direct_connector::DirectConnector
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_tcp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectConnector::connect_udp<'life0, 'life1, 'async_trait>(&'life0 self, ctx: &'life1 sb_core::types::ConnCtx) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<alloc::boxed::Box<dyn sb_core::outbound::traits::UdpTransport>>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub trait sb_core::outbound::UdpTransport: core::marker::Send + core::marker::Sync
pub fn sb_core::outbound::UdpTransport::recv_from<'life0, 'life1, 'async_trait>(&'life0 self, buf: &'life1 mut [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<(usize, core::net::socket_addr::SocketAddr)>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::UdpTransport::send_to<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, buf: &'life1 [u8], dst: &'life2 sb_core::types::Endpoint) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<usize>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait
impl sb_core::outbound::traits::UdpTransport for sb_core::outbound::direct_connector::DirectUdpTransport
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::recv_from<'life0, 'life1, 'async_trait>(&'life0 self, buf: &'life1 mut [u8]) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<(usize, core::net::socket_addr::SocketAddr)>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub fn sb_core::outbound::direct_connector::DirectUdpTransport::send_to<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, buf: &'life1 [u8], dst: &'life2 sb_core::types::Endpoint) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::error::SbResult<usize>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait
pub async fn sb_core::outbound::connect(host: &str, port: u16) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::outbound::dial_all(host: &str, port: u16, per_attempt: core::time::Duration) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::outbound::dial_hostport(host: &str, port: u16, per_attempt: core::time::Duration) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::outbound::dial_pref(host: &str, port: u16) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::outbound::dial_socketaddrs<I>(iter: I, per_attempt: core::time::Duration) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream> where I: core::iter::traits::collect::IntoIterator<Item = core::net::socket_addr::SocketAddr>
pub async fn sb_core::outbound::direct_connect_hostport(host: &str, port: u16, _opts: &sb_core::outbound::ConnectOpts) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub async fn sb_core::outbound::http_proxy_connect_through_proxy(proxy_addr: &str, target_host: &str, target_port: u16, _opts: &sb_core::outbound::ConnectOpts) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub fn sb_core::outbound::per_attempt_timeout() -> core::time::Duration
pub async fn sb_core::outbound::socks5_connect_through_socks5(proxy_addr: &str, target_host: &str, target_port: u16, _opts: &sb_core::outbound::ConnectOpts) -> std::io::error::Result<tokio::net::tcp::stream::TcpStream>
pub mod sb_core::pipeline
pub struct sb_core::pipeline::Pipeline<I: sb_core::pipeline::Inbound>
impl<I: sb_core::pipeline::Inbound> sb_core::pipeline::Pipeline<I>
pub fn sb_core::pipeline::Pipeline<I>::new(inbound: I) -> Self
pub async fn sb_core::pipeline::Pipeline<I>::run(self) -> anyhow::Result<()>
impl<I> core::marker::Freeze for sb_core::pipeline::Pipeline<I> where I: core::marker::Freeze
impl<I> core::marker::Send for sb_core::pipeline::Pipeline<I>
impl<I> core::marker::Sync for sb_core::pipeline::Pipeline<I>
impl<I> core::marker::Unpin for sb_core::pipeline::Pipeline<I> where I: core::marker::Unpin
impl<I> core::panic::unwind_safe::RefUnwindSafe for sb_core::pipeline::Pipeline<I> where I: core::panic::unwind_safe::RefUnwindSafe
impl<I> core::panic::unwind_safe::UnwindSafe for sb_core::pipeline::Pipeline<I> where I: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for sb_core::pipeline::Pipeline<I> where U: core::convert::From<T>
pub fn sb_core::pipeline::Pipeline<I>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::pipeline::Pipeline<I> where U: core::convert::Into<T>
pub type sb_core::pipeline::Pipeline<I>::Error = core::convert::Infallible
pub fn sb_core::pipeline::Pipeline<I>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::pipeline::Pipeline<I> where U: core::convert::TryFrom<T>
pub type sb_core::pipeline::Pipeline<I>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::pipeline::Pipeline<I>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::pipeline::Pipeline<I> where T: 'static + ?core::marker::Sized
pub fn sb_core::pipeline::Pipeline<I>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::pipeline::Pipeline<I> where T: ?core::marker::Sized
pub fn sb_core::pipeline::Pipeline<I>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::pipeline::Pipeline<I> where T: ?core::marker::Sized
pub fn sb_core::pipeline::Pipeline<I>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::pipeline::Pipeline<I>
pub fn sb_core::pipeline::Pipeline<I>::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::pipeline::Pipeline<I>
impl<T> tracing::instrument::WithSubscriber for sb_core::pipeline::Pipeline<I>
impl<T> typenum::type_operators::Same for sb_core::pipeline::Pipeline<I>
pub type sb_core::pipeline::Pipeline<I>::Output = T
pub trait sb_core::pipeline::Inbound: core::marker::Send + core::marker::Sync
pub fn sb_core::pipeline::Inbound::serve<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = anyhow::Result<()>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub trait sb_core::pipeline::Outbound: core::marker::Send + core::marker::Sync
pub fn sb_core::pipeline::Outbound::connect<'life0, 'async_trait>(&'life0 self, dst: sb_core::net::util::Address) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = std::io::error::Result<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::pipeline::Outbound::connect_ex<'life0, 'life1, 'async_trait>(&'life0 self, params: &'life1 sb_core::session::ConnectParams) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = std::io::error::Result<tokio::net::tcp::stream::TcpStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait
pub type sb_core::pipeline::DynOutbound = alloc::sync::Arc<dyn sb_core::pipeline::Outbound>
pub mod sb_core::runtime
pub mod sb_core::runtime::supervisor
pub enum sb_core::runtime::supervisor::ReloadMsg
pub sb_core::runtime::supervisor::ReloadMsg::Apply(sb_config::ir::ConfigIR)
pub sb_core::runtime::supervisor::ReloadMsg::Shutdown
pub sb_core::runtime::supervisor::ReloadMsg::Shutdown::deadline: std::time::Instant
impl core::fmt::Debug for sb_core::runtime::supervisor::ReloadMsg
pub fn sb_core::runtime::supervisor::ReloadMsg::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::runtime::supervisor::ReloadMsg
impl core::marker::Send for sb_core::runtime::supervisor::ReloadMsg
impl core::marker::Sync for sb_core::runtime::supervisor::ReloadMsg
impl core::marker::Unpin for sb_core::runtime::supervisor::ReloadMsg
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::supervisor::ReloadMsg
impl core::panic::unwind_safe::UnwindSafe for sb_core::runtime::supervisor::ReloadMsg
impl<T, U> core::convert::Into<U> for sb_core::runtime::supervisor::ReloadMsg where U: core::convert::From<T>
pub fn sb_core::runtime::supervisor::ReloadMsg::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::supervisor::ReloadMsg where U: core::convert::Into<T>
pub type sb_core::runtime::supervisor::ReloadMsg::Error = core::convert::Infallible
pub fn sb_core::runtime::supervisor::ReloadMsg::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::supervisor::ReloadMsg where U: core::convert::TryFrom<T>
pub type sb_core::runtime::supervisor::ReloadMsg::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::supervisor::ReloadMsg::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::runtime::supervisor::ReloadMsg where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::supervisor::ReloadMsg::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::supervisor::ReloadMsg where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::ReloadMsg::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::supervisor::ReloadMsg where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::ReloadMsg::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::runtime::supervisor::ReloadMsg
pub fn sb_core::runtime::supervisor::ReloadMsg::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::supervisor::ReloadMsg
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::supervisor::ReloadMsg
impl<T> typenum::type_operators::Same for sb_core::runtime::supervisor::ReloadMsg
pub type sb_core::runtime::supervisor::ReloadMsg::Output = T
pub struct sb_core::runtime::supervisor::State
pub sb_core::runtime::supervisor::State::bridge: alloc::sync::Arc<sb_core::Bridge>
pub sb_core::runtime::supervisor::State::health: core::option::Option<tokio::runtime::task::join::JoinHandle<()>>
pub sb_core::runtime::supervisor::State::started_at: std::time::Instant
impl sb_core::runtime::supervisor::State
pub fn sb_core::runtime::supervisor::State::new(_engine: (), bridge: sb_core::Bridge) -> Self
impl core::fmt::Debug for sb_core::runtime::supervisor::State
pub fn sb_core::runtime::supervisor::State::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::runtime::supervisor::State
impl core::marker::Send for sb_core::runtime::supervisor::State
impl core::marker::Sync for sb_core::runtime::supervisor::State
impl core::marker::Unpin for sb_core::runtime::supervisor::State
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::supervisor::State
impl !core::panic::unwind_safe::UnwindSafe for sb_core::runtime::supervisor::State
impl<T, U> core::convert::Into<U> for sb_core::runtime::supervisor::State where U: core::convert::From<T>
pub fn sb_core::runtime::supervisor::State::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::supervisor::State where U: core::convert::Into<T>
pub type sb_core::runtime::supervisor::State::Error = core::convert::Infallible
pub fn sb_core::runtime::supervisor::State::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::supervisor::State where U: core::convert::TryFrom<T>
pub type sb_core::runtime::supervisor::State::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::supervisor::State::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::runtime::supervisor::State where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::supervisor::State::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::supervisor::State where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::State::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::supervisor::State where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::State::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::runtime::supervisor::State
pub fn sb_core::runtime::supervisor::State::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::supervisor::State
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::supervisor::State
impl<T> typenum::type_operators::Same for sb_core::runtime::supervisor::State
pub type sb_core::runtime::supervisor::State::Output = T
pub struct sb_core::runtime::supervisor::Supervisor
impl sb_core::runtime::supervisor::Supervisor
pub fn sb_core::runtime::supervisor::Supervisor::handle(&self) -> sb_core::runtime::supervisor::SupervisorHandle
pub async fn sb_core::runtime::supervisor::Supervisor::reload(&self, new_ir: sb_config::ir::ConfigIR) -> anyhow::Result<sb_config::ir::diff::Diff>
pub async fn sb_core::runtime::supervisor::Supervisor::shutdown_graceful(self, dur: core::time::Duration) -> anyhow::Result<()>
pub async fn sb_core::runtime::supervisor::Supervisor::start(ir: sb_config::ir::ConfigIR) -> anyhow::Result<Self>
pub async fn sb_core::runtime::supervisor::Supervisor::state(&self) -> alloc::sync::Arc<tokio::sync::rwlock::RwLock<sb_core::runtime::supervisor::State>>
impl core::marker::Freeze for sb_core::runtime::supervisor::Supervisor
impl core::marker::Send for sb_core::runtime::supervisor::Supervisor
impl core::marker::Sync for sb_core::runtime::supervisor::Supervisor
impl core::marker::Unpin for sb_core::runtime::supervisor::Supervisor
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::supervisor::Supervisor
impl !core::panic::unwind_safe::UnwindSafe for sb_core::runtime::supervisor::Supervisor
impl<T, U> core::convert::Into<U> for sb_core::runtime::supervisor::Supervisor where U: core::convert::From<T>
pub fn sb_core::runtime::supervisor::Supervisor::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::supervisor::Supervisor where U: core::convert::Into<T>
pub type sb_core::runtime::supervisor::Supervisor::Error = core::convert::Infallible
pub fn sb_core::runtime::supervisor::Supervisor::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::supervisor::Supervisor where U: core::convert::TryFrom<T>
pub type sb_core::runtime::supervisor::Supervisor::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::supervisor::Supervisor::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::runtime::supervisor::Supervisor where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::supervisor::Supervisor::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::supervisor::Supervisor where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::Supervisor::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::supervisor::Supervisor where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::Supervisor::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::runtime::supervisor::Supervisor
pub fn sb_core::runtime::supervisor::Supervisor::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::supervisor::Supervisor
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::supervisor::Supervisor
impl<T> typenum::type_operators::Same for sb_core::runtime::supervisor::Supervisor
pub type sb_core::runtime::supervisor::Supervisor::Output = T
pub struct sb_core::runtime::supervisor::SupervisorHandle
impl sb_core::runtime::supervisor::SupervisorHandle
pub async fn sb_core::runtime::supervisor::SupervisorHandle::reload(&self, new_ir: sb_config::ir::ConfigIR) -> anyhow::Result<sb_config::ir::diff::Diff>
pub async fn sb_core::runtime::supervisor::SupervisorHandle::shutdown_graceful(&self, dur: core::time::Duration) -> anyhow::Result<()>
pub async fn sb_core::runtime::supervisor::SupervisorHandle::state(&self) -> alloc::sync::Arc<tokio::sync::rwlock::RwLock<sb_core::runtime::supervisor::State>>
impl core::clone::Clone for sb_core::runtime::supervisor::SupervisorHandle
pub fn sb_core::runtime::supervisor::SupervisorHandle::clone(&self) -> sb_core::runtime::supervisor::SupervisorHandle
impl core::marker::Freeze for sb_core::runtime::supervisor::SupervisorHandle
impl core::marker::Send for sb_core::runtime::supervisor::SupervisorHandle
impl core::marker::Sync for sb_core::runtime::supervisor::SupervisorHandle
impl core::marker::Unpin for sb_core::runtime::supervisor::SupervisorHandle
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::supervisor::SupervisorHandle
impl !core::panic::unwind_safe::UnwindSafe for sb_core::runtime::supervisor::SupervisorHandle
impl<T, U> core::convert::Into<U> for sb_core::runtime::supervisor::SupervisorHandle where U: core::convert::From<T>
pub fn sb_core::runtime::supervisor::SupervisorHandle::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::supervisor::SupervisorHandle where U: core::convert::Into<T>
pub type sb_core::runtime::supervisor::SupervisorHandle::Error = core::convert::Infallible
pub fn sb_core::runtime::supervisor::SupervisorHandle::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::supervisor::SupervisorHandle where U: core::convert::TryFrom<T>
pub type sb_core::runtime::supervisor::SupervisorHandle::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::supervisor::SupervisorHandle::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::runtime::supervisor::SupervisorHandle where T: core::clone::Clone
pub type sb_core::runtime::supervisor::SupervisorHandle::Owned = T
pub fn sb_core::runtime::supervisor::SupervisorHandle::clone_into(&self, target: &mut T)
pub fn sb_core::runtime::supervisor::SupervisorHandle::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::runtime::supervisor::SupervisorHandle where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::supervisor::SupervisorHandle::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::supervisor::SupervisorHandle where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::SupervisorHandle::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::supervisor::SupervisorHandle where T: ?core::marker::Sized
pub fn sb_core::runtime::supervisor::SupervisorHandle::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::runtime::supervisor::SupervisorHandle where T: core::clone::Clone
pub unsafe fn sb_core::runtime::supervisor::SupervisorHandle::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::runtime::supervisor::SupervisorHandle
pub fn sb_core::runtime::supervisor::SupervisorHandle::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::supervisor::SupervisorHandle
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::supervisor::SupervisorHandle
impl<T> typenum::type_operators::Same for sb_core::runtime::supervisor::SupervisorHandle
pub type sb_core::runtime::supervisor::SupervisorHandle::Output = T
pub fn sb_core::runtime::supervisor::engine_from_ir(_ir: &sb_config::ir::ConfigIR) -> anyhow::Result<()>
pub async fn sb_core::runtime::supervisor::spawn_health_task_async(bridge: alloc::sync::Arc<sb_core::Bridge>, cancel: tokio_util::sync::cancellation_token::CancellationToken)
pub mod sb_core::runtime::switchboard
pub enum sb_core::runtime::switchboard::AdapterError
pub sb_core::runtime::switchboard::AdapterError::InvalidConfig(&'static str)
pub sb_core::runtime::switchboard::AdapterError::Io(std::io::error::Error)
pub sb_core::runtime::switchboard::AdapterError::NotImplemented(alloc::string::String)
pub sb_core::runtime::switchboard::AdapterError::Other(anyhow::Error)
pub sb_core::runtime::switchboard::AdapterError::Timeout(core::time::Duration)
pub sb_core::runtime::switchboard::AdapterError::UnsupportedProtocol(alloc::string::String)
impl core::convert::From<anyhow::Error> for sb_core::runtime::switchboard::AdapterError
pub fn sb_core::runtime::switchboard::AdapterError::from(source: anyhow::Error) -> Self
impl core::convert::From<std::io::error::Error> for sb_core::runtime::switchboard::AdapterError
pub fn sb_core::runtime::switchboard::AdapterError::from(source: std::io::error::Error) -> Self
impl core::error::Error for sb_core::runtime::switchboard::AdapterError
pub fn sb_core::runtime::switchboard::AdapterError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for sb_core::runtime::switchboard::AdapterError
pub fn sb_core::runtime::switchboard::AdapterError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::runtime::switchboard::AdapterError
pub fn sb_core::runtime::switchboard::AdapterError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::runtime::switchboard::AdapterError
impl core::marker::Send for sb_core::runtime::switchboard::AdapterError
impl core::marker::Sync for sb_core::runtime::switchboard::AdapterError
impl core::marker::Unpin for sb_core::runtime::switchboard::AdapterError
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::switchboard::AdapterError
impl !core::panic::unwind_safe::UnwindSafe for sb_core::runtime::switchboard::AdapterError
impl<T, U> core::convert::Into<U> for sb_core::runtime::switchboard::AdapterError where U: core::convert::From<T>
pub fn sb_core::runtime::switchboard::AdapterError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::switchboard::AdapterError where U: core::convert::Into<T>
pub type sb_core::runtime::switchboard::AdapterError::Error = core::convert::Infallible
pub fn sb_core::runtime::switchboard::AdapterError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::switchboard::AdapterError where U: core::convert::TryFrom<T>
pub type sb_core::runtime::switchboard::AdapterError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::switchboard::AdapterError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for sb_core::runtime::switchboard::AdapterError where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::AdapterError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::runtime::switchboard::AdapterError where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::AdapterError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::switchboard::AdapterError where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::AdapterError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::switchboard::AdapterError where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::AdapterError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::runtime::switchboard::AdapterError
pub fn sb_core::runtime::switchboard::AdapterError::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::switchboard::AdapterError
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::switchboard::AdapterError
impl<T> typenum::type_operators::Same for sb_core::runtime::switchboard::AdapterError
pub type sb_core::runtime::switchboard::AdapterError::Output = T
pub enum sb_core::runtime::switchboard::TransportKind
pub sb_core::runtime::switchboard::TransportKind::Tcp
pub sb_core::runtime::switchboard::TransportKind::Udp
impl core::clone::Clone for sb_core::runtime::switchboard::TransportKind
pub fn sb_core::runtime::switchboard::TransportKind::clone(&self) -> sb_core::runtime::switchboard::TransportKind
impl core::cmp::Eq for sb_core::runtime::switchboard::TransportKind
impl core::cmp::PartialEq for sb_core::runtime::switchboard::TransportKind
pub fn sb_core::runtime::switchboard::TransportKind::eq(&self, other: &sb_core::runtime::switchboard::TransportKind) -> bool
impl core::fmt::Debug for sb_core::runtime::switchboard::TransportKind
pub fn sb_core::runtime::switchboard::TransportKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::runtime::switchboard::TransportKind
impl core::marker::Freeze for sb_core::runtime::switchboard::TransportKind
impl core::marker::Send for sb_core::runtime::switchboard::TransportKind
impl core::marker::Sync for sb_core::runtime::switchboard::TransportKind
impl core::marker::Unpin for sb_core::runtime::switchboard::TransportKind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::switchboard::TransportKind
impl core::panic::unwind_safe::UnwindSafe for sb_core::runtime::switchboard::TransportKind
impl<Q, K> equivalent::Equivalent<K> for sb_core::runtime::switchboard::TransportKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::TransportKind::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::runtime::switchboard::TransportKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::runtime::switchboard::TransportKind where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::TransportKind::equivalent(&self, key: &K) -> bool
pub fn sb_core::runtime::switchboard::TransportKind::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::runtime::switchboard::TransportKind where U: core::convert::From<T>
pub fn sb_core::runtime::switchboard::TransportKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::switchboard::TransportKind where U: core::convert::Into<T>
pub type sb_core::runtime::switchboard::TransportKind::Error = core::convert::Infallible
pub fn sb_core::runtime::switchboard::TransportKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::switchboard::TransportKind where U: core::convert::TryFrom<T>
pub type sb_core::runtime::switchboard::TransportKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::switchboard::TransportKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::runtime::switchboard::TransportKind where T: core::clone::Clone
pub type sb_core::runtime::switchboard::TransportKind::Owned = T
pub fn sb_core::runtime::switchboard::TransportKind::clone_into(&self, target: &mut T)
pub fn sb_core::runtime::switchboard::TransportKind::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::runtime::switchboard::TransportKind where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::TransportKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::switchboard::TransportKind where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::TransportKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::switchboard::TransportKind where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::TransportKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::runtime::switchboard::TransportKind where T: core::clone::Clone
pub unsafe fn sb_core::runtime::switchboard::TransportKind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::runtime::switchboard::TransportKind
pub fn sb_core::runtime::switchboard::TransportKind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::switchboard::TransportKind
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::switchboard::TransportKind
impl<T> typenum::type_operators::Same for sb_core::runtime::switchboard::TransportKind
pub type sb_core::runtime::switchboard::TransportKind::Output = T
pub struct sb_core::runtime::switchboard::DialOpts
pub sb_core::runtime::switchboard::DialOpts::connect_timeout: core::time::Duration
pub sb_core::runtime::switchboard::DialOpts::read_timeout: core::time::Duration
impl sb_core::runtime::switchboard::DialOpts
pub fn sb_core::runtime::switchboard::DialOpts::new() -> Self
pub fn sb_core::runtime::switchboard::DialOpts::with_connect_timeout(self, timeout: core::time::Duration) -> Self
pub fn sb_core::runtime::switchboard::DialOpts::with_read_timeout(self, timeout: core::time::Duration) -> Self
impl core::clone::Clone for sb_core::runtime::switchboard::DialOpts
pub fn sb_core::runtime::switchboard::DialOpts::clone(&self) -> sb_core::runtime::switchboard::DialOpts
impl core::default::Default for sb_core::runtime::switchboard::DialOpts
pub fn sb_core::runtime::switchboard::DialOpts::default() -> Self
impl core::fmt::Debug for sb_core::runtime::switchboard::DialOpts
pub fn sb_core::runtime::switchboard::DialOpts::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::runtime::switchboard::DialOpts
impl core::marker::Send for sb_core::runtime::switchboard::DialOpts
impl core::marker::Sync for sb_core::runtime::switchboard::DialOpts
impl core::marker::Unpin for sb_core::runtime::switchboard::DialOpts
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::switchboard::DialOpts
impl core::panic::unwind_safe::UnwindSafe for sb_core::runtime::switchboard::DialOpts
impl<T, U> core::convert::Into<U> for sb_core::runtime::switchboard::DialOpts where U: core::convert::From<T>
pub fn sb_core::runtime::switchboard::DialOpts::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::switchboard::DialOpts where U: core::convert::Into<T>
pub type sb_core::runtime::switchboard::DialOpts::Error = core::convert::Infallible
pub fn sb_core::runtime::switchboard::DialOpts::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::switchboard::DialOpts where U: core::convert::TryFrom<T>
pub type sb_core::runtime::switchboard::DialOpts::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::switchboard::DialOpts::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::runtime::switchboard::DialOpts where T: core::clone::Clone
pub type sb_core::runtime::switchboard::DialOpts::Owned = T
pub fn sb_core::runtime::switchboard::DialOpts::clone_into(&self, target: &mut T)
pub fn sb_core::runtime::switchboard::DialOpts::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::runtime::switchboard::DialOpts where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::DialOpts::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::switchboard::DialOpts where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::DialOpts::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::switchboard::DialOpts where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::DialOpts::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::runtime::switchboard::DialOpts where T: core::clone::Clone
pub unsafe fn sb_core::runtime::switchboard::DialOpts::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::runtime::switchboard::DialOpts
pub fn sb_core::runtime::switchboard::DialOpts::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::switchboard::DialOpts
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::switchboard::DialOpts
impl<T> typenum::type_operators::Same for sb_core::runtime::switchboard::DialOpts
pub type sb_core::runtime::switchboard::DialOpts::Output = T
pub struct sb_core::runtime::switchboard::OutboundSwitchboard
impl sb_core::runtime::switchboard::OutboundSwitchboard
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::get_connector(&self, name: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::runtime::switchboard::OutboundConnector>>
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::is_empty(&self) -> bool
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::len(&self) -> usize
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::list_connectors(&self) -> alloc::vec::Vec<alloc::string::String>
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::new() -> Self
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::register<C>(&mut self, name: alloc::string::String, connector: C) -> sb_core::error::SbResult<()> where C: sb_core::runtime::switchboard::OutboundConnector + 'static
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::set_default<C>(&mut self, connector: C) -> sb_core::error::SbResult<()> where C: sb_core::runtime::switchboard::OutboundConnector + 'static
impl core::default::Default for sb_core::runtime::switchboard::OutboundSwitchboard
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::default() -> Self
impl core::fmt::Debug for sb_core::runtime::switchboard::OutboundSwitchboard
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::runtime::switchboard::OutboundSwitchboard
impl core::marker::Send for sb_core::runtime::switchboard::OutboundSwitchboard
impl core::marker::Sync for sb_core::runtime::switchboard::OutboundSwitchboard
impl core::marker::Unpin for sb_core::runtime::switchboard::OutboundSwitchboard
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::switchboard::OutboundSwitchboard
impl !core::panic::unwind_safe::UnwindSafe for sb_core::runtime::switchboard::OutboundSwitchboard
impl<T, U> core::convert::Into<U> for sb_core::runtime::switchboard::OutboundSwitchboard where U: core::convert::From<T>
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::switchboard::OutboundSwitchboard where U: core::convert::Into<T>
pub type sb_core::runtime::switchboard::OutboundSwitchboard::Error = core::convert::Infallible
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::switchboard::OutboundSwitchboard where U: core::convert::TryFrom<T>
pub type sb_core::runtime::switchboard::OutboundSwitchboard::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::runtime::switchboard::OutboundSwitchboard where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::switchboard::OutboundSwitchboard where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::switchboard::OutboundSwitchboard where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::runtime::switchboard::OutboundSwitchboard
pub fn sb_core::runtime::switchboard::OutboundSwitchboard::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::switchboard::OutboundSwitchboard
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::switchboard::OutboundSwitchboard
impl<T> typenum::type_operators::Same for sb_core::runtime::switchboard::OutboundSwitchboard
pub type sb_core::runtime::switchboard::OutboundSwitchboard::Output = T
pub struct sb_core::runtime::switchboard::SwitchboardBuilder
impl sb_core::runtime::switchboard::SwitchboardBuilder
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::build(self) -> sb_core::runtime::switchboard::OutboundSwitchboard
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::from_config_ir(ir: &sb_config::ir::ConfigIR) -> sb_core::error::SbResult<sb_core::runtime::switchboard::OutboundSwitchboard>
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::new() -> Self
impl core::default::Default for sb_core::runtime::switchboard::SwitchboardBuilder
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::default() -> Self
impl core::marker::Freeze for sb_core::runtime::switchboard::SwitchboardBuilder
impl core::marker::Send for sb_core::runtime::switchboard::SwitchboardBuilder
impl core::marker::Sync for sb_core::runtime::switchboard::SwitchboardBuilder
impl core::marker::Unpin for sb_core::runtime::switchboard::SwitchboardBuilder
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::switchboard::SwitchboardBuilder
impl !core::panic::unwind_safe::UnwindSafe for sb_core::runtime::switchboard::SwitchboardBuilder
impl<T, U> core::convert::Into<U> for sb_core::runtime::switchboard::SwitchboardBuilder where U: core::convert::From<T>
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::switchboard::SwitchboardBuilder where U: core::convert::Into<T>
pub type sb_core::runtime::switchboard::SwitchboardBuilder::Error = core::convert::Infallible
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::switchboard::SwitchboardBuilder where U: core::convert::TryFrom<T>
pub type sb_core::runtime::switchboard::SwitchboardBuilder::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::runtime::switchboard::SwitchboardBuilder where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::switchboard::SwitchboardBuilder where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::switchboard::SwitchboardBuilder where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::runtime::switchboard::SwitchboardBuilder
pub fn sb_core::runtime::switchboard::SwitchboardBuilder::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::switchboard::SwitchboardBuilder
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::switchboard::SwitchboardBuilder
impl<T> typenum::type_operators::Same for sb_core::runtime::switchboard::SwitchboardBuilder
pub type sb_core::runtime::switchboard::SwitchboardBuilder::Output = T
pub struct sb_core::runtime::switchboard::Target
pub sb_core::runtime::switchboard::Target::host: alloc::string::String
pub sb_core::runtime::switchboard::Target::kind: sb_core::runtime::switchboard::TransportKind
pub sb_core::runtime::switchboard::Target::port: u16
impl sb_core::runtime::switchboard::Target
pub fn sb_core::runtime::switchboard::Target::new(host: impl core::convert::Into<alloc::string::String>, port: u16, kind: sb_core::runtime::switchboard::TransportKind) -> Self
pub fn sb_core::runtime::switchboard::Target::tcp(host: impl core::convert::Into<alloc::string::String>, port: u16) -> Self
pub fn sb_core::runtime::switchboard::Target::udp(host: impl core::convert::Into<alloc::string::String>, port: u16) -> Self
impl core::clone::Clone for sb_core::runtime::switchboard::Target
pub fn sb_core::runtime::switchboard::Target::clone(&self) -> sb_core::runtime::switchboard::Target
impl core::fmt::Debug for sb_core::runtime::switchboard::Target
pub fn sb_core::runtime::switchboard::Target::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::runtime::switchboard::Target
impl core::marker::Send for sb_core::runtime::switchboard::Target
impl core::marker::Sync for sb_core::runtime::switchboard::Target
impl core::marker::Unpin for sb_core::runtime::switchboard::Target
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::switchboard::Target
impl core::panic::unwind_safe::UnwindSafe for sb_core::runtime::switchboard::Target
impl<T, U> core::convert::Into<U> for sb_core::runtime::switchboard::Target where U: core::convert::From<T>
pub fn sb_core::runtime::switchboard::Target::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::switchboard::Target where U: core::convert::Into<T>
pub type sb_core::runtime::switchboard::Target::Error = core::convert::Infallible
pub fn sb_core::runtime::switchboard::Target::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::switchboard::Target where U: core::convert::TryFrom<T>
pub type sb_core::runtime::switchboard::Target::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::switchboard::Target::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::runtime::switchboard::Target where T: core::clone::Clone
pub type sb_core::runtime::switchboard::Target::Owned = T
pub fn sb_core::runtime::switchboard::Target::clone_into(&self, target: &mut T)
pub fn sb_core::runtime::switchboard::Target::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::runtime::switchboard::Target where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::switchboard::Target::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::switchboard::Target where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::Target::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::switchboard::Target where T: ?core::marker::Sized
pub fn sb_core::runtime::switchboard::Target::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::runtime::switchboard::Target where T: core::clone::Clone
pub unsafe fn sb_core::runtime::switchboard::Target::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::runtime::switchboard::Target
pub fn sb_core::runtime::switchboard::Target::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::switchboard::Target
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::switchboard::Target
impl<T> typenum::type_operators::Same for sb_core::runtime::switchboard::Target
pub type sb_core::runtime::switchboard::Target::Output = T
pub trait sb_core::runtime::switchboard::AsyncStream: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin + core::marker::Send
impl<T> sb_core::runtime::switchboard::AsyncStream for T where T: tokio::io::async_read::AsyncRead + tokio::io::async_write::AsyncWrite + core::marker::Unpin + core::marker::Send
pub trait sb_core::runtime::switchboard::OutboundConnector: core::marker::Send + core::marker::Sync + core::fmt::Debug
pub fn sb_core::runtime::switchboard::OutboundConnector::dial<'life0, 'async_trait>(&'life0 self, target: sb_core::runtime::switchboard::Target, opts: sb_core::runtime::switchboard::DialOpts) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::runtime::switchboard::AdapterResult<sb_core::runtime::switchboard::BoxedStream>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub fn sb_core::runtime::switchboard::OutboundConnector::name(&self) -> &'static str
pub fn sb_core::runtime::switchboard::OutboundConnector::start<'life0, 'async_trait>(&'life0 self) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = sb_core::runtime::switchboard::AdapterResult<()>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait
pub type sb_core::runtime::switchboard::AdapterResult<T> = core::result::Result<T, sb_core::runtime::switchboard::AdapterError>
pub type sb_core::runtime::switchboard::BoxedStream = alloc::boxed::Box<dyn sb_core::runtime::switchboard::AsyncStream>
pub struct sb_core::runtime::Runtime<'a>
pub sb_core::runtime::Runtime::bridge: alloc::sync::Arc<sb_core::Bridge>
pub sb_core::runtime::Runtime::switchboard: alloc::sync::Arc<sb_core::runtime::switchboard::OutboundSwitchboard>
impl<'a> sb_core::runtime::Runtime<'a>
pub fn sb_core::runtime::Runtime<'a>::bridge(&self) -> &alloc::sync::Arc<sb_core::Bridge>
pub fn sb_core::runtime::Runtime<'a>::dummy_bridge() -> alloc::sync::Arc<sb_core::Bridge>
pub fn sb_core::runtime::Runtime<'a>::dummy_engine() -> core::result::Result<(), anyhow::Error>
pub fn sb_core::runtime::Runtime<'a>::dummy_switchboard() -> alloc::sync::Arc<sb_core::runtime::switchboard::OutboundSwitchboard>
pub fn sb_core::runtime::Runtime<'a>::engine(&self) -> core::result::Result<(), anyhow::Error>
pub fn sb_core::runtime::Runtime<'a>::shutdown(self)
pub fn sb_core::runtime::Runtime<'a>::start(self) -> Self
pub fn sb_core::runtime::Runtime<'a>::supervisor(&self) -> core::option::Option<&alloc::sync::Arc<sb_core::runtime::supervisor::Supervisor>>
pub fn sb_core::runtime::Runtime<'a>::switchboard(&self) -> &alloc::sync::Arc<sb_core::runtime::switchboard::OutboundSwitchboard>
pub fn sb_core::runtime::Runtime<'a>::with_health(self) -> Self
pub fn sb_core::runtime::Runtime<'a>::with_supervisor(self, supervisor: alloc::sync::Arc<sb_core::runtime::supervisor::Supervisor>) -> Self
impl<'a> sb_core::runtime::Runtime<'a>
pub fn sb_core::runtime::Runtime<'a>::new(_engine: (), bridge: sb_core::Bridge, switchboard: sb_core::runtime::switchboard::OutboundSwitchboard) -> Self
impl<'a> core::marker::Freeze for sb_core::runtime::Runtime<'a>
impl<'a> core::marker::Send for sb_core::runtime::Runtime<'a>
impl<'a> core::marker::Sync for sb_core::runtime::Runtime<'a>
impl<'a> core::marker::Unpin for sb_core::runtime::Runtime<'a>
impl<'a> !core::panic::unwind_safe::RefUnwindSafe for sb_core::runtime::Runtime<'a>
impl<'a> !core::panic::unwind_safe::UnwindSafe for sb_core::runtime::Runtime<'a>
impl<T, U> core::convert::Into<U> for sb_core::runtime::Runtime<'a> where U: core::convert::From<T>
pub fn sb_core::runtime::Runtime<'a>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::runtime::Runtime<'a> where U: core::convert::Into<T>
pub type sb_core::runtime::Runtime<'a>::Error = core::convert::Infallible
pub fn sb_core::runtime::Runtime<'a>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::runtime::Runtime<'a> where U: core::convert::TryFrom<T>
pub type sb_core::runtime::Runtime<'a>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::runtime::Runtime<'a>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::runtime::Runtime<'a> where T: 'static + ?core::marker::Sized
pub fn sb_core::runtime::Runtime<'a>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::runtime::Runtime<'a> where T: ?core::marker::Sized
pub fn sb_core::runtime::Runtime<'a>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::runtime::Runtime<'a> where T: ?core::marker::Sized
pub fn sb_core::runtime::Runtime<'a>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::runtime::Runtime<'a>
pub fn sb_core::runtime::Runtime<'a>::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::runtime::Runtime<'a>
impl<T> tracing::instrument::WithSubscriber for sb_core::runtime::Runtime<'a>
impl<T> typenum::type_operators::Same for sb_core::runtime::Runtime<'a>
pub type sb_core::runtime::Runtime<'a>::Output = T
pub mod sb_core::session
pub enum sb_core::session::Transport
pub sb_core::session::Transport::Other
pub sb_core::session::Transport::Tcp
pub sb_core::session::Transport::Udp
impl core::clone::Clone for sb_core::session::Transport
pub fn sb_core::session::Transport::clone(&self) -> sb_core::session::Transport
impl core::fmt::Debug for sb_core::session::Transport
pub fn sb_core::session::Transport::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::session::Transport
impl core::marker::Send for sb_core::session::Transport
impl core::marker::Sync for sb_core::session::Transport
impl core::marker::Unpin for sb_core::session::Transport
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::session::Transport
impl core::panic::unwind_safe::UnwindSafe for sb_core::session::Transport
impl<T, U> core::convert::Into<U> for sb_core::session::Transport where U: core::convert::From<T>
pub fn sb_core::session::Transport::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::session::Transport where U: core::convert::Into<T>
pub type sb_core::session::Transport::Error = core::convert::Infallible
pub fn sb_core::session::Transport::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::session::Transport where U: core::convert::TryFrom<T>
pub type sb_core::session::Transport::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::session::Transport::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::session::Transport where T: core::clone::Clone
pub type sb_core::session::Transport::Owned = T
pub fn sb_core::session::Transport::clone_into(&self, target: &mut T)
pub fn sb_core::session::Transport::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::session::Transport where T: 'static + ?core::marker::Sized
pub fn sb_core::session::Transport::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::session::Transport where T: ?core::marker::Sized
pub fn sb_core::session::Transport::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::session::Transport where T: ?core::marker::Sized
pub fn sb_core::session::Transport::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::session::Transport where T: core::clone::Clone
pub unsafe fn sb_core::session::Transport::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::session::Transport
pub fn sb_core::session::Transport::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::session::Transport
impl<T> tracing::instrument::WithSubscriber for sb_core::session::Transport
impl<T> typenum::type_operators::Same for sb_core::session::Transport
pub type sb_core::session::Transport::Output = T
pub struct sb_core::session::ConnectParams
pub sb_core::session::ConnectParams::connect_timeout: core::option::Option<core::time::Duration>
pub sb_core::session::ConnectParams::deadline: core::option::Option<std::time::Instant>
pub sb_core::session::ConnectParams::inbound: core::option::Option<alloc::string::String>
pub sb_core::session::ConnectParams::sniff_host: core::option::Option<alloc::string::String>
pub sb_core::session::ConnectParams::target: sb_core::net::util::Address
pub sb_core::session::ConnectParams::transport: core::option::Option<sb_core::session::Transport>
pub sb_core::session::ConnectParams::user: core::option::Option<alloc::string::String>
impl core::clone::Clone for sb_core::session::ConnectParams
pub fn sb_core::session::ConnectParams::clone(&self) -> sb_core::session::ConnectParams
impl core::default::Default for sb_core::session::ConnectParams
pub fn sb_core::session::ConnectParams::default() -> Self
impl core::fmt::Debug for sb_core::session::ConnectParams
pub fn sb_core::session::ConnectParams::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::session::ConnectParams
impl core::marker::Send for sb_core::session::ConnectParams
impl core::marker::Sync for sb_core::session::ConnectParams
impl core::marker::Unpin for sb_core::session::ConnectParams
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::session::ConnectParams
impl core::panic::unwind_safe::UnwindSafe for sb_core::session::ConnectParams
impl<T, U> core::convert::Into<U> for sb_core::session::ConnectParams where U: core::convert::From<T>
pub fn sb_core::session::ConnectParams::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::session::ConnectParams where U: core::convert::Into<T>
pub type sb_core::session::ConnectParams::Error = core::convert::Infallible
pub fn sb_core::session::ConnectParams::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::session::ConnectParams where U: core::convert::TryFrom<T>
pub type sb_core::session::ConnectParams::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::session::ConnectParams::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::session::ConnectParams where T: core::clone::Clone
pub type sb_core::session::ConnectParams::Owned = T
pub fn sb_core::session::ConnectParams::clone_into(&self, target: &mut T)
pub fn sb_core::session::ConnectParams::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::session::ConnectParams where T: 'static + ?core::marker::Sized
pub fn sb_core::session::ConnectParams::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::session::ConnectParams where T: ?core::marker::Sized
pub fn sb_core::session::ConnectParams::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::session::ConnectParams where T: ?core::marker::Sized
pub fn sb_core::session::ConnectParams::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::session::ConnectParams where T: core::clone::Clone
pub unsafe fn sb_core::session::ConnectParams::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::session::ConnectParams
pub fn sb_core::session::ConnectParams::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::session::ConnectParams
impl<T> tracing::instrument::WithSubscriber for sb_core::session::ConnectParams
impl<T> typenum::type_operators::Same for sb_core::session::ConnectParams
pub type sb_core::session::ConnectParams::Output = T
pub mod sb_core::socks5
pub fn sb_core::socks5::decode_udp_reply(buf: &[u8]) -> anyhow::Result<(core::net::socket_addr::SocketAddr, &[u8])>
pub fn sb_core::socks5::encode_udp_request(dst: &core::net::socket_addr::SocketAddr, payload: &[u8]) -> alloc::vec::Vec<u8>
pub async fn sb_core::socks5::greet_noauth(stream: &mut tokio::net::tcp::stream::TcpStream) -> anyhow::Result<()>
pub async fn sb_core::socks5::udp_associate(stream: &mut tokio::net::tcp::stream::TcpStream, bind: core::net::socket_addr::SocketAddr) -> anyhow::Result<core::net::socket_addr::SocketAddr>
pub mod sb_core::subscribe
pub struct sb_core::subscribe::Diff
pub sb_core::subscribe::Diff::added: alloc::collections::btree::map::BTreeMap<alloc::string::String, usize>
pub sb_core::subscribe::Diff::removed: alloc::collections::btree::map::BTreeMap<alloc::string::String, usize>
impl core::clone::Clone for sb_core::subscribe::Diff
pub fn sb_core::subscribe::Diff::clone(&self) -> sb_core::subscribe::Diff
impl core::default::Default for sb_core::subscribe::Diff
pub fn sb_core::subscribe::Diff::default() -> sb_core::subscribe::Diff
impl core::fmt::Debug for sb_core::subscribe::Diff
pub fn sb_core::subscribe::Diff::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::subscribe::Diff
impl core::marker::Send for sb_core::subscribe::Diff
impl core::marker::Sync for sb_core::subscribe::Diff
impl core::marker::Unpin for sb_core::subscribe::Diff
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::subscribe::Diff
impl core::panic::unwind_safe::UnwindSafe for sb_core::subscribe::Diff
impl<T, U> core::convert::Into<U> for sb_core::subscribe::Diff where U: core::convert::From<T>
pub fn sb_core::subscribe::Diff::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::subscribe::Diff where U: core::convert::Into<T>
pub type sb_core::subscribe::Diff::Error = core::convert::Infallible
pub fn sb_core::subscribe::Diff::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::subscribe::Diff where U: core::convert::TryFrom<T>
pub type sb_core::subscribe::Diff::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::subscribe::Diff::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::subscribe::Diff where T: core::clone::Clone
pub type sb_core::subscribe::Diff::Owned = T
pub fn sb_core::subscribe::Diff::clone_into(&self, target: &mut T)
pub fn sb_core::subscribe::Diff::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::subscribe::Diff where T: 'static + ?core::marker::Sized
pub fn sb_core::subscribe::Diff::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::subscribe::Diff where T: ?core::marker::Sized
pub fn sb_core::subscribe::Diff::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::subscribe::Diff where T: ?core::marker::Sized
pub fn sb_core::subscribe::Diff::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::subscribe::Diff where T: core::clone::Clone
pub unsafe fn sb_core::subscribe::Diff::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::subscribe::Diff
pub fn sb_core::subscribe::Diff::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::subscribe::Diff
impl<T> tracing::instrument::WithSubscriber for sb_core::subscribe::Diff
impl<T> typenum::type_operators::Same for sb_core::subscribe::Diff
pub type sb_core::subscribe::Diff::Output = T
pub struct sb_core::subscribe::MergeResult
pub sb_core::subscribe::MergeResult::added_inbounds: usize
pub sb_core::subscribe::MergeResult::added_outbounds: usize
pub sb_core::subscribe::MergeResult::added_rules: usize
impl core::clone::Clone for sb_core::subscribe::MergeResult
pub fn sb_core::subscribe::MergeResult::clone(&self) -> sb_core::subscribe::MergeResult
impl core::default::Default for sb_core::subscribe::MergeResult
pub fn sb_core::subscribe::MergeResult::default() -> sb_core::subscribe::MergeResult
impl core::fmt::Debug for sb_core::subscribe::MergeResult
pub fn sb_core::subscribe::MergeResult::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::subscribe::MergeResult
impl core::marker::Send for sb_core::subscribe::MergeResult
impl core::marker::Sync for sb_core::subscribe::MergeResult
impl core::marker::Unpin for sb_core::subscribe::MergeResult
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::subscribe::MergeResult
impl core::panic::unwind_safe::UnwindSafe for sb_core::subscribe::MergeResult
impl<T, U> core::convert::Into<U> for sb_core::subscribe::MergeResult where U: core::convert::From<T>
pub fn sb_core::subscribe::MergeResult::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::subscribe::MergeResult where U: core::convert::Into<T>
pub type sb_core::subscribe::MergeResult::Error = core::convert::Infallible
pub fn sb_core::subscribe::MergeResult::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::subscribe::MergeResult where U: core::convert::TryFrom<T>
pub type sb_core::subscribe::MergeResult::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::subscribe::MergeResult::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::subscribe::MergeResult where T: core::clone::Clone
pub type sb_core::subscribe::MergeResult::Owned = T
pub fn sb_core::subscribe::MergeResult::clone_into(&self, target: &mut T)
pub fn sb_core::subscribe::MergeResult::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::subscribe::MergeResult where T: 'static + ?core::marker::Sized
pub fn sb_core::subscribe::MergeResult::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::subscribe::MergeResult where T: ?core::marker::Sized
pub fn sb_core::subscribe::MergeResult::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::subscribe::MergeResult where T: ?core::marker::Sized
pub fn sb_core::subscribe::MergeResult::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::subscribe::MergeResult where T: core::clone::Clone
pub unsafe fn sb_core::subscribe::MergeResult::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::subscribe::MergeResult
pub fn sb_core::subscribe::MergeResult::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::subscribe::MergeResult
impl<T> tracing::instrument::WithSubscriber for sb_core::subscribe::MergeResult
impl<T> typenum::type_operators::Same for sb_core::subscribe::MergeResult
pub type sb_core::subscribe::MergeResult::Output = T
pub fn sb_core::subscribe::diff(old: &serde_json::value::Value, new: &serde_json::value::Value) -> sb_core::subscribe::Diff
pub fn sb_core::subscribe::merge(base: serde_json::value::Value, others: &[serde_json::value::Value]) -> (serde_json::value::Value, sb_core::subscribe::MergeResult)
pub mod sb_core::telemetry
pub mod sb_core::telemetry::dial
pub enum sb_core::telemetry::dial::Phase
pub sb_core::telemetry::dial::Phase::ProxyHandshake
pub sb_core::telemetry::dial::Phase::TcpConnect
pub sb_core::telemetry::dial::Phase::TlsHandshake
impl sb_core::telemetry::dial::Phase
pub fn sb_core::telemetry::dial::Phase::as_str(&self) -> &'static str
impl core::clone::Clone for sb_core::telemetry::dial::Phase
pub fn sb_core::telemetry::dial::Phase::clone(&self) -> sb_core::telemetry::dial::Phase
impl core::marker::Copy for sb_core::telemetry::dial::Phase
impl core::marker::Freeze for sb_core::telemetry::dial::Phase
impl core::marker::Send for sb_core::telemetry::dial::Phase
impl core::marker::Sync for sb_core::telemetry::dial::Phase
impl core::marker::Unpin for sb_core::telemetry::dial::Phase
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::telemetry::dial::Phase
impl core::panic::unwind_safe::UnwindSafe for sb_core::telemetry::dial::Phase
impl<T, U> core::convert::Into<U> for sb_core::telemetry::dial::Phase where U: core::convert::From<T>
pub fn sb_core::telemetry::dial::Phase::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::telemetry::dial::Phase where U: core::convert::Into<T>
pub type sb_core::telemetry::dial::Phase::Error = core::convert::Infallible
pub fn sb_core::telemetry::dial::Phase::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::telemetry::dial::Phase where U: core::convert::TryFrom<T>
pub type sb_core::telemetry::dial::Phase::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::telemetry::dial::Phase::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::telemetry::dial::Phase where T: core::clone::Clone
pub type sb_core::telemetry::dial::Phase::Owned = T
pub fn sb_core::telemetry::dial::Phase::clone_into(&self, target: &mut T)
pub fn sb_core::telemetry::dial::Phase::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::telemetry::dial::Phase where T: 'static + ?core::marker::Sized
pub fn sb_core::telemetry::dial::Phase::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::telemetry::dial::Phase where T: ?core::marker::Sized
pub fn sb_core::telemetry::dial::Phase::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::telemetry::dial::Phase where T: ?core::marker::Sized
pub fn sb_core::telemetry::dial::Phase::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::telemetry::dial::Phase where T: core::clone::Clone
pub unsafe fn sb_core::telemetry::dial::Phase::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::telemetry::dial::Phase
pub fn sb_core::telemetry::dial::Phase::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::telemetry::dial::Phase
impl<T> tracing::instrument::WithSubscriber for sb_core::telemetry::dial::Phase
impl<T> typenum::type_operators::Same for sb_core::telemetry::dial::Phase
pub type sb_core::telemetry::dial::Phase::Output = T
pub fn sb_core::telemetry::dial::record_err(kind: &'static str, phase: sb_core::telemetry::dial::Phase, t0: std::time::Instant, class: &'static str)
pub fn sb_core::telemetry::dial::record_ok(kind: &'static str, phase: sb_core::telemetry::dial::Phase, t0: std::time::Instant)
pub fn sb_core::telemetry::dial::start() -> std::time::Instant
pub mod sb_core::telemetry::error_class
pub fn sb_core::telemetry::error_class::classify_io(err: &std::io::error::Error) -> &'static str
pub fn sb_core::telemetry::error_class::classify_proto(err: &(dyn core::error::Error + 'static)) -> &'static str
pub fn sb_core::telemetry::error_class::error_class(err: &std::io::error::Error) -> &'static str
pub fn sb_core::telemetry::err_kind(e: &std::io::error::Error) -> &'static str
pub fn sb_core::telemetry::http_status_err(status: u16) -> (&'static str, &'static str)
pub fn sb_core::telemetry::inbound_forward(label: &'static str, result: &'static str, err: core::option::Option<&'static str>)
pub fn sb_core::telemetry::inbound_parse(kind: &'static str, result: &'static str, reason: &'static str)
pub fn sb_core::telemetry::outbound_connect(kind: &'static str, result: &'static str, err: core::option::Option<&'static str>)
pub fn sb_core::telemetry::outbound_handshake(kind: &'static str, result: &'static str, err: core::option::Option<&'static str>)
pub fn sb_core::telemetry::router_select(mode: &'static str, target: &sb_core::outbound::RouteTarget)
pub fn sb_core::telemetry::socks5_rep_err(rep: u8) -> &'static str
pub mod sb_core::tls
pub mod sb_core::tls::danger
pub struct sb_core::tls::danger::NoVerify
impl sb_core::tls::danger::NoVerify
pub fn sb_core::tls::danger::NoVerify::new() -> Self
impl core::fmt::Debug for sb_core::tls::danger::NoVerify
pub fn sb_core::tls::danger::NoVerify::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::tls::danger::NoVerify
pub fn sb_core::tls::danger::NoVerify::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::tls::danger::NoVerify
impl core::marker::Send for sb_core::tls::danger::NoVerify
impl core::marker::Sync for sb_core::tls::danger::NoVerify
impl core::marker::Unpin for sb_core::tls::danger::NoVerify
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::tls::danger::NoVerify
impl core::panic::unwind_safe::UnwindSafe for sb_core::tls::danger::NoVerify
impl<T, U> core::convert::Into<U> for sb_core::tls::danger::NoVerify where U: core::convert::From<T>
pub fn sb_core::tls::danger::NoVerify::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::tls::danger::NoVerify where U: core::convert::Into<T>
pub type sb_core::tls::danger::NoVerify::Error = core::convert::Infallible
pub fn sb_core::tls::danger::NoVerify::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::tls::danger::NoVerify where U: core::convert::TryFrom<T>
pub type sb_core::tls::danger::NoVerify::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::tls::danger::NoVerify::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for sb_core::tls::danger::NoVerify where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::tls::danger::NoVerify::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::tls::danger::NoVerify where T: 'static + ?core::marker::Sized
pub fn sb_core::tls::danger::NoVerify::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::tls::danger::NoVerify where T: ?core::marker::Sized
pub fn sb_core::tls::danger::NoVerify::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::tls::danger::NoVerify where T: ?core::marker::Sized
pub fn sb_core::tls::danger::NoVerify::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::tls::danger::NoVerify
pub fn sb_core::tls::danger::NoVerify::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::tls::danger::NoVerify
impl<T> tracing::instrument::WithSubscriber for sb_core::tls::danger::NoVerify
impl<T> typenum::type_operators::Same for sb_core::tls::danger::NoVerify
pub type sb_core::tls::danger::NoVerify::Output = T
pub struct sb_core::tls::danger::PinVerify
impl sb_core::tls::danger::PinVerify
pub fn sb_core::tls::danger::PinVerify::new(pins: alloc::vec::Vec<[u8; 32]>) -> Self
impl core::fmt::Debug for sb_core::tls::danger::PinVerify
pub fn sb_core::tls::danger::PinVerify::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::tls::danger::PinVerify
pub fn sb_core::tls::danger::PinVerify::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::tls::danger::PinVerify
impl core::marker::Send for sb_core::tls::danger::PinVerify
impl core::marker::Sync for sb_core::tls::danger::PinVerify
impl core::marker::Unpin for sb_core::tls::danger::PinVerify
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::tls::danger::PinVerify
impl core::panic::unwind_safe::UnwindSafe for sb_core::tls::danger::PinVerify
impl<T, U> core::convert::Into<U> for sb_core::tls::danger::PinVerify where U: core::convert::From<T>
pub fn sb_core::tls::danger::PinVerify::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::tls::danger::PinVerify where U: core::convert::Into<T>
pub type sb_core::tls::danger::PinVerify::Error = core::convert::Infallible
pub fn sb_core::tls::danger::PinVerify::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::tls::danger::PinVerify where U: core::convert::TryFrom<T>
pub type sb_core::tls::danger::PinVerify::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::tls::danger::PinVerify::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for sb_core::tls::danger::PinVerify where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::tls::danger::PinVerify::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::tls::danger::PinVerify where T: 'static + ?core::marker::Sized
pub fn sb_core::tls::danger::PinVerify::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::tls::danger::PinVerify where T: ?core::marker::Sized
pub fn sb_core::tls::danger::PinVerify::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::tls::danger::PinVerify where T: ?core::marker::Sized
pub fn sb_core::tls::danger::PinVerify::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::tls::danger::PinVerify
pub fn sb_core::tls::danger::PinVerify::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::tls::danger::PinVerify
impl<T> tracing::instrument::WithSubscriber for sb_core::tls::danger::PinVerify
impl<T> typenum::type_operators::Same for sb_core::tls::danger::PinVerify
pub type sb_core::tls::danger::PinVerify::Output = T
pub mod sb_core::tls::trust
pub struct sb_core::tls::trust::TlsOpts
pub sb_core::tls::trust::TlsOpts::allow_insecure: bool
pub sb_core::tls::trust::TlsOpts::alpn: alloc::vec::Vec<alloc::vec::Vec<u8>>
pub sb_core::tls::trust::TlsOpts::pin_sha256: alloc::vec::Vec<[u8; 32]>
pub sb_core::tls::trust::TlsOpts::sni: alloc::string::String
impl sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::new(sni: alloc::string::String) -> Self
pub fn sb_core::tls::trust::TlsOpts::with_allow_insecure(self, allow: bool) -> Self
pub fn sb_core::tls::trust::TlsOpts::with_alpn(self, alpn: alloc::vec::Vec<alloc::vec::Vec<u8>>) -> Self
pub fn sb_core::tls::trust::TlsOpts::with_pins(self, pins: alloc::vec::Vec<[u8; 32]>) -> Self
impl core::clone::Clone for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::clone(&self) -> sb_core::tls::trust::TlsOpts
impl core::default::Default for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::default() -> Self
impl core::fmt::Debug for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::tls::trust::TlsOpts
impl core::marker::Send for sb_core::tls::trust::TlsOpts
impl core::marker::Sync for sb_core::tls::trust::TlsOpts
impl core::marker::Unpin for sb_core::tls::trust::TlsOpts
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::tls::trust::TlsOpts
impl core::panic::unwind_safe::UnwindSafe for sb_core::tls::trust::TlsOpts
impl<T, U> core::convert::Into<U> for sb_core::tls::trust::TlsOpts where U: core::convert::From<T>
pub fn sb_core::tls::trust::TlsOpts::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::tls::trust::TlsOpts where U: core::convert::Into<T>
pub type sb_core::tls::trust::TlsOpts::Error = core::convert::Infallible
pub fn sb_core::tls::trust::TlsOpts::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::tls::trust::TlsOpts where U: core::convert::TryFrom<T>
pub type sb_core::tls::trust::TlsOpts::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::tls::trust::TlsOpts::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::tls::trust::TlsOpts where T: core::clone::Clone
pub type sb_core::tls::trust::TlsOpts::Owned = T
pub fn sb_core::tls::trust::TlsOpts::clone_into(&self, target: &mut T)
pub fn sb_core::tls::trust::TlsOpts::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::tls::trust::TlsOpts where T: 'static + ?core::marker::Sized
pub fn sb_core::tls::trust::TlsOpts::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::tls::trust::TlsOpts where T: ?core::marker::Sized
pub fn sb_core::tls::trust::TlsOpts::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::tls::trust::TlsOpts where T: ?core::marker::Sized
pub fn sb_core::tls::trust::TlsOpts::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::tls::trust::TlsOpts where T: core::clone::Clone
pub unsafe fn sb_core::tls::trust::TlsOpts::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::tls::trust::TlsOpts
impl<T> tracing::instrument::WithSubscriber for sb_core::tls::trust::TlsOpts
impl<T> typenum::type_operators::Same for sb_core::tls::trust::TlsOpts
pub type sb_core::tls::trust::TlsOpts::Output = T
pub fn sb_core::tls::trust::alpn_from_env(env_var: &str) -> alloc::vec::Vec<alloc::vec::Vec<u8>>
pub fn sb_core::tls::trust::mk_client(_opts: &sb_core::tls::trust::TlsOpts) -> core::result::Result<alloc::sync::Arc<()>, sb_core::error::SbError>
pub fn sb_core::tls::trust::pins_from_env(env_var: &str) -> alloc::vec::Vec<[u8; 32]>
pub struct sb_core::tls::TlsOpts
pub sb_core::tls::TlsOpts::allow_insecure: bool
pub sb_core::tls::TlsOpts::alpn: alloc::vec::Vec<alloc::vec::Vec<u8>>
pub sb_core::tls::TlsOpts::pin_sha256: alloc::vec::Vec<[u8; 32]>
pub sb_core::tls::TlsOpts::sni: alloc::string::String
impl sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::new(sni: alloc::string::String) -> Self
pub fn sb_core::tls::trust::TlsOpts::with_allow_insecure(self, allow: bool) -> Self
pub fn sb_core::tls::trust::TlsOpts::with_alpn(self, alpn: alloc::vec::Vec<alloc::vec::Vec<u8>>) -> Self
pub fn sb_core::tls::trust::TlsOpts::with_pins(self, pins: alloc::vec::Vec<[u8; 32]>) -> Self
impl core::clone::Clone for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::clone(&self) -> sb_core::tls::trust::TlsOpts
impl core::default::Default for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::default() -> Self
impl core::fmt::Debug for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::tls::trust::TlsOpts
impl core::marker::Send for sb_core::tls::trust::TlsOpts
impl core::marker::Sync for sb_core::tls::trust::TlsOpts
impl core::marker::Unpin for sb_core::tls::trust::TlsOpts
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::tls::trust::TlsOpts
impl core::panic::unwind_safe::UnwindSafe for sb_core::tls::trust::TlsOpts
impl<T, U> core::convert::Into<U> for sb_core::tls::trust::TlsOpts where U: core::convert::From<T>
pub fn sb_core::tls::trust::TlsOpts::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::tls::trust::TlsOpts where U: core::convert::Into<T>
pub type sb_core::tls::trust::TlsOpts::Error = core::convert::Infallible
pub fn sb_core::tls::trust::TlsOpts::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::tls::trust::TlsOpts where U: core::convert::TryFrom<T>
pub type sb_core::tls::trust::TlsOpts::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::tls::trust::TlsOpts::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::tls::trust::TlsOpts where T: core::clone::Clone
pub type sb_core::tls::trust::TlsOpts::Owned = T
pub fn sb_core::tls::trust::TlsOpts::clone_into(&self, target: &mut T)
pub fn sb_core::tls::trust::TlsOpts::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::tls::trust::TlsOpts where T: 'static + ?core::marker::Sized
pub fn sb_core::tls::trust::TlsOpts::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::tls::trust::TlsOpts where T: ?core::marker::Sized
pub fn sb_core::tls::trust::TlsOpts::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::tls::trust::TlsOpts where T: ?core::marker::Sized
pub fn sb_core::tls::trust::TlsOpts::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::tls::trust::TlsOpts where T: core::clone::Clone
pub unsafe fn sb_core::tls::trust::TlsOpts::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::tls::trust::TlsOpts
pub fn sb_core::tls::trust::TlsOpts::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::tls::trust::TlsOpts
impl<T> tracing::instrument::WithSubscriber for sb_core::tls::trust::TlsOpts
impl<T> typenum::type_operators::Same for sb_core::tls::trust::TlsOpts
pub type sb_core::tls::trust::TlsOpts::Output = T
pub fn sb_core::tls::alpn_from_env(env_var: &str) -> alloc::vec::Vec<alloc::vec::Vec<u8>>
pub fn sb_core::tls::mk_client(_opts: &sb_core::tls::trust::TlsOpts) -> core::result::Result<alloc::sync::Arc<()>, sb_core::error::SbError>
pub fn sb_core::tls::pins_from_env(env_var: &str) -> alloc::vec::Vec<[u8; 32]>
pub mod sb_core::transport
pub mod sb_core::transport::tcp
pub struct sb_core::transport::tcp::DialResult
pub sb_core::transport::tcp::DialResult::elapsed_ms: u128
pub sb_core::transport::tcp::DialResult::error: core::option::Option<sb_core::errors::classify::NetClass>
pub sb_core::transport::tcp::DialResult::stream: core::option::Option<std::net::tcp::TcpStream>
impl core::marker::Freeze for sb_core::transport::tcp::DialResult
impl core::marker::Send for sb_core::transport::tcp::DialResult
impl core::marker::Sync for sb_core::transport::tcp::DialResult
impl core::marker::Unpin for sb_core::transport::tcp::DialResult
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::transport::tcp::DialResult
impl core::panic::unwind_safe::UnwindSafe for sb_core::transport::tcp::DialResult
impl<T, U> core::convert::Into<U> for sb_core::transport::tcp::DialResult where U: core::convert::From<T>
pub fn sb_core::transport::tcp::DialResult::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::transport::tcp::DialResult where U: core::convert::Into<T>
pub type sb_core::transport::tcp::DialResult::Error = core::convert::Infallible
pub fn sb_core::transport::tcp::DialResult::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::transport::tcp::DialResult where U: core::convert::TryFrom<T>
pub type sb_core::transport::tcp::DialResult::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::transport::tcp::DialResult::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::transport::tcp::DialResult where T: 'static + ?core::marker::Sized
pub fn sb_core::transport::tcp::DialResult::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::transport::tcp::DialResult where T: ?core::marker::Sized
pub fn sb_core::transport::tcp::DialResult::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::transport::tcp::DialResult where T: ?core::marker::Sized
pub fn sb_core::transport::tcp::DialResult::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::transport::tcp::DialResult
pub fn sb_core::transport::tcp::DialResult::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::transport::tcp::DialResult
impl<T> tracing::instrument::WithSubscriber for sb_core::transport::tcp::DialResult
impl<T> typenum::type_operators::Same for sb_core::transport::tcp::DialResult
pub type sb_core::transport::tcp::DialResult::Output = T
pub struct sb_core::transport::tcp::TcpDialer
pub sb_core::transport::tcp::TcpDialer::connect_timeout: core::time::Duration
pub sb_core::transport::tcp::TcpDialer::keepalive_secs: core::option::Option<u64>
impl sb_core::transport::tcp::TcpDialer
pub fn sb_core::transport::tcp::TcpDialer::dial(&self, addr: &str) -> sb_core::transport::tcp::DialResult
impl core::default::Default for sb_core::transport::tcp::TcpDialer
pub fn sb_core::transport::tcp::TcpDialer::default() -> Self
impl core::fmt::Debug for sb_core::transport::tcp::TcpDialer
pub fn sb_core::transport::tcp::TcpDialer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::transport::tcp::TcpDialer
impl core::marker::Send for sb_core::transport::tcp::TcpDialer
impl core::marker::Sync for sb_core::transport::tcp::TcpDialer
impl core::marker::Unpin for sb_core::transport::tcp::TcpDialer
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::transport::tcp::TcpDialer
impl core::panic::unwind_safe::UnwindSafe for sb_core::transport::tcp::TcpDialer
impl<T, U> core::convert::Into<U> for sb_core::transport::tcp::TcpDialer where U: core::convert::From<T>
pub fn sb_core::transport::tcp::TcpDialer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::transport::tcp::TcpDialer where U: core::convert::Into<T>
pub type sb_core::transport::tcp::TcpDialer::Error = core::convert::Infallible
pub fn sb_core::transport::tcp::TcpDialer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::transport::tcp::TcpDialer where U: core::convert::TryFrom<T>
pub type sb_core::transport::tcp::TcpDialer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::transport::tcp::TcpDialer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::transport::tcp::TcpDialer where T: 'static + ?core::marker::Sized
pub fn sb_core::transport::tcp::TcpDialer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::transport::tcp::TcpDialer where T: ?core::marker::Sized
pub fn sb_core::transport::tcp::TcpDialer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::transport::tcp::TcpDialer where T: ?core::marker::Sized
pub fn sb_core::transport::tcp::TcpDialer::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::transport::tcp::TcpDialer
pub fn sb_core::transport::tcp::TcpDialer::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::transport::tcp::TcpDialer
impl<T> tracing::instrument::WithSubscriber for sb_core::transport::tcp::TcpDialer
impl<T> typenum::type_operators::Same for sb_core::transport::tcp::TcpDialer
pub type sb_core::transport::tcp::TcpDialer::Output = T
pub mod sb_core::transport::tls
pub struct sb_core::transport::tls::TlsClient
pub sb_core::transport::tls::TlsClient::alpn: alloc::vec::Vec<alloc::vec::Vec<u8>>
pub sb_core::transport::tls::TlsClient::dialer: sb_core::transport::tcp::TcpDialer
impl sb_core::transport::tls::TlsClient
pub async fn sb_core::transport::tls::TlsClient::connect(&self, _server_name: alloc::string::String, _tcp_stream: tokio::net::tcp::stream::TcpStream) -> anyhow::Result<()>
pub fn sb_core::transport::tls::TlsClient::from_env() -> Self
pub fn sb_core::transport::tls::TlsClient::handshake(&self, server_name: &str, addr: &str) -> sb_core::transport::tls::TlsResult
impl core::default::Default for sb_core::transport::tls::TlsClient
pub fn sb_core::transport::tls::TlsClient::default() -> sb_core::transport::tls::TlsClient
impl core::marker::Freeze for sb_core::transport::tls::TlsClient
impl core::marker::Send for sb_core::transport::tls::TlsClient
impl core::marker::Sync for sb_core::transport::tls::TlsClient
impl core::marker::Unpin for sb_core::transport::tls::TlsClient
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::transport::tls::TlsClient
impl core::panic::unwind_safe::UnwindSafe for sb_core::transport::tls::TlsClient
impl<T, U> core::convert::Into<U> for sb_core::transport::tls::TlsClient where U: core::convert::From<T>
pub fn sb_core::transport::tls::TlsClient::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::transport::tls::TlsClient where U: core::convert::Into<T>
pub type sb_core::transport::tls::TlsClient::Error = core::convert::Infallible
pub fn sb_core::transport::tls::TlsClient::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::transport::tls::TlsClient where U: core::convert::TryFrom<T>
pub type sb_core::transport::tls::TlsClient::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::transport::tls::TlsClient::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::transport::tls::TlsClient where T: 'static + ?core::marker::Sized
pub fn sb_core::transport::tls::TlsClient::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::transport::tls::TlsClient where T: ?core::marker::Sized
pub fn sb_core::transport::tls::TlsClient::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::transport::tls::TlsClient where T: ?core::marker::Sized
pub fn sb_core::transport::tls::TlsClient::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::transport::tls::TlsClient
pub fn sb_core::transport::tls::TlsClient::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::transport::tls::TlsClient
impl<T> tracing::instrument::WithSubscriber for sb_core::transport::tls::TlsClient
impl<T> typenum::type_operators::Same for sb_core::transport::tls::TlsClient
pub type sb_core::transport::tls::TlsClient::Output = T
pub struct sb_core::transport::tls::TlsResult
pub sb_core::transport::tls::TlsResult::error: core::option::Option<sb_core::errors::classify::NetClass>
pub sb_core::transport::tls::TlsResult::negotiated_alpn: core::option::Option<alloc::string::String>
impl core::marker::Freeze for sb_core::transport::tls::TlsResult
impl core::marker::Send for sb_core::transport::tls::TlsResult
impl core::marker::Sync for sb_core::transport::tls::TlsResult
impl core::marker::Unpin for sb_core::transport::tls::TlsResult
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::transport::tls::TlsResult
impl core::panic::unwind_safe::UnwindSafe for sb_core::transport::tls::TlsResult
impl<T, U> core::convert::Into<U> for sb_core::transport::tls::TlsResult where U: core::convert::From<T>
pub fn sb_core::transport::tls::TlsResult::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::transport::tls::TlsResult where U: core::convert::Into<T>
pub type sb_core::transport::tls::TlsResult::Error = core::convert::Infallible
pub fn sb_core::transport::tls::TlsResult::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::transport::tls::TlsResult where U: core::convert::TryFrom<T>
pub type sb_core::transport::tls::TlsResult::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::transport::tls::TlsResult::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::transport::tls::TlsResult where T: 'static + ?core::marker::Sized
pub fn sb_core::transport::tls::TlsResult::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::transport::tls::TlsResult where T: ?core::marker::Sized
pub fn sb_core::transport::tls::TlsResult::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::transport::tls::TlsResult where T: ?core::marker::Sized
pub fn sb_core::transport::tls::TlsResult::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::transport::tls::TlsResult
pub fn sb_core::transport::tls::TlsResult::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::transport::tls::TlsResult
impl<T> tracing::instrument::WithSubscriber for sb_core::transport::tls::TlsResult
impl<T> typenum::type_operators::Same for sb_core::transport::tls::TlsResult
pub type sb_core::transport::tls::TlsResult::Output = T
pub type sb_core::transport::TlsStream<T> = T
pub mod sb_core::types
pub enum sb_core::types::Host
pub sb_core::types::Host::Ip(core::net::ip_addr::IpAddr)
pub sb_core::types::Host::Name(alloc::boxed::Box<str>)
impl sb_core::types::Host
pub fn sb_core::types::Host::as_domain(&self) -> core::option::Option<&str>
pub fn sb_core::types::Host::as_ip(&self) -> core::option::Option<core::net::ip_addr::IpAddr>
pub fn sb_core::types::Host::domain(domain: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::types::Host::ip(ip: core::net::ip_addr::IpAddr) -> Self
pub fn sb_core::types::Host::is_domain(&self) -> bool
pub fn sb_core::types::Host::is_ip(&self) -> bool
pub fn sb_core::types::Host::parse(s: &str) -> Self
impl core::clone::Clone for sb_core::types::Host
pub fn sb_core::types::Host::clone(&self) -> sb_core::types::Host
impl core::cmp::Eq for sb_core::types::Host
impl core::cmp::PartialEq for sb_core::types::Host
pub fn sb_core::types::Host::eq(&self, other: &sb_core::types::Host) -> bool
impl core::convert::From<&str> for sb_core::types::Host
pub fn sb_core::types::Host::from(s: &str) -> Self
impl core::convert::From<alloc::string::String> for sb_core::types::Host
pub fn sb_core::types::Host::from(s: alloc::string::String) -> Self
impl core::convert::From<core::net::ip_addr::IpAddr> for sb_core::types::Host
pub fn sb_core::types::Host::from(ip: core::net::ip_addr::IpAddr) -> Self
impl core::fmt::Debug for sb_core::types::Host
pub fn sb_core::types::Host::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::types::Host
pub fn sb_core::types::Host::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::types::Host
pub fn sb_core::types::Host::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::types::Host
impl core::marker::Freeze for sb_core::types::Host
impl core::marker::Send for sb_core::types::Host
impl core::marker::Sync for sb_core::types::Host
impl core::marker::Unpin for sb_core::types::Host
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::types::Host
impl core::panic::unwind_safe::UnwindSafe for sb_core::types::Host
impl<Q, K> equivalent::Equivalent<K> for sb_core::types::Host where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::types::Host::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::types::Host where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::types::Host where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::types::Host::equivalent(&self, key: &K) -> bool
pub fn sb_core::types::Host::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::types::Host where U: core::convert::From<T>
pub fn sb_core::types::Host::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::types::Host where U: core::convert::Into<T>
pub type sb_core::types::Host::Error = core::convert::Infallible
pub fn sb_core::types::Host::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::types::Host where U: core::convert::TryFrom<T>
pub type sb_core::types::Host::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::types::Host::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::types::Host where T: core::clone::Clone
pub type sb_core::types::Host::Owned = T
pub fn sb_core::types::Host::clone_into(&self, target: &mut T)
pub fn sb_core::types::Host::to_owned(&self) -> T
impl<T> alloc::string::ToString for sb_core::types::Host where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::types::Host::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::types::Host where T: 'static + ?core::marker::Sized
pub fn sb_core::types::Host::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::types::Host where T: ?core::marker::Sized
pub fn sb_core::types::Host::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::types::Host where T: ?core::marker::Sized
pub fn sb_core::types::Host::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::types::Host where T: core::clone::Clone
pub unsafe fn sb_core::types::Host::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::types::Host
pub fn sb_core::types::Host::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::types::Host
impl<T> tracing::instrument::WithSubscriber for sb_core::types::Host
impl<T> typenum::type_operators::Same for sb_core::types::Host
pub type sb_core::types::Host::Output = T
pub enum sb_core::types::Network
pub sb_core::types::Network::Tcp
pub sb_core::types::Network::Udp
impl core::clone::Clone for sb_core::types::Network
pub fn sb_core::types::Network::clone(&self) -> sb_core::types::Network
impl core::cmp::Eq for sb_core::types::Network
impl core::cmp::PartialEq for sb_core::types::Network
pub fn sb_core::types::Network::eq(&self, other: &sb_core::types::Network) -> bool
impl core::fmt::Debug for sb_core::types::Network
pub fn sb_core::types::Network::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::types::Network
pub fn sb_core::types::Network::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::types::Network
pub fn sb_core::types::Network::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for sb_core::types::Network
impl core::marker::StructuralPartialEq for sb_core::types::Network
impl core::marker::Freeze for sb_core::types::Network
impl core::marker::Send for sb_core::types::Network
impl core::marker::Sync for sb_core::types::Network
impl core::marker::Unpin for sb_core::types::Network
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::types::Network
impl core::panic::unwind_safe::UnwindSafe for sb_core::types::Network
impl<Q, K> equivalent::Equivalent<K> for sb_core::types::Network where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::types::Network::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::types::Network where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::types::Network where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::types::Network::equivalent(&self, key: &K) -> bool
pub fn sb_core::types::Network::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::types::Network where U: core::convert::From<T>
pub fn sb_core::types::Network::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::types::Network where U: core::convert::Into<T>
pub type sb_core::types::Network::Error = core::convert::Infallible
pub fn sb_core::types::Network::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::types::Network where U: core::convert::TryFrom<T>
pub type sb_core::types::Network::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::types::Network::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::types::Network where T: core::clone::Clone
pub type sb_core::types::Network::Owned = T
pub fn sb_core::types::Network::clone_into(&self, target: &mut T)
pub fn sb_core::types::Network::to_owned(&self) -> T
impl<T> alloc::string::ToString for sb_core::types::Network where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::types::Network::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::types::Network where T: 'static + ?core::marker::Sized
pub fn sb_core::types::Network::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::types::Network where T: ?core::marker::Sized
pub fn sb_core::types::Network::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::types::Network where T: ?core::marker::Sized
pub fn sb_core::types::Network::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::types::Network where T: core::clone::Clone
pub unsafe fn sb_core::types::Network::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::types::Network
pub fn sb_core::types::Network::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::types::Network
impl<T> tracing::instrument::WithSubscriber for sb_core::types::Network
impl<T> typenum::type_operators::Same for sb_core::types::Network
pub type sb_core::types::Network::Output = T
pub struct sb_core::types::ConnCtx
pub sb_core::types::ConnCtx::dst: sb_core::types::Endpoint
pub sb_core::types::ConnCtx::id: u64
pub sb_core::types::ConnCtx::network: sb_core::types::Network
pub sb_core::types::ConnCtx::now: std::time::Instant
pub sb_core::types::ConnCtx::process_info: core::option::Option<sb_core::types::ProcessInfo>
pub sb_core::types::ConnCtx::sni: core::option::Option<alloc::boxed::Box<str>>
pub sb_core::types::ConnCtx::src: core::net::socket_addr::SocketAddr
pub sb_core::types::ConnCtx::user: core::option::Option<alloc::boxed::Box<str>>
impl sb_core::types::ConnCtx
pub fn sb_core::types::ConnCtx::new(id: u64, network: sb_core::types::Network, src: core::net::socket_addr::SocketAddr, dst: sb_core::types::Endpoint) -> Self
pub fn sb_core::types::ConnCtx::with_process_info(self, process_info: sb_core::types::ProcessInfo) -> Self
pub fn sb_core::types::ConnCtx::with_sni(self, sni: impl core::convert::Into<alloc::string::String>) -> Self
pub fn sb_core::types::ConnCtx::with_user(self, user: impl core::convert::Into<alloc::string::String>) -> Self
impl core::fmt::Debug for sb_core::types::ConnCtx
pub fn sb_core::types::ConnCtx::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::types::ConnCtx
impl core::marker::Send for sb_core::types::ConnCtx
impl core::marker::Sync for sb_core::types::ConnCtx
impl core::marker::Unpin for sb_core::types::ConnCtx
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::types::ConnCtx
impl core::panic::unwind_safe::UnwindSafe for sb_core::types::ConnCtx
impl<T, U> core::convert::Into<U> for sb_core::types::ConnCtx where U: core::convert::From<T>
pub fn sb_core::types::ConnCtx::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::types::ConnCtx where U: core::convert::Into<T>
pub type sb_core::types::ConnCtx::Error = core::convert::Infallible
pub fn sb_core::types::ConnCtx::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::types::ConnCtx where U: core::convert::TryFrom<T>
pub type sb_core::types::ConnCtx::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::types::ConnCtx::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::types::ConnCtx where T: 'static + ?core::marker::Sized
pub fn sb_core::types::ConnCtx::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::types::ConnCtx where T: ?core::marker::Sized
pub fn sb_core::types::ConnCtx::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::types::ConnCtx where T: ?core::marker::Sized
pub fn sb_core::types::ConnCtx::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::types::ConnCtx
pub fn sb_core::types::ConnCtx::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::types::ConnCtx
impl<T> tracing::instrument::WithSubscriber for sb_core::types::ConnCtx
impl<T> typenum::type_operators::Same for sb_core::types::ConnCtx
pub type sb_core::types::ConnCtx::Output = T
pub struct sb_core::types::Endpoint
pub sb_core::types::Endpoint::host: sb_core::types::Host
pub sb_core::types::Endpoint::port: u16
impl sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::from_socket_addr(addr: core::net::socket_addr::SocketAddr) -> Self
pub fn sb_core::types::Endpoint::new(host: impl core::convert::Into<sb_core::types::Host>, port: u16) -> Self
pub fn sb_core::types::Endpoint::to_socket_addr(&self) -> core::option::Option<core::net::socket_addr::SocketAddr>
impl core::clone::Clone for sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::clone(&self) -> sb_core::types::Endpoint
impl core::cmp::Eq for sb_core::types::Endpoint
impl core::cmp::PartialEq for sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::eq(&self, other: &sb_core::types::Endpoint) -> bool
impl core::convert::From<core::net::socket_addr::SocketAddr> for sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::from(addr: core::net::socket_addr::SocketAddr) -> Self
impl core::fmt::Debug for sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for sb_core::types::Endpoint
impl core::marker::Freeze for sb_core::types::Endpoint
impl core::marker::Send for sb_core::types::Endpoint
impl core::marker::Sync for sb_core::types::Endpoint
impl core::marker::Unpin for sb_core::types::Endpoint
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::types::Endpoint
impl core::panic::unwind_safe::UnwindSafe for sb_core::types::Endpoint
impl<Q, K> equivalent::Equivalent<K> for sb_core::types::Endpoint where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::types::Endpoint::equivalent(&self, key: &K) -> bool
impl<Q, K> hashbrown::Equivalent<K> for sb_core::types::Endpoint where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
impl<Q, K> hashbrown::Equivalent<K> for sb_core::types::Endpoint where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn sb_core::types::Endpoint::equivalent(&self, key: &K) -> bool
pub fn sb_core::types::Endpoint::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for sb_core::types::Endpoint where U: core::convert::From<T>
pub fn sb_core::types::Endpoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::types::Endpoint where U: core::convert::Into<T>
pub type sb_core::types::Endpoint::Error = core::convert::Infallible
pub fn sb_core::types::Endpoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::types::Endpoint where U: core::convert::TryFrom<T>
pub type sb_core::types::Endpoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::types::Endpoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::types::Endpoint where T: core::clone::Clone
pub type sb_core::types::Endpoint::Owned = T
pub fn sb_core::types::Endpoint::clone_into(&self, target: &mut T)
pub fn sb_core::types::Endpoint::to_owned(&self) -> T
impl<T> alloc::string::ToString for sb_core::types::Endpoint where T: core::fmt::Display + ?core::marker::Sized
pub fn sb_core::types::Endpoint::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for sb_core::types::Endpoint where T: 'static + ?core::marker::Sized
pub fn sb_core::types::Endpoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::types::Endpoint where T: ?core::marker::Sized
pub fn sb_core::types::Endpoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::types::Endpoint where T: ?core::marker::Sized
pub fn sb_core::types::Endpoint::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::types::Endpoint where T: core::clone::Clone
pub unsafe fn sb_core::types::Endpoint::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::types::Endpoint
pub fn sb_core::types::Endpoint::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::types::Endpoint
impl<T> tracing::instrument::WithSubscriber for sb_core::types::Endpoint
impl<T> typenum::type_operators::Same for sb_core::types::Endpoint
pub type sb_core::types::Endpoint::Output = T
pub struct sb_core::types::ProcessInfo
pub sb_core::types::ProcessInfo::name: alloc::string::String
pub sb_core::types::ProcessInfo::path: alloc::string::String
pub sb_core::types::ProcessInfo::pid: u32
impl sb_core::types::ProcessInfo
pub fn sb_core::types::ProcessInfo::new(name: alloc::string::String, path: alloc::string::String, pid: u32) -> Self
impl core::clone::Clone for sb_core::types::ProcessInfo
pub fn sb_core::types::ProcessInfo::clone(&self) -> sb_core::types::ProcessInfo
impl core::cmp::PartialEq for sb_core::types::ProcessInfo
pub fn sb_core::types::ProcessInfo::eq(&self, other: &sb_core::types::ProcessInfo) -> bool
impl core::fmt::Debug for sb_core::types::ProcessInfo
pub fn sb_core::types::ProcessInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for sb_core::types::ProcessInfo
impl core::marker::Freeze for sb_core::types::ProcessInfo
impl core::marker::Send for sb_core::types::ProcessInfo
impl core::marker::Sync for sb_core::types::ProcessInfo
impl core::marker::Unpin for sb_core::types::ProcessInfo
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::types::ProcessInfo
impl core::panic::unwind_safe::UnwindSafe for sb_core::types::ProcessInfo
impl<T, U> core::convert::Into<U> for sb_core::types::ProcessInfo where U: core::convert::From<T>
pub fn sb_core::types::ProcessInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::types::ProcessInfo where U: core::convert::Into<T>
pub type sb_core::types::ProcessInfo::Error = core::convert::Infallible
pub fn sb_core::types::ProcessInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::types::ProcessInfo where U: core::convert::TryFrom<T>
pub type sb_core::types::ProcessInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::types::ProcessInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::types::ProcessInfo where T: core::clone::Clone
pub type sb_core::types::ProcessInfo::Owned = T
pub fn sb_core::types::ProcessInfo::clone_into(&self, target: &mut T)
pub fn sb_core::types::ProcessInfo::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::types::ProcessInfo where T: 'static + ?core::marker::Sized
pub fn sb_core::types::ProcessInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::types::ProcessInfo where T: ?core::marker::Sized
pub fn sb_core::types::ProcessInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::types::ProcessInfo where T: ?core::marker::Sized
pub fn sb_core::types::ProcessInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::types::ProcessInfo where T: core::clone::Clone
pub unsafe fn sb_core::types::ProcessInfo::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::types::ProcessInfo
pub fn sb_core::types::ProcessInfo::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::types::ProcessInfo
impl<T> tracing::instrument::WithSubscriber for sb_core::types::ProcessInfo
impl<T> typenum::type_operators::Same for sb_core::types::ProcessInfo
pub type sb_core::types::ProcessInfo::Output = T
pub struct sb_core::types::UdpSocketBind
pub sb_core::types::UdpSocketBind::addr: core::net::socket_addr::SocketAddr
pub sb_core::types::UdpSocketBind::reuse_addr: bool
pub sb_core::types::UdpSocketBind::reuse_port: bool
impl sb_core::types::UdpSocketBind
pub fn sb_core::types::UdpSocketBind::new(addr: core::net::socket_addr::SocketAddr) -> Self
pub fn sb_core::types::UdpSocketBind::with_reuse_addr(self, reuse: bool) -> Self
pub fn sb_core::types::UdpSocketBind::with_reuse_port(self, reuse: bool) -> Self
impl core::clone::Clone for sb_core::types::UdpSocketBind
pub fn sb_core::types::UdpSocketBind::clone(&self) -> sb_core::types::UdpSocketBind
impl core::fmt::Debug for sb_core::types::UdpSocketBind
pub fn sb_core::types::UdpSocketBind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::types::UdpSocketBind
impl core::marker::Send for sb_core::types::UdpSocketBind
impl core::marker::Sync for sb_core::types::UdpSocketBind
impl core::marker::Unpin for sb_core::types::UdpSocketBind
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::types::UdpSocketBind
impl core::panic::unwind_safe::UnwindSafe for sb_core::types::UdpSocketBind
impl<T, U> core::convert::Into<U> for sb_core::types::UdpSocketBind where U: core::convert::From<T>
pub fn sb_core::types::UdpSocketBind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::types::UdpSocketBind where U: core::convert::Into<T>
pub type sb_core::types::UdpSocketBind::Error = core::convert::Infallible
pub fn sb_core::types::UdpSocketBind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::types::UdpSocketBind where U: core::convert::TryFrom<T>
pub type sb_core::types::UdpSocketBind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::types::UdpSocketBind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::types::UdpSocketBind where T: core::clone::Clone
pub type sb_core::types::UdpSocketBind::Owned = T
pub fn sb_core::types::UdpSocketBind::clone_into(&self, target: &mut T)
pub fn sb_core::types::UdpSocketBind::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::types::UdpSocketBind where T: 'static + ?core::marker::Sized
pub fn sb_core::types::UdpSocketBind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::types::UdpSocketBind where T: ?core::marker::Sized
pub fn sb_core::types::UdpSocketBind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::types::UdpSocketBind where T: ?core::marker::Sized
pub fn sb_core::types::UdpSocketBind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::types::UdpSocketBind where T: core::clone::Clone
pub unsafe fn sb_core::types::UdpSocketBind::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::types::UdpSocketBind
pub fn sb_core::types::UdpSocketBind::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::types::UdpSocketBind
impl<T> tracing::instrument::WithSubscriber for sb_core::types::UdpSocketBind
impl<T> typenum::type_operators::Same for sb_core::types::UdpSocketBind
pub type sb_core::types::UdpSocketBind::Output = T
pub type sb_core::types::DnsRecord = sb_core::dns::message::Record
pub type sb_core::types::HostPort = sb_core::types::Endpoint
pub mod sb_core::util
pub mod sb_core::util::env
pub fn sb_core::util::env::env_bool(key: &str) -> bool
pub fn sb_core::util::env::env_duration_ms(key: &str, default_ms: u64) -> core::time::Duration
pub fn sb_core::util::env::env_duration_secs_min1(key: &str, default_secs: u64) -> core::time::Duration
pub fn sb_core::util::env::env_u64(key: &str, default: u64) -> u64
pub mod sb_core::util::fs_atomic
pub fn sb_core::util::fs_atomic::write_atomic<P: core::convert::AsRef<std::path::Path>>(path: P, data: &[u8]) -> std::io::error::Result<()>
pub mod sb_core::util::token_bucket
pub struct sb_core::util::token_bucket::Bucket
impl sb_core::util::token_bucket::Bucket
pub fn sb_core::util::token_bucket::Bucket::allow(&mut self, cost: u64) -> bool
pub fn sb_core::util::token_bucket::Bucket::new(cap: u64, rate_per_s: f64) -> Self
impl core::marker::Freeze for sb_core::util::token_bucket::Bucket
impl core::marker::Send for sb_core::util::token_bucket::Bucket
impl core::marker::Sync for sb_core::util::token_bucket::Bucket
impl core::marker::Unpin for sb_core::util::token_bucket::Bucket
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::util::token_bucket::Bucket
impl core::panic::unwind_safe::UnwindSafe for sb_core::util::token_bucket::Bucket
impl<T, U> core::convert::Into<U> for sb_core::util::token_bucket::Bucket where U: core::convert::From<T>
pub fn sb_core::util::token_bucket::Bucket::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::util::token_bucket::Bucket where U: core::convert::Into<T>
pub type sb_core::util::token_bucket::Bucket::Error = core::convert::Infallible
pub fn sb_core::util::token_bucket::Bucket::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::util::token_bucket::Bucket where U: core::convert::TryFrom<T>
pub type sb_core::util::token_bucket::Bucket::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::util::token_bucket::Bucket::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for sb_core::util::token_bucket::Bucket where T: 'static + ?core::marker::Sized
pub fn sb_core::util::token_bucket::Bucket::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::util::token_bucket::Bucket where T: ?core::marker::Sized
pub fn sb_core::util::token_bucket::Bucket::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::util::token_bucket::Bucket where T: ?core::marker::Sized
pub fn sb_core::util::token_bucket::Bucket::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for sb_core::util::token_bucket::Bucket
pub fn sb_core::util::token_bucket::Bucket::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::util::token_bucket::Bucket
impl<T> tracing::instrument::WithSubscriber for sb_core::util::token_bucket::Bucket
impl<T> typenum::type_operators::Same for sb_core::util::token_bucket::Bucket
pub type sb_core::util::token_bucket::Bucket::Output = T
pub fn sb_core::util::fast_rand_idx(slice_len: usize) -> usize
pub fn sb_core::util::fast_rand_idx2(slice_len: usize) -> usize
pub fn sb_core::util::secs_opt_to_duration(v: core::option::Option<u64>, default: u64) -> core::time::Duration
pub macro sb_core::slog!
pub struct sb_core::Bridge
pub sb_core::Bridge::inbounds: alloc::vec::Vec<alloc::sync::Arc<dyn sb_core::InboundService>>
pub sb_core::Bridge::outbounds: alloc::vec::Vec<(alloc::string::String, alloc::string::String, alloc::sync::Arc<dyn sb_core::OutboundConnector>)>
impl sb_core::Bridge
pub fn sb_core::Bridge::add_inbound(&mut self, ib: alloc::sync::Arc<dyn sb_core::InboundService>)
pub fn sb_core::Bridge::add_outbound(&mut self, name: alloc::string::String, kind: alloc::string::String, ob: alloc::sync::Arc<dyn sb_core::OutboundConnector>)
pub fn sb_core::Bridge::find_direct_fallback(&self) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
pub fn sb_core::Bridge::find_outbound(&self, name: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
pub fn sb_core::Bridge::get_member(&self, name: &str) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
pub fn sb_core::Bridge::new() -> Self
pub fn sb_core::Bridge::new_from_config(_ir: &sb_config::ir::ConfigIR) -> anyhow::Result<Self>
pub fn sb_core::Bridge::outbounds_snapshot(&self) -> alloc::vec::Vec<(alloc::string::String, alloc::string::String)>
impl sb_core::Bridge
pub fn sb_core::Bridge::from_ir(ir: &sb_config::ir::ConfigIR) -> anyhow::Result<sb_core::Bridge>
impl core::clone::Clone for sb_core::Bridge
pub fn sb_core::Bridge::clone(&self) -> sb_core::Bridge
impl core::default::Default for sb_core::Bridge
pub fn sb_core::Bridge::default() -> Self
impl core::fmt::Debug for sb_core::Bridge
pub fn sb_core::Bridge::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::Bridge
impl core::marker::Send for sb_core::Bridge
impl core::marker::Sync for sb_core::Bridge
impl core::marker::Unpin for sb_core::Bridge
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::Bridge
impl !core::panic::unwind_safe::UnwindSafe for sb_core::Bridge
impl<T, U> core::convert::Into<U> for sb_core::Bridge where U: core::convert::From<T>
pub fn sb_core::Bridge::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::Bridge where U: core::convert::Into<T>
pub type sb_core::Bridge::Error = core::convert::Infallible
pub fn sb_core::Bridge::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::Bridge where U: core::convert::TryFrom<T>
pub type sb_core::Bridge::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::Bridge::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::Bridge where T: core::clone::Clone
pub type sb_core::Bridge::Owned = T
pub fn sb_core::Bridge::clone_into(&self, target: &mut T)
pub fn sb_core::Bridge::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::Bridge where T: 'static + ?core::marker::Sized
pub fn sb_core::Bridge::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::Bridge where T: ?core::marker::Sized
pub fn sb_core::Bridge::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::Bridge where T: ?core::marker::Sized
pub fn sb_core::Bridge::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::Bridge where T: core::clone::Clone
pub unsafe fn sb_core::Bridge::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::Bridge
pub fn sb_core::Bridge::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::Bridge
impl<T> tracing::instrument::WithSubscriber for sb_core::Bridge
impl<T> typenum::type_operators::Same for sb_core::Bridge
pub type sb_core::Bridge::Output = T
pub struct sb_core::InboundParam
pub sb_core::InboundParam::basic_auth: core::option::Option<sb_config::ir::Credentials>
pub sb_core::InboundParam::kind: alloc::string::String
pub sb_core::InboundParam::listen: alloc::string::String
pub sb_core::InboundParam::port: u16
impl core::clone::Clone for sb_core::InboundParam
pub fn sb_core::InboundParam::clone(&self) -> sb_core::InboundParam
impl core::fmt::Debug for sb_core::InboundParam
pub fn sb_core::InboundParam::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::InboundParam
impl core::marker::Send for sb_core::InboundParam
impl core::marker::Sync for sb_core::InboundParam
impl core::marker::Unpin for sb_core::InboundParam
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::InboundParam
impl core::panic::unwind_safe::UnwindSafe for sb_core::InboundParam
impl<T, U> core::convert::Into<U> for sb_core::InboundParam where U: core::convert::From<T>
pub fn sb_core::InboundParam::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::InboundParam where U: core::convert::Into<T>
pub type sb_core::InboundParam::Error = core::convert::Infallible
pub fn sb_core::InboundParam::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::InboundParam where U: core::convert::TryFrom<T>
pub type sb_core::InboundParam::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::InboundParam::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::InboundParam where T: core::clone::Clone
pub type sb_core::InboundParam::Owned = T
pub fn sb_core::InboundParam::clone_into(&self, target: &mut T)
pub fn sb_core::InboundParam::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::InboundParam where T: 'static + ?core::marker::Sized
pub fn sb_core::InboundParam::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::InboundParam where T: ?core::marker::Sized
pub fn sb_core::InboundParam::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::InboundParam where T: ?core::marker::Sized
pub fn sb_core::InboundParam::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::InboundParam where T: core::clone::Clone
pub unsafe fn sb_core::InboundParam::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::InboundParam
pub fn sb_core::InboundParam::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::InboundParam
impl<T> tracing::instrument::WithSubscriber for sb_core::InboundParam
impl<T> typenum::type_operators::Same for sb_core::InboundParam
pub type sb_core::InboundParam::Output = T
pub struct sb_core::OutboundParam
pub sb_core::OutboundParam::credentials: core::option::Option<sb_config::ir::Credentials>
pub sb_core::OutboundParam::kind: alloc::string::String
pub sb_core::OutboundParam::name: core::option::Option<alloc::string::String>
pub sb_core::OutboundParam::port: core::option::Option<u16>
pub sb_core::OutboundParam::server: core::option::Option<alloc::string::String>
impl core::clone::Clone for sb_core::OutboundParam
pub fn sb_core::OutboundParam::clone(&self) -> sb_core::OutboundParam
impl core::fmt::Debug for sb_core::OutboundParam
pub fn sb_core::OutboundParam::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::OutboundParam
impl core::marker::Send for sb_core::OutboundParam
impl core::marker::Sync for sb_core::OutboundParam
impl core::marker::Unpin for sb_core::OutboundParam
impl core::panic::unwind_safe::RefUnwindSafe for sb_core::OutboundParam
impl core::panic::unwind_safe::UnwindSafe for sb_core::OutboundParam
impl<T, U> core::convert::Into<U> for sb_core::OutboundParam where U: core::convert::From<T>
pub fn sb_core::OutboundParam::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::OutboundParam where U: core::convert::Into<T>
pub type sb_core::OutboundParam::Error = core::convert::Infallible
pub fn sb_core::OutboundParam::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::OutboundParam where U: core::convert::TryFrom<T>
pub type sb_core::OutboundParam::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::OutboundParam::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::OutboundParam where T: core::clone::Clone
pub type sb_core::OutboundParam::Owned = T
pub fn sb_core::OutboundParam::clone_into(&self, target: &mut T)
pub fn sb_core::OutboundParam::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::OutboundParam where T: 'static + ?core::marker::Sized
pub fn sb_core::OutboundParam::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::OutboundParam where T: ?core::marker::Sized
pub fn sb_core::OutboundParam::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::OutboundParam where T: ?core::marker::Sized
pub fn sb_core::OutboundParam::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::OutboundParam where T: core::clone::Clone
pub unsafe fn sb_core::OutboundParam::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::OutboundParam
pub fn sb_core::OutboundParam::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::OutboundParam
impl<T> tracing::instrument::WithSubscriber for sb_core::OutboundParam
impl<T> typenum::type_operators::Same for sb_core::OutboundParam
pub type sb_core::OutboundParam::Output = T
pub struct sb_core::SelectorMember
pub sb_core::SelectorMember::conn: alloc::sync::Arc<dyn sb_core::OutboundConnector>
pub sb_core::SelectorMember::name: alloc::string::String
impl core::clone::Clone for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::clone(&self) -> sb_core::outbound::selector::Member
impl core::fmt::Debug for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for sb_core::outbound::selector::Member
impl core::marker::Send for sb_core::outbound::selector::Member
impl core::marker::Sync for sb_core::outbound::selector::Member
impl core::marker::Unpin for sb_core::outbound::selector::Member
impl !core::panic::unwind_safe::RefUnwindSafe for sb_core::outbound::selector::Member
impl !core::panic::unwind_safe::UnwindSafe for sb_core::outbound::selector::Member
impl<T, U> core::convert::Into<U> for sb_core::outbound::selector::Member where U: core::convert::From<T>
pub fn sb_core::outbound::selector::Member::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for sb_core::outbound::selector::Member where U: core::convert::Into<T>
pub type sb_core::outbound::selector::Member::Error = core::convert::Infallible
pub fn sb_core::outbound::selector::Member::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for sb_core::outbound::selector::Member where U: core::convert::TryFrom<T>
pub type sb_core::outbound::selector::Member::Error = <U as core::convert::TryFrom<T>>::Error
pub fn sb_core::outbound::selector::Member::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for sb_core::outbound::selector::Member where T: core::clone::Clone
pub type sb_core::outbound::selector::Member::Owned = T
pub fn sb_core::outbound::selector::Member::clone_into(&self, target: &mut T)
pub fn sb_core::outbound::selector::Member::to_owned(&self) -> T
impl<T> core::any::Any for sb_core::outbound::selector::Member where T: 'static + ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for sb_core::outbound::selector::Member where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for sb_core::outbound::selector::Member where T: ?core::marker::Sized
pub fn sb_core::outbound::selector::Member::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for sb_core::outbound::selector::Member where T: core::clone::Clone
pub unsafe fn sb_core::outbound::selector::Member::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for sb_core::outbound::selector::Member
pub fn sb_core::outbound::selector::Member::from(t: T) -> T
impl<T> tracing::instrument::Instrument for sb_core::outbound::selector::Member
impl<T> tracing::instrument::WithSubscriber for sb_core::outbound::selector::Member
impl<T> typenum::type_operators::Same for sb_core::outbound::selector::Member
pub type sb_core::outbound::selector::Member::Output = T
pub trait sb_core::InboundFactory: core::marker::Send + core::marker::Sync
pub fn sb_core::InboundFactory::create(&self, p: &sb_core::InboundParam) -> core::option::Option<alloc::sync::Arc<dyn sb_core::InboundService>>
pub trait sb_core::InboundService: core::marker::Send + core::marker::Sync + core::fmt::Debug + 'static
pub fn sb_core::InboundService::serve(&self) -> std::io::error::Result<()>
pub trait sb_core::OutboundConnector: core::marker::Send + core::marker::Sync + core::fmt::Debug + 'static
pub fn sb_core::OutboundConnector::connect(&self, host: &str, port: u16) -> std::io::error::Result<std::net::tcp::TcpStream>
impl sb_core::OutboundConnector for sb_core::outbound::selector::Selector
pub fn sb_core::outbound::selector::Selector::connect(&self, host: &str, port: u16) -> std::io::error::Result<std::net::tcp::TcpStream>
pub trait sb_core::OutboundFactory: core::marker::Send + core::marker::Sync
pub fn sb_core::OutboundFactory::create(&self, p: &sb_core::OutboundParam) -> core::option::Option<alloc::sync::Arc<dyn sb_core::OutboundConnector>>
