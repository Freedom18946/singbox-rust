name: Parity Audit

on:
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Rust
        uses: ./.github/actions/rust-setup
        with:
          toolchain: 1.82.0

      - name: Cache audit build
        uses: actions/cache@v4
        with:
          path: |
            .audit/target
          key: ${{ runner.os }}-audit-${{ hashFiles('.audit/Cargo.lock', '.audit/src/**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-audit-

      - name: Build audit tools
        working-directory: .audit
        run: |
          cargo build --release --bin audit
          cargo build --release --bin regression_check

      - name: Run regression check (baseline)
        id: regression_baseline
        working-directory: .audit
        continue-on-error: true
        run: |
          ./target/release/regression_check > regression_baseline.log 2>&1 || true
          cat regression_baseline.log

      - name: Run parity audit
        working-directory: .audit
        run: |
          ./target/release/audit > audit_output.log 2>&1 || true
          cat audit_output.log

      - name: Run regression check (after audit)
        id: regression_check
        working-directory: .audit
        continue-on-error: true
        run: |
          ./target/release/regression_check > regression_check.log 2>&1
          REGRESSION_EXIT_CODE=$?
          cat regression_check.log
          
          # Save regression status
          if [ $REGRESSION_EXIT_CODE -eq 0 ]; then
            echo "has_regression=false" >> $GITHUB_OUTPUT
          else
            echo "has_regression=true" >> $GITHUB_OUTPUT
          fi
          
          # Extract regression details for PR
          if grep -q "New Missing Features" regression_check.log; then
            echo "has_new_missing=true" >> $GITHUB_OUTPUT
          else
            echo "has_new_missing=false" >> $GITHUB_OUTPUT
          fi
          
          if grep -q "Status Downgrades" regression_check.log; then
            echo "has_downgrades=true" >> $GITHUB_OUTPUT
          else
            echo "has_downgrades=false" >> $GITHUB_OUTPUT
          fi
          
          exit 0

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet GO_PARITY_MATRIX.md; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in GO_PARITY_MATRIX.md"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in GO_PARITY_MATRIX.md"
          fi

      - name: Extract statistics
        id: stats
        if: steps.check_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          # Extract statistics from GO_PARITY_MATRIX.md
          TOTAL=$(grep -oP 'Total Features.*:\s*\K\d+' GO_PARITY_MATRIX.md || echo "0")
          FULL=$(grep -oP 'Full.*:\s*\K\d+' GO_PARITY_MATRIX.md | head -1 || echo "0")
          PARTIAL=$(grep -oP 'Partial.*:\s*\K\d+' GO_PARITY_MATRIX.md | head -1 || echo "0")
          MISSING=$(grep -oP 'Missing.*:\s*\K\d+' GO_PARITY_MATRIX.md | head -1 || echo "0")
          
          # Calculate percentages
          if [ "$TOTAL" -gt 0 ]; then
            FULL_PCT=$(awk "BEGIN {printf \"%.1f\", ($FULL / $TOTAL) * 100}")
            PARTIAL_PCT=$(awk "BEGIN {printf \"%.1f\", ($PARTIAL / $TOTAL) * 100}")
            MISSING_PCT=$(awk "BEGIN {printf \"%.1f\", ($MISSING / $TOTAL) * 100}")
          else
            FULL_PCT="0.0"
            PARTIAL_PCT="0.0"
            MISSING_PCT="0.0"
          fi
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "full=$FULL" >> $GITHUB_OUTPUT
          echo "partial=$PARTIAL" >> $GITHUB_OUTPUT
          echo "missing=$MISSING" >> $GITHUB_OUTPUT
          echo "full_pct=$FULL_PCT" >> $GITHUB_OUTPUT
          echo "partial_pct=$PARTIAL_PCT" >> $GITHUB_OUTPUT
          echo "missing_pct=$MISSING_PCT" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.check_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Create a new branch for the audit update
          BRANCH_NAME="parity-audit/$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          # Commit the changes
          git add GO_PARITY_MATRIX.md
          git add .audit/cache/*.json || true
          git commit -m "chore: update parity audit results

Automated parity audit update

Statistics:
- Total Features: ${{ steps.stats.outputs.total }}
- Full: ${{ steps.stats.outputs.full }} (${{ steps.stats.outputs.full_pct }}%)
- Partial: ${{ steps.stats.outputs.partial }} (${{ steps.stats.outputs.partial_pct }}%)
- Missing: ${{ steps.stats.outputs.missing }} (${{ steps.stats.outputs.missing_pct }}%)

Generated by: ${{ github.workflow }}
Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Push the branch
          git push origin "$BRANCH_NAME"
          
          # Save branch name for PR creation
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const stats = {
              total: '${{ steps.stats.outputs.total }}',
              full: '${{ steps.stats.outputs.full }}',
              partial: '${{ steps.stats.outputs.partial }}',
              missing: '${{ steps.stats.outputs.missing }}',
              full_pct: '${{ steps.stats.outputs.full_pct }}',
              partial_pct: '${{ steps.stats.outputs.partial_pct }}',
              missing_pct: '${{ steps.stats.outputs.missing_pct }}'
            };
            
            const hasRegression = '${{ steps.regression_check.outputs.has_regression }}' === 'true';
            const hasNewMissing = '${{ steps.regression_check.outputs.has_new_missing }}' === 'true';
            const hasDowngrades = '${{ steps.regression_check.outputs.has_downgrades }}' === 'true';
            
            let regressionSection = '';
            if (hasRegression) {
              regressionSection = `
### ⚠️ Regression Alert

**Regressions detected in this audit!**

`;
              if (hasNewMissing) {
                regressionSection += '- ❌ New missing features detected\n';
              }
              if (hasDowngrades) {
                regressionSection += '- ⬇️ Feature status downgrades detected\n';
              }
              regressionSection += '\nPlease review the regression check logs for details.\n';
            } else {
              regressionSection = `
### ✅ No Regressions

No regressions detected. Feature parity is maintained or improved.
`;
            }
            
            const body = `## Parity Audit Results

This PR contains the automated weekly parity audit results.

${regressionSection}

### Summary Statistics

| Metric | Count | Percentage |
|--------|-------|------------|
| **Total Features** | ${stats.total} | 100% |
| **Full** | ${stats.full} | ${stats.full_pct}% |
| **Partial** | ${stats.partial} | ${stats.partial_pct}% |
| **Missing** | ${stats.missing} | ${stats.missing_pct}% |

### Changes

- Updated \`GO_PARITY_MATRIX.md\` with latest audit results
- Updated audit cache files

### Review Notes

Please review the changes to ensure:
1. Statistics are accurate
2. No unexpected regressions in feature parity
3. New features are properly categorized

---

*Generated by: ${context.workflow}*
*Run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}*`;

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: parity audit update ${new Date().toISOString().split('T')[0]}${hasRegression ? ' ⚠️ REGRESSIONS' : ''}`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: body
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);
            
            // Add labels
            const labels = ['automated', 'parity-audit', 'documentation'];
            if (hasRegression) {
              labels.push('regression', 'needs-attention');
            }
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: labels
            });
            
            // Add comment with regression details if needed
            if (hasRegression) {
              const fs = require('fs');
              const regressionLog = fs.readFileSync('.audit/regression_check.log', 'utf8');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `## Regression Check Details\n\n\`\`\`\n${regressionLog}\n\`\`\``
              });
            }

      - name: No changes detected
        if: steps.check_changes.outputs.has_changes == 'false' && github.event.inputs.force_update != 'true'
        run: |
          echo "No changes detected in parity audit. Skipping PR creation."
          echo "The audit completed successfully with no updates to GO_PARITY_MATRIX.md"
