name: fuzz-extended

# Extended fuzz testing with matrix coverage
# Runs daily or on manual trigger for comprehensive fuzzing

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      duration:
        description: 'Fuzz duration per target (seconds)'
        required: false
        default: '300'
      targets:
        description: 'Comma-separated list of targets (or "all")'
        required: false
        default: 'all'

permissions:
  contents: read
  issues: write  # To create issues for crashes

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel long-running fuzz jobs

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick sanity check before running full matrix
  sanity-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-setup
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz --version ^0.12.0
      - name: Check all fuzz targets compile
        run: |
          cd fuzz
          cargo +nightly fuzz build
      - name: List available targets
        run: |
          cd fuzz
          cargo +nightly fuzz list

  # Core functionality fuzzing
  fuzz-core:
    needs: sanity-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - fuzz_config
          - fuzz_dns_message
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-setup
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz --version ^0.12.0
      - name: Generate corpus
        run: |
          cd fuzz
          bash scripts/test/fuzz/generate-corpus.sh
      - name: Run fuzz target - ${{ matrix.target }}
        run: |
          DURATION=${{ github.event.inputs.duration || '300' }}
          cd fuzz
          cargo +nightly fuzz run ${{ matrix.target }} -- \
            -max_total_time=$DURATION \
            -print_final_stats=1 \
            2>&1 | tee fuzz.log
      - name: Check for crashes
        id: check_crashes
        run: |
          if [ -d "fuzz/artifacts/${{ matrix.target }}" ] && \
             [ "$(ls -A fuzz/artifacts/${{ matrix.target }})" ]; then
            echo "crashes=true" >> $GITHUB_OUTPUT
            echo "::warning::Crashes found in ${{ matrix.target }}"
          else
            echo "crashes=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload crash artifacts
        if: steps.check_crashes.outputs.crashes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-crashes-${{ matrix.target }}
          path: fuzz/artifacts/${{ matrix.target }}/
          retention-days: 30

  # Protocol fuzzing
  fuzz-protocols:
    needs: sanity-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - fuzz_vmess
          - fuzz_vless
          - fuzz_trojan
          - fuzz_shadowsocks
          - fuzz_hysteria
          - fuzz_tuic
          - fuzz_socks5
          - fuzz_http_connect
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-setup
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz --version ^0.12.0
      - name: Generate corpus
        run: |
          cd fuzz
          bash scripts/test/fuzz/generate-corpus.sh
      - name: Run fuzz target - ${{ matrix.target }}
        run: |
          DURATION=${{ github.event.inputs.duration || '300' }}
          cd fuzz
          cargo +nightly fuzz run ${{ matrix.target }} -- \
            -max_total_time=$DURATION \
            -print_final_stats=1 \
            2>&1 | tee fuzz.log
      - name: Check for crashes
        id: check_crashes
        run: |
          if [ -d "fuzz/artifacts/${{ matrix.target }}" ] && \
             [ "$(ls -A fuzz/artifacts/${{ matrix.target }})" ]; then
            echo "crashes=true" >> $GITHUB_OUTPUT
            echo "::warning::Crashes found in ${{ matrix.target }}"
          else
            echo "crashes=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload crash artifacts
        if: steps.check_crashes.outputs.crashes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-crashes-${{ matrix.target }}
          path: fuzz/artifacts/${{ matrix.target }}/
          retention-days: 30

  # Network layer fuzzing
  fuzz-network:
    needs: sanity-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - fuzz_tun_packet
          - fuzz_mixed_protocol
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-setup
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz --version ^0.12.0
      - name: Generate corpus
        run: |
          cd fuzz
          bash scripts/test/fuzz/generate-corpus.sh
      - name: Run fuzz target - ${{ matrix.target }}
        run: |
          DURATION=${{ github.event.inputs.duration || '300' }}
          cd fuzz
          cargo +nightly fuzz run ${{ matrix.target }} -- \
            -max_total_time=$DURATION \
            -print_final_stats=1 \
            2>&1 | tee fuzz.log
      - name: Check for crashes
        id: check_crashes
        run: |
          if [ -d "fuzz/artifacts/${{ matrix.target }}" ] && \
             [ "$(ls -A fuzz/artifacts/${{ matrix.target }})" ]; then
            echo "crashes=true" >> $GITHUB_OUTPUT
            echo "::warning::Crashes found in ${{ matrix.target }}"
          else
            echo "crashes=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload crash artifacts
        if: steps.check_crashes.outputs.crashes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-crashes-${{ matrix.target }}
          path: fuzz/artifacts/${{ matrix.target }}/
          retention-days: 30

  # API fuzzing
  fuzz-api:
    needs: sanity-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - fuzz_v2ray_api
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/rust-setup
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz --version ^0.12.0
      - name: Generate corpus
        run: |
          cd fuzz
          bash scripts/test/fuzz/generate-corpus.sh
      - name: Run fuzz target - ${{ matrix.target }}
        run: |
          DURATION=${{ github.event.inputs.duration || '300' }}
          cd fuzz
          cargo +nightly fuzz run ${{ matrix.target }} -- \
            -max_total_time=$DURATION \
            -print_final_stats=1 \
            2>&1 | tee fuzz.log
      - name: Check for crashes
        id: check_crashes
        run: |
          if [ -d "fuzz/artifacts/${{ matrix.target }}" ] && \
             [ "$(ls -A fuzz/artifacts/${{ matrix.target }})" ]; then
            echo "crashes=true" >> $GITHUB_OUTPUT
            echo "::warning::Crashes found in ${{ matrix.target }}"
          else
            echo "crashes=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload crash artifacts
        if: steps.check_crashes.outputs.crashes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-crashes-${{ matrix.target }}
          path: fuzz/artifacts/${{ matrix.target }}/
          retention-days: 30

  # Summary report
  fuzz-summary:
    needs: [fuzz-core, fuzz-protocols, fuzz-network, fuzz-api]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Generate summary
        run: |
          echo "# Fuzz Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Duration per target:** ${{ github.event.inputs.duration || '300' }}s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          CRASHES_FOUND=0
          if [ -d "artifacts" ]; then
            CRASHES_FOUND=$(find artifacts -name "crash-*" -o -name "timeout-*" | wc -l)
          fi

          if [ "$CRASHES_FOUND" -gt 0 ]; then
            echo "## ⚠️ Crashes Found: $CRASHES_FOUND" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            find artifacts -type f | while read f; do
              echo "- $(basename $(dirname $f)): $(basename $f)" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "## ✅ No Crashes Found" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const crashes = require('fs').existsSync('artifacts');
            const body = crashes
              ? '⚠️ Fuzz testing found potential issues. Check the artifacts.'
              : '✅ Fuzz testing passed without crashes.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
