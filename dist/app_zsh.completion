#compdef app

autoload -U is-at-least

_app() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_app_commands" \
"*::: :->app" \
&& ret=0
    case $state in
    (app)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-command-$line[1]:"
        case $line[1] in
            (check)
_arguments "${_arguments_options[@]}" : \
'-c+[Config file path (YAML/JSON). Use '\''-'\'' for stdin]:CONFIG:_default' \
'--config=[Config file path (YAML/JSON). Use '\''-'\'' for stdin]:CONFIG:_default' \
'--format=[Output format\: human | json | sarif]:FORMAT:(text json sarif)' \
'--schema-dump=[Dump schema\: v1 (hand), v2 (schemars). Requires --schema]:SCHEMA_DUMP:(v1 v2)' \
'--max-ref-size=[Max reference file size in bytes (default 256 KiB)]:MAX_REF_SIZE:_default' \
'--allow-unknown=[Allow unknown fields under JSON Pointer prefixes (comma-separated), e.g. '\''/dns/custom,/experimental'\'']:ALLOW_UNKNOWN:_default' \
'--rules-dir=[Root directory for resolving rules_* and *file/*path refs]:RULES_DIR:_files' \
'*--diff-config=[Compare two configs (canonical) and print rule-level diff using RuleID]:OLD:_default:OLD:_default' \
'--out=[Output file for --write-normalized (default\: <config>.normalized.json)]:OUT:_default' \
'--strict[Treat warnings as errors]' \
'--schema[Enable v1 JSON-Schema validation]' \
'--check-refs[Check reference files (rules_text/rules_json/*file/*path)]' \
'--deny-unknown[Deny unknown fields (strict schema)]' \
'--explain[Suggest fixes in human format]' \
'--enforce-apiversion[Enforce apiversion/kind presence and sanity (advisory unless --strict)]' \
'--fingerprint[Emit canonical JSON and SHA256 fingerprint into report (no IO)]' \
'--print-fingerprint[Print only the config fingerprint (SHA256-8 hex) and exit]' \
'--normalize[Print normalized config (canonical object keys, rule reordering, deduped domain/cidr). No file writes]' \
'--autofix-plan[Emit a JSON Patch-style autofix plan (move/replace) to make rules effective. No file writes]' \
'--summary[Print a one-line human summary (counts, ports, pools)]' \
'--why[Explainability\: print why a rule is unreachable/empty (dimension-level cause)]' \
'--rule-graph[Emit DOT graph of rule coverage/shadow edges (stdout). No file writes]' \
'--minimize-rules-output[Output minimized config (remove rules fully covered by earlier ones, keep order by specificity)]' \
'--apply-plan[Apply a JSON-Patch plan (from stdin) to the loaded config and print result to stdout. No file writes]' \
'--with-rule-id[Attach stable RuleID (sha256-8) to issues/graph to help mapping after reorder/minimize]' \
'--schema-v2-validate[Validate config against strong typed Schema v2 (feature\: schema-v2). Automatically enabled with --deny-unknown]' \
'--minimize-rules[Try to minimize rules (dedup/merge/etc.)]' \
'--write-normalized[Write normalized (or minimized) config IR dump (JSON)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(prefetch)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_app__prefetch_commands" \
"*::: :->prefetch" \
&& ret=0

    case $state in
    (prefetch)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-prefetch-command-$line[1]:"
        case $line[1] in
            (stats)
_arguments "${_arguments_options[@]}" : \
'--json[输出 JSON 格式而不是文本]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(enqueue)
_arguments "${_arguments_options[@]}" : \
'--url=[目标 URL]:URL:_default' \
'--etag=[可选 ETag]:ETAG:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(heat)
_arguments "${_arguments_options[@]}" : \
'--url=[目标 URL]:URL:_default' \
'--concurrency=[并发度]:CONCURRENCY:_default' \
'--duration=[压测时长（秒）]:DURATION:_default' \
'--rps=[每秒入队速率（0 表示尽力）]:RPS:_default' \
'--etag=[可选 ETag]:ETAG:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" : \
'--interval=[刷新间隔秒]:INTERVAL:_default' \
'--duration=[总时长秒（0 表示无限）]:DURATION:_default' \
'--plain[纯文本输出（非 TTY 友好）]' \
'--json[JSON 单行输出（每次刷新打印一行）]' \
'--ndjson[NDJSON 持续输出]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(drain)
_arguments "${_arguments_options[@]}" : \
'--timeout=[超时时间（秒）]:TIMEOUT:_default' \
'--every=[轮询间隔（毫秒）]:EVERY:_default' \
'--quiet[静默模式（仅用退出码表示结果）]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(sample)
_arguments "${_arguments_options[@]}" : \
'--url=[目标 URL]:URL:_default' \
'--etag=[可选 ETag]:ETAG:_default' \
'--window=[观测窗口（秒）]:WINDOW:_default' \
'--wait-done[等待深度回落到初值 ±Δ（Δ=1）]' \
'--json[JSON 输出]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_app__prefetch__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-prefetch-help-command-$line[1]:"
        case $line[1] in
            (stats)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(enqueue)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(heat)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(drain)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sample)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(auth)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_app__auth_commands" \
"*::: :->auth" \
&& ret=0

    case $state in
    (auth)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-auth-command-$line[1]:"
        case $line[1] in
            (sign)
_arguments "${_arguments_options[@]}" : \
'--key-id=[]:KEY_ID:_default' \
'--secret=[]:SECRET:_default' \
'--algo=[指定算法（默认 hmac-sha256）]:ALGO:(hmac-sha256 hmac-sha512)' \
'--ts=[指定时间戳（秒）]:TS:_default' \
'--nonce=[指定随机串]:NONCE:_default' \
'--env=[从 .env 读取（形如 KEY_ID= / SECRET=）]:ENV:_files' \
'--canon[输出规范串（参与签名的 canonical string）]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(replay)
_arguments "${_arguments_options[@]}" : \
'--url=[]:URL:_default' \
'--key-id=[]:KEY_ID:_default' \
'--secret=[]:SECRET:_default' \
'--rps=[qps（0 表示尽力）]:RPS:_default' \
'--times=[请求总数]:TIMES:_default' \
'--concurrency=[并发]:CONCURRENCY:_default' \
'*--hdr=[附加头（可多次）格式 K\:V]:HDRS:_default' \
'--timeout-ms=[超时（毫秒）]:TIMEOUT_MS:_default' \
'--json[仅输出 JSON 统计]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_app__auth__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-auth-help-command-$line[1]:"
        case $line[1] in
            (sign)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(replay)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(prom)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_app__prom_commands" \
"*::: :->prom" \
&& ret=0

    case $state in
    (prom)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-prom-command-$line[1]:"
        case $line[1] in
            (scrape)
_arguments "${_arguments_options[@]}" : \
'--url=[]:URL:_default' \
'--filter=[仅保留匹配（regex）]:FILTER:_default' \
'--select=[仅选择这些指标（逗号分隔）]:SELECT:_default' \
'*--label=[仅选择标签 key=val（可多次）]:LABELS:_default' \
'--jsonl[JSON 行输出]' \
'--json[单个 JSON 对象（默认）]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(hist)
_arguments "${_arguments_options[@]}" : \
'--url=[指标地址]:URL:_default' \
'--metric=[直方图指标名（*_bucket）]:METRIC:_default' \
'--labels=[可选 label 过滤（key=value,key2=value2）]:LABELS:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_app__prom__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-prom-help-command-$line[1]:"
        case $line[1] in
            (scrape)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hist)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(bench)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_app__bench_commands" \
"*::: :->bench" \
&& ret=0

    case $state in
    (bench)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-bench-command-$line[1]:"
        case $line[1] in
            (io)
_arguments "${_arguments_options[@]}" : \
'--url=[]:URL:_default' \
'--requests=[]:REQUESTS:_default' \
'--concurrency=[]:CONCURRENCY:_default' \
'--method=[HTTP 方法]:METHOD:(GET POST PUT DELETE HEAD PATCH)' \
'--body=[请求体（@file 或 字面值）]:BODY:_default' \
'*--hdr=[追加头（可多次）K\:V]:HDRS:_default' \
'--timeout-ms=[客户端超时（毫秒）]:TIMEOUT_MS:_default' \
'--json[]' \
'--h2[允许 HTTP/2]' \
'--insecure[不验证 TLS]' \
'--keepalive[保持连接]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_app__bench__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-bench-help-command-$line[1]:"
        case $line[1] in
            (io)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(gen-completions)
_arguments "${_arguments_options[@]}" : \
'--shell=[目标 shell]:SHELL:(bash zsh fish power-shell elvish)' \
'--dir=[输出目录（默认 stdout）]:DIR:_files' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(man)
_arguments "${_arguments_options[@]}" : \
'--out=[输出到文件（默认 stdout）]:OUT:_files' \
'--section=[章节（默认 1，由 mangen 默认处理）]:SECTION:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" : \
'--http=[]:HTTP_LISTEN:_default' \
'--config=[]:CONFIG_PATH:_files' \
'--check[只做配置检查：解析+构建，零副作用；成功返回 0，否则返回非 0]' \
'--no-banner[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(route)
_arguments "${_arguments_options[@]}" : \
'-c+[Path to config file]:CONFIG:_default' \
'--config=[Path to config file]:CONFIG:_default' \
'--dest=[Destination host\:port or ip]:DEST:_default' \
'--format=[Output format]:FORMAT:_default' \
'--udp[Use UDP path]' \
'--explain[Explain]' \
'--trace[Include detailed trace (opt-in; contract fields不变；仅额外增加 trace)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_app__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-help-command-$line[1]:"
        case $line[1] in
            (check)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(prefetch)
_arguments "${_arguments_options[@]}" : \
":: :_app__help__prefetch_commands" \
"*::: :->prefetch" \
&& ret=0

    case $state in
    (prefetch)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-help-prefetch-command-$line[1]:"
        case $line[1] in
            (stats)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(enqueue)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(heat)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(drain)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sample)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(auth)
_arguments "${_arguments_options[@]}" : \
":: :_app__help__auth_commands" \
"*::: :->auth" \
&& ret=0

    case $state in
    (auth)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-help-auth-command-$line[1]:"
        case $line[1] in
            (sign)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(replay)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(prom)
_arguments "${_arguments_options[@]}" : \
":: :_app__help__prom_commands" \
"*::: :->prom" \
&& ret=0

    case $state in
    (prom)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-help-prom-command-$line[1]:"
        case $line[1] in
            (scrape)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hist)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(bench)
_arguments "${_arguments_options[@]}" : \
":: :_app__help__bench_commands" \
"*::: :->bench" \
&& ret=0

    case $state in
    (bench)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:app-help-bench-command-$line[1]:"
        case $line[1] in
            (io)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(gen-completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(man)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(route)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_app_commands] )) ||
_app_commands() {
    local commands; commands=(
'check:Validate configuration without starting I/O' \
'prefetch:预取相关工具' \
'auth:鉴权相关工具（签名/重放）' \
'prom:Prometheus 指标工具（抓取/直方图）' \
'bench:简易 I/O 基准（HTTP）' \
'gen-completions:生成 shell 补全脚本' \
'man:生成 man page' \
'run:Run main service (existing)' \
'route:Route explain and test' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app commands' commands "$@"
}
(( $+functions[_app__auth_commands] )) ||
_app__auth_commands() {
    local commands; commands=(
'sign:生成签名头' \
'replay:重放签名请求' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app auth commands' commands "$@"
}
(( $+functions[_app__auth__help_commands] )) ||
_app__auth__help_commands() {
    local commands; commands=(
'sign:生成签名头' \
'replay:重放签名请求' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app auth help commands' commands "$@"
}
(( $+functions[_app__auth__help__help_commands] )) ||
_app__auth__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'app auth help help commands' commands "$@"
}
(( $+functions[_app__auth__help__replay_commands] )) ||
_app__auth__help__replay_commands() {
    local commands; commands=()
    _describe -t commands 'app auth help replay commands' commands "$@"
}
(( $+functions[_app__auth__help__sign_commands] )) ||
_app__auth__help__sign_commands() {
    local commands; commands=()
    _describe -t commands 'app auth help sign commands' commands "$@"
}
(( $+functions[_app__auth__replay_commands] )) ||
_app__auth__replay_commands() {
    local commands; commands=()
    _describe -t commands 'app auth replay commands' commands "$@"
}
(( $+functions[_app__auth__sign_commands] )) ||
_app__auth__sign_commands() {
    local commands; commands=()
    _describe -t commands 'app auth sign commands' commands "$@"
}
(( $+functions[_app__bench_commands] )) ||
_app__bench_commands() {
    local commands; commands=(
'io:简易 HTTP I/O 基准' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app bench commands' commands "$@"
}
(( $+functions[_app__bench__help_commands] )) ||
_app__bench__help_commands() {
    local commands; commands=(
'io:简易 HTTP I/O 基准' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app bench help commands' commands "$@"
}
(( $+functions[_app__bench__help__help_commands] )) ||
_app__bench__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'app bench help help commands' commands "$@"
}
(( $+functions[_app__bench__help__io_commands] )) ||
_app__bench__help__io_commands() {
    local commands; commands=()
    _describe -t commands 'app bench help io commands' commands "$@"
}
(( $+functions[_app__bench__io_commands] )) ||
_app__bench__io_commands() {
    local commands; commands=()
    _describe -t commands 'app bench io commands' commands "$@"
}
(( $+functions[_app__check_commands] )) ||
_app__check_commands() {
    local commands; commands=()
    _describe -t commands 'app check commands' commands "$@"
}
(( $+functions[_app__gen-completions_commands] )) ||
_app__gen-completions_commands() {
    local commands; commands=()
    _describe -t commands 'app gen-completions commands' commands "$@"
}
(( $+functions[_app__help_commands] )) ||
_app__help_commands() {
    local commands; commands=(
'check:Validate configuration without starting I/O' \
'prefetch:预取相关工具' \
'auth:鉴权相关工具（签名/重放）' \
'prom:Prometheus 指标工具（抓取/直方图）' \
'bench:简易 I/O 基准（HTTP）' \
'gen-completions:生成 shell 补全脚本' \
'man:生成 man page' \
'run:Run main service (existing)' \
'route:Route explain and test' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app help commands' commands "$@"
}
(( $+functions[_app__help__auth_commands] )) ||
_app__help__auth_commands() {
    local commands; commands=(
'sign:生成签名头' \
'replay:重放签名请求' \
    )
    _describe -t commands 'app help auth commands' commands "$@"
}
(( $+functions[_app__help__auth__replay_commands] )) ||
_app__help__auth__replay_commands() {
    local commands; commands=()
    _describe -t commands 'app help auth replay commands' commands "$@"
}
(( $+functions[_app__help__auth__sign_commands] )) ||
_app__help__auth__sign_commands() {
    local commands; commands=()
    _describe -t commands 'app help auth sign commands' commands "$@"
}
(( $+functions[_app__help__bench_commands] )) ||
_app__help__bench_commands() {
    local commands; commands=(
'io:简易 HTTP I/O 基准' \
    )
    _describe -t commands 'app help bench commands' commands "$@"
}
(( $+functions[_app__help__bench__io_commands] )) ||
_app__help__bench__io_commands() {
    local commands; commands=()
    _describe -t commands 'app help bench io commands' commands "$@"
}
(( $+functions[_app__help__check_commands] )) ||
_app__help__check_commands() {
    local commands; commands=()
    _describe -t commands 'app help check commands' commands "$@"
}
(( $+functions[_app__help__gen-completions_commands] )) ||
_app__help__gen-completions_commands() {
    local commands; commands=()
    _describe -t commands 'app help gen-completions commands' commands "$@"
}
(( $+functions[_app__help__help_commands] )) ||
_app__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'app help help commands' commands "$@"
}
(( $+functions[_app__help__man_commands] )) ||
_app__help__man_commands() {
    local commands; commands=()
    _describe -t commands 'app help man commands' commands "$@"
}
(( $+functions[_app__help__prefetch_commands] )) ||
_app__help__prefetch_commands() {
    local commands; commands=(
'stats:打印预取指标（队列深度/高水位/事件计数）' \
'enqueue:入队一个预取任务' \
'heat:压测入队' \
'watch:实时观测（刷新曲线/文本/JSON/NDJSON）' \
'drain:等待队列排空（或超时）' \
'sample:对单 URL 做一次触发→观测→汇报' \
    )
    _describe -t commands 'app help prefetch commands' commands "$@"
}
(( $+functions[_app__help__prefetch__drain_commands] )) ||
_app__help__prefetch__drain_commands() {
    local commands; commands=()
    _describe -t commands 'app help prefetch drain commands' commands "$@"
}
(( $+functions[_app__help__prefetch__enqueue_commands] )) ||
_app__help__prefetch__enqueue_commands() {
    local commands; commands=()
    _describe -t commands 'app help prefetch enqueue commands' commands "$@"
}
(( $+functions[_app__help__prefetch__heat_commands] )) ||
_app__help__prefetch__heat_commands() {
    local commands; commands=()
    _describe -t commands 'app help prefetch heat commands' commands "$@"
}
(( $+functions[_app__help__prefetch__sample_commands] )) ||
_app__help__prefetch__sample_commands() {
    local commands; commands=()
    _describe -t commands 'app help prefetch sample commands' commands "$@"
}
(( $+functions[_app__help__prefetch__stats_commands] )) ||
_app__help__prefetch__stats_commands() {
    local commands; commands=()
    _describe -t commands 'app help prefetch stats commands' commands "$@"
}
(( $+functions[_app__help__prefetch__watch_commands] )) ||
_app__help__prefetch__watch_commands() {
    local commands; commands=()
    _describe -t commands 'app help prefetch watch commands' commands "$@"
}
(( $+functions[_app__help__prom_commands] )) ||
_app__help__prom_commands() {
    local commands; commands=(
'scrape:抓 /__metrics 并转 JSON/JSONL' \
'hist:解析直方图，打印 P50/P90/P99 和桶' \
    )
    _describe -t commands 'app help prom commands' commands "$@"
}
(( $+functions[_app__help__prom__hist_commands] )) ||
_app__help__prom__hist_commands() {
    local commands; commands=()
    _describe -t commands 'app help prom hist commands' commands "$@"
}
(( $+functions[_app__help__prom__scrape_commands] )) ||
_app__help__prom__scrape_commands() {
    local commands; commands=()
    _describe -t commands 'app help prom scrape commands' commands "$@"
}
(( $+functions[_app__help__route_commands] )) ||
_app__help__route_commands() {
    local commands; commands=()
    _describe -t commands 'app help route commands' commands "$@"
}
(( $+functions[_app__help__run_commands] )) ||
_app__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'app help run commands' commands "$@"
}
(( $+functions[_app__man_commands] )) ||
_app__man_commands() {
    local commands; commands=()
    _describe -t commands 'app man commands' commands "$@"
}
(( $+functions[_app__prefetch_commands] )) ||
_app__prefetch_commands() {
    local commands; commands=(
'stats:打印预取指标（队列深度/高水位/事件计数）' \
'enqueue:入队一个预取任务' \
'heat:压测入队' \
'watch:实时观测（刷新曲线/文本/JSON/NDJSON）' \
'drain:等待队列排空（或超时）' \
'sample:对单 URL 做一次触发→观测→汇报' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app prefetch commands' commands "$@"
}
(( $+functions[_app__prefetch__drain_commands] )) ||
_app__prefetch__drain_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch drain commands' commands "$@"
}
(( $+functions[_app__prefetch__enqueue_commands] )) ||
_app__prefetch__enqueue_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch enqueue commands' commands "$@"
}
(( $+functions[_app__prefetch__heat_commands] )) ||
_app__prefetch__heat_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch heat commands' commands "$@"
}
(( $+functions[_app__prefetch__help_commands] )) ||
_app__prefetch__help_commands() {
    local commands; commands=(
'stats:打印预取指标（队列深度/高水位/事件计数）' \
'enqueue:入队一个预取任务' \
'heat:压测入队' \
'watch:实时观测（刷新曲线/文本/JSON/NDJSON）' \
'drain:等待队列排空（或超时）' \
'sample:对单 URL 做一次触发→观测→汇报' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app prefetch help commands' commands "$@"
}
(( $+functions[_app__prefetch__help__drain_commands] )) ||
_app__prefetch__help__drain_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch help drain commands' commands "$@"
}
(( $+functions[_app__prefetch__help__enqueue_commands] )) ||
_app__prefetch__help__enqueue_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch help enqueue commands' commands "$@"
}
(( $+functions[_app__prefetch__help__heat_commands] )) ||
_app__prefetch__help__heat_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch help heat commands' commands "$@"
}
(( $+functions[_app__prefetch__help__help_commands] )) ||
_app__prefetch__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch help help commands' commands "$@"
}
(( $+functions[_app__prefetch__help__sample_commands] )) ||
_app__prefetch__help__sample_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch help sample commands' commands "$@"
}
(( $+functions[_app__prefetch__help__stats_commands] )) ||
_app__prefetch__help__stats_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch help stats commands' commands "$@"
}
(( $+functions[_app__prefetch__help__watch_commands] )) ||
_app__prefetch__help__watch_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch help watch commands' commands "$@"
}
(( $+functions[_app__prefetch__sample_commands] )) ||
_app__prefetch__sample_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch sample commands' commands "$@"
}
(( $+functions[_app__prefetch__stats_commands] )) ||
_app__prefetch__stats_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch stats commands' commands "$@"
}
(( $+functions[_app__prefetch__watch_commands] )) ||
_app__prefetch__watch_commands() {
    local commands; commands=()
    _describe -t commands 'app prefetch watch commands' commands "$@"
}
(( $+functions[_app__prom_commands] )) ||
_app__prom_commands() {
    local commands; commands=(
'scrape:抓 /__metrics 并转 JSON/JSONL' \
'hist:解析直方图，打印 P50/P90/P99 和桶' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app prom commands' commands "$@"
}
(( $+functions[_app__prom__help_commands] )) ||
_app__prom__help_commands() {
    local commands; commands=(
'scrape:抓 /__metrics 并转 JSON/JSONL' \
'hist:解析直方图，打印 P50/P90/P99 和桶' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'app prom help commands' commands "$@"
}
(( $+functions[_app__prom__help__help_commands] )) ||
_app__prom__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'app prom help help commands' commands "$@"
}
(( $+functions[_app__prom__help__hist_commands] )) ||
_app__prom__help__hist_commands() {
    local commands; commands=()
    _describe -t commands 'app prom help hist commands' commands "$@"
}
(( $+functions[_app__prom__help__scrape_commands] )) ||
_app__prom__help__scrape_commands() {
    local commands; commands=()
    _describe -t commands 'app prom help scrape commands' commands "$@"
}
(( $+functions[_app__prom__hist_commands] )) ||
_app__prom__hist_commands() {
    local commands; commands=()
    _describe -t commands 'app prom hist commands' commands "$@"
}
(( $+functions[_app__prom__scrape_commands] )) ||
_app__prom__scrape_commands() {
    local commands; commands=()
    _describe -t commands 'app prom scrape commands' commands "$@"
}
(( $+functions[_app__route_commands] )) ||
_app__route_commands() {
    local commands; commands=()
    _describe -t commands 'app route commands' commands "$@"
}
(( $+functions[_app__run_commands] )) ||
_app__run_commands() {
    local commands; commands=()
    _describe -t commands 'app run commands' commands "$@"
}

if [ "$funcstack[1]" = "_app" ]; then
    _app "$@"
else
    compdef _app app
fi
